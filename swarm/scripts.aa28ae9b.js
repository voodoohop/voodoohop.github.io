// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, cache, entry, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject.parcelRequire === 'function' &&
    globalObject.parcelRequire;
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  globalObject.parcelRequire = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"9294434ffe453eb8366110bc293fe969":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "aa28ae9b93686b7ca6f0be86b872c13c";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH */

var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept, acceptedAssets; // eslint-disable-next-line no-redeclare

var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
  var port = HMR_PORT || location.port;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    acceptedAssets = {};
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update

      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || hmrAcceptCheck(global.parcelRequire, asset.id);

        if (didAccept) {
          handled = true;
        }
      });

      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });

        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];

          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      } // Render the fancy html overlay


      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      document.body.appendChild(overlay);
    }
  };

  ws.onerror = function (e) {
    console.error(e.message);
  };

  ws.onclose = function (e) {
    console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}

function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';

  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }

  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    if (link.parentNode !== null) {
      link.parentNode.removeChild(link);
    }
  };

  newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now());
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      var absolute = /^https?:\/\//i.test(links[i].getAttribute('href'));

      if (!absolute) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    if (asset.type === 'css') {
      reloadCSS();
    } else {
      var fn = new Function('require', 'module', 'exports', asset.output);
      modules[asset.id] = [fn, asset.depsByBundle[bundle.HMR_BUNDLE_ID]];
    }
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1]);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(global.parcelRequire, id);
      });

      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }

  acceptedAssets[id] = true;
}
},{}],"2bdaaf333d46f546e6de832b87d4a615":[function(require,module,exports) {
require('./bundle-manifest').register(JSON.parse("{\"a6f0be86b872c13c\":\"scripts.aa28ae9b.js\",\"4058792b884f4f3a\":\"crackles.d2106a43.wav\",\"01d5d156abfbe213\":\"spirit-image-1.548f0182.jpg\",\"82fdf87582ab1115\":\"spirit-image-2.785c43ae.jpg\",\"9ab0e0b5b5dd2a70\":\"spirit-image-3.b4b57167.jpg\",\"29418713793e1c66\":\"spirit-image-4.8841696d.jpg\",\"dbf3751bbf8da6f0\":\"spirit-image-5.87d79896.jpg\",\"16b51a3ab3f9eb21\":\"spirit-image-6.bae85e76.jpg\"}"));
},{"./bundle-manifest":"ba8df6b71e73837c465d69bebde6e64d"}],"ba8df6b71e73837c465d69bebde6e64d":[function(require,module,exports) {
"use strict";

var mapping = {};

function register(pairs) {
  var keys = Object.keys(pairs);

  for (var i = 0; i < keys.length; i++) {
    mapping[keys[i]] = pairs[keys[i]];
  }
}

function resolve(id) {
  var resolved = mapping[id];

  if (resolved == null) {
    throw new Error('Could not resolve bundle with id ' + id);
  }

  return resolved;
}

module.exports.register = register;
module.exports.resolve = resolve;
},{}],"64197246fa69ba2a49eb430657b7e32e":[function(require,module,exports) {
"use strict";

require("../styles/index.scss");

var _crackles = _interopRequireDefault(require("url:../files/crackles.wav"));

var firebase = _interopRequireWildcard(require("firebase/app"));

require("firebase/database");

var _visuals = _interopRequireDefault(require("./visuals"));

var _audio = _interopRequireDefault(require("./audio"));

var _flocking = _interopRequireDefault(require("./agents/flocking"));

var _chord = _interopRequireDefault(require("./agents/chord"));

var _utils = require("./utils");

var _firebase = _interopRequireDefault(require("../firebase.json"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import ImpulseAgent from './agents/impulse'
let dbAgentNames = [];
let agentCollection = {}; // DOM objects

const controlElem = document.getElementById('control');
const controlButtonElems = document.getElementsByClassName('control__button');
const errorElem = document.getElementById('error');
const screenElem = document.getElementById('main');
const startElem = document.getElementById('start'); // Check if we want to force an agent

const forcedAgentParam = (0, _utils.getQueryVariable)('agent');
const hasControl = (0, _utils.getQueryVariable)('control'); // Basic interfaces

const visuals = new _visuals.default(screenElem);
let audio;

function setControlButton(agentName, status, disabled = undefined) {
  for (let i = 0; i < controlButtonElems.length; i += 1) {
    const button = controlButtonElems[i];

    if (agentName == button.dataset.agent) {
      if (status) {
        button.classList.add('control__button--active');
      } else {
        button.classList.remove('control__button--active');
      }
    } else if (typeof disabled !== 'undefined') {
      button.disabled = disabled;
    }
  }
}

function getAgent(agentName) {
  let agent = agentCollection[agentName];
  agent.name = agentName;
  return agent;
}

function getAgents(agentNames) {
  return agentNames.map(agentName => {
    return getAgent(agentName);
  });
}

function initFirebase() {
  // Do the bad thing and expose credentials (whatever, we dont have time!)
  const app = firebase.initializeApp(_firebase.default);
  const database = firebase.database(); // Add client to list

  database.ref('clients').push({
    timestamp: Date.now(),
    userAgent: window.navigator.userAgent
  }); // Listen to changes of the agent state

  const agentNameState = database.ref('state/agentNames');
  setControlButton(null, null, true);
  agentNameState.on('value', snapshot => {
    if (!audio) {
      return;
    }

    setControlButton(null, null, false); // Update value

    dbAgentNames = snapshot.val() || [];
    const existingAgentNames = audio.agents ? audio.agents.map(agent => {
      return agent.name;
    }) : []; // Add these new agents

    const newAgents = dbAgentNames.reduce((acc, newAgentName) => {
      if (!existingAgentNames.includes(newAgentName)) {
        acc.push(newAgentName);
        setControlButton(newAgentName, true);
      }

      return acc;
    }, []); // Remove these agents

    const removeAgents = existingAgentNames.reduce((acc, agentName) => {
      if (!dbAgentNames.includes(agentName)) {
        acc.push(agentName);
        setControlButton(agentName, false);
      }

      return acc;
    }, []);
    audio.removeAgents(getAgents(removeAgents));
    audio.addAgents(getAgents(newAgents));
  });
}

function initControl() {
  const database = firebase.database();
  const ref = database.ref('state/agentNames');
  controlElem.classList.add('control--visible');

  for (let i = 0; i < controlButtonElems.length; i += 1) {
    const button = controlButtonElems[i];
    button.addEventListener('click', event => {
      event.preventDefault();
      const {
        agent
      } = button.dataset;

      if (dbAgentNames.includes(agent)) {
        dbAgentNames.splice(dbAgentNames.findIndex(i => i === agent), 1);
      } else {
        dbAgentNames.push(agent);
      }

      setControlButton(null, null, true);
      ref.set(dbAgentNames);
    });
  }
}

function startIOSPerformance() {
  // Fallback for stupid iOS
  const audioElem = document.createElement('audio');
  screenElem.appendChild(audioElem);
  audioElem.src = _crackles.default;
  audioElem.loop = true;
  audioElem.play();
}

function startPerformance() {
  // Create an audio environment
  audio = new _audio.default();
  audio.setup(!hasControl);
  agentCollection = {
    // impulse: new ImpulseAgent({}, visuals, audio.gain),
    chord: new _chord.default({}, visuals, audio.gain),
    flocking: new _flocking.default({}, visuals, audio.gain)
  }; // Initialise remote control via Firebase

  if (!forcedAgentParam) {
    initFirebase(); // Show control when requested

    if (hasControl) {
      initControl();
    }
  } // Set agent when forced


  if (forcedAgentParam) {
    audio.addAgents([getAgent(forcedAgentParam)]);
  }
}

function showErrorMessage() {
  errorElem.classList.add('error--visible');
}

function init() {
  console.log("Initializing"); // Wait for user to click so we can kick off the WebAudio context

  startElem.classList.add('start--visible');
  startElem.addEventListener('click', () => {
    // Show an image
    const imageName = `image${Math.floor((0, _utils.randomRange)(1, 7))}`;
    visuals.setAnimal(imageName); // Start the performance

    if ((0, _utils.isIOS)() && !hasControl) {
      startIOSPerformance();
    } else {
      startPerformance();
    }

    startElem.classList.remove('start--visible');
  });
} // Check if WebAudio API is supported on this device


if (!(0, _utils.isAudioSupported)() //  ||
// (
//   !isIOS() &&
//   !isUserMediaSupported()
// )
) {
    console.log("error", !(0, _utils.isAudioSupported)());
    showErrorMessage();
  } else {
  init();
}
},{"../styles/index.scss":"1d1022d663f842985bdd1ed6e1d8b81c","url:../files/crackles.wav":"3b05086cb1c900baa4b21259495a1209","firebase/app":"513add1cebfbf2d92aedab63c9afd4ba","firebase/database":"fec2c7fcdbace8c49f19d39de584f6f8","./visuals":"f13df1fcdf468d455bc8026f71881581","./audio":"d3815e857d32889aef5b29f3ae04f688","./utils":"4a1b9fb8a9bff5151cd568c9bcbb2aec","../firebase.json":"830ce48931a6ecc988fe85d7f63f8b93","./agents/flocking":"7e352fb233400a283b83024ea642ce3e","./agents/chord":"b9e665925a6158b86c87379809f168e2"}],"1d1022d663f842985bdd1ed6e1d8b81c":[function() {},{}],"3b05086cb1c900baa4b21259495a1209":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "4058792b884f4f3a");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"2146da1905b95151ed14d455c784e7b7":[function(require,module,exports) {
"use strict";

/* globals document:readonly */
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.


function getOrigin(url) {
  let matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);

  if (!matches) {
    throw new Error('Origin not found');
  }

  return matches[0];
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;
},{}],"1b9943ef25c7bbdf0dd1b9fa91880a6c":[function(require,module,exports) {
"use strict";

var resolve = require('./bundle-manifest').resolve;

module.exports = function (fromId, toId) {
  return relative(dirname(resolve(fromId)), resolve(toId));
};

function dirname(_filePath) {
  if (_filePath === '') {
    return '.';
  }

  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;
  var slashIndex = filePath.lastIndexOf('/');
  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);
}

function relative(from, to) {
  if (from === to) {
    return '';
  }

  var fromParts = from.split('/');

  if (fromParts[0] === '.') {
    fromParts.shift();
  }

  var toParts = to.split('/');

  if (toParts[0] === '.') {
    toParts.shift();
  } // Find where path segments diverge.


  var i;
  var divergeIndex;

  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {
    if (fromParts[i] !== toParts[i]) {
      divergeIndex = i;
    }
  } // If there are segments from "from" beyond the point of divergence,
  // return back up the path to that point using "..".


  var parts = [];

  for (i = 0; i < fromParts.length - divergeIndex; i++) {
    parts.push('..');
  } // If there are segments from "to" beyond the point of divergence,
  // continue using the remaining segments.


  if (toParts.length > divergeIndex) {
    parts.push.apply(parts, toParts.slice(divergeIndex));
  }

  return parts.join('/');
}

module.exports._dirname = dirname;
module.exports._relative = relative;
},{"./bundle-manifest":"ba8df6b71e73837c465d69bebde6e64d"}],"513add1cebfbf2d92aedab63c9afd4ba":[function(require,module,exports) {
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var firebase = _interopDefault(require('@firebase/app'));

var name = "firebase";
var version = "7.17.1";

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
firebase.registerVersion(name, version, 'app');

module.exports = firebase;
//# sourceMappingURL=index.cjs.js.map

},{"@firebase/app":"0cfff882ee3888779c3bf30fe1e08d98"}],"0cfff882ee3888779c3bf30fe1e08d98":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var util = require('@firebase/util');
var component = require('@firebase/component');
var logger$1 = require('@firebase/logger');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
var ERRORS = (_a = {},
    _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
        'call Firebase App.initializeApp()',
    _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
    _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
    _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
    _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
        'Firebase App instance.',
    _a["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
    _a);
var ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);

var name$1 = "@firebase/app";
var version = "0.6.9";

var name$2 = "@firebase/analytics";

var name$3 = "@firebase/auth";

var name$4 = "@firebase/database";

var name$5 = "@firebase/functions";

var name$6 = "@firebase/installations";

var name$7 = "@firebase/messaging";

var name$8 = "@firebase/performance";

var name$9 = "@firebase/remote-config";

var name$a = "@firebase/storage";

var name$b = "@firebase/firestore";

var name$c = "firebase-wrapper";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$1;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {},
    _a$1[name$1] = 'fire-core',
    _a$1[name$2] = 'fire-analytics',
    _a$1[name$3] = 'fire-auth',
    _a$1[name$4] = 'fire-rtdb',
    _a$1[name$5] = 'fire-fn',
    _a$1[name$6] = 'fire-iid',
    _a$1[name$7] = 'fire-fcm',
    _a$1[name$8] = 'fire-perf',
    _a$1[name$9] = 'fire-rc',
    _a$1[name$a] = 'fire-gcs',
    _a$1[name$b] = 'fire-fst',
    _a$1['fire-js'] = 'fire-js',
    _a$1[name$c] = 'fire-js-all',
    _a$1);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var logger = new logger$1.Logger('@firebase/app');

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, config, firebase_) {
        var e_1, _a;
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ =
            config.automaticDataCollectionEnabled || false;
        this.options_ = util.deepCopy(options);
        this.container = new component.ComponentContainer(config.name);
        // add itself to container
        this._addComponent(new component.Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
        try {
            // populate ComponentContainer with existing components
            for (var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var component$1 = _c.value;
                this._addComponent(component$1);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
        get: function () {
            this.checkDestroyed_();
            return this.automaticDataCollectionEnabled_;
        },
        set: function (val) {
            this.checkDestroyed_();
            this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: false,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
        })
            .then(function () {
            _this.isDeleted_ = true;
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        this.checkDestroyed_();
        // getImmediate will always succeed because _getService is only called for registered components.
        return this.container.getProvider(name).getImmediate({
            identifier: instanceIdentifier
        });
    };
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get this service again.
     *
     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */
    FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.container.getProvider(name).clearInstance(instanceIdentifier);
    };
    /**
     * @param component the component being added to this app's container
     */
    FirebaseAppImpl.prototype._addComponent = function (component) {
        try {
            this.container.addComponent(component);
        }
        catch (e) {
            logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
        }
    };
    FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
        this.container.addOrOverwriteComponent(component);
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');

var version$1 = "7.17.1";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */
function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var components = new Map();
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeApp,
        // @ts-ignore
        app: app,
        registerVersion: registerVersion,
        setLogLevel: logger$1.setLogLevel,
        onLog: onLog,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version$1,
        INTERNAL: {
            registerComponent: registerComponent,
            removeApp: removeApp,
            components: components,
            useAsService: useAsService
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        delete apps[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!util.contains(apps, name)) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
        }
        return apps[name];
    }
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) { rawConfig = {}; }
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = { name: name_1 };
        }
        var config = rawConfig;
        if (config.name === undefined) {
            config.name = DEFAULT_ENTRY_NAME;
        }
        var name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        if (util.contains(apps, name)) {
            throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
        }
        var app = new firebaseAppImpl(options, config, namespace);
        apps[name] = app;
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(function (name) { return apps[name]; });
    }
    function registerComponent(component) {
        var e_1, _a;
        var componentName = component.name;
        if (components.has(componentName)) {
            logger.debug("There were multiple attempts to register component " + componentName + ".");
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        components.set(componentName, component);
        // create service namespace for public components
        if (component.type === "PUBLIC" /* PUBLIC */) {
            // The Service namespace is an accessor function ...
            var serviceNamespace = function (appArg) {
                if (appArg === void 0) { appArg = app(); }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentName] !== 'function') {
                    // Invalid argument.
                    // This happens in the following case: firebase.storage('gs:/')
                    throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                        appName: componentName
                    });
                }
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentName]();
            };
            // ... and a container for service-level properties.
            if (component.serviceProps !== undefined) {
                util.deepExtend(serviceNamespace, component.serviceProps);
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentName] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentName] =
                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                // option added to the no-explicit-any rule when ESlint releases it.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var serviceFxn = this._getService.bind(this, componentName);
                    return serviceFxn.apply(this, component.multipleInstances ? args : []);
                };
        }
        try {
            // add the component to existing app instances
            for (var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var appName = _c.value;
                apps[appName]._addComponent(component);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return component.type === "PUBLIC" /* PUBLIC */
            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName]
            : null;
    }
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
        if (variant) {
            library += "-" + variant;
        }
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            var warning = [
                "Unable to register library \"" + library + "\" with version \"" + version + "\":"
            ];
            if (libraryMismatch) {
                warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
            }
            logger.warn(warning.join(' '));
            return;
        }
        registerComponent(new component.Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
    }
    function onLog(logCallback, options) {
        if (logCallback !== null && typeof logCallback !== 'function') {
            throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                appName: name
            });
        }
        logger$1.setUserLogHandler(logCallback, options);
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        return useService;
    }
    return namespace;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = tslib.__assign(tslib.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
        extendNamespace: extendNamespace,
        createSubscribe: util.createSubscribe,
        ErrorFactory: util.ErrorFactory,
        deepExtend: util.deepExtend });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        util.deepExtend(namespace, props);
    }
    return namespace;
}
var firebase = createFirebaseNamespace();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PlatformLoggerService = /** @class */ (function () {
    function PlatformLoggerService(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    PlatformLoggerService.prototype.getPlatformInfoString = function () {
        var providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers
            .map(function (provider) {
            if (isVersionServiceProvider(provider)) {
                var service = provider.getImmediate();
                return service.library + "/" + service.version;
            }
            else {
                return null;
            }
        })
            .filter(function (logString) { return logString; })
            .join(' ');
    };
    return PlatformLoggerService;
}());
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
    var component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(firebase, variant) {
    firebase.INTERNAL.registerComponent(new component.Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
    // Register `app` package.
    firebase.registerVersion(name$1, version, variant);
    // Register platform SDK identifier (no version).
    firebase.registerVersion('fire-js', '');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (util.isBrowser() && self.firebase !== undefined) {
    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    // eslint-disable-next-line
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
        logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
    }
}
var initializeApp = firebase.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase.initializeApp = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // Environment check before initializing app
    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
    // in @firebase/logger
    if (util.isNode()) {
        logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
    }
    return initializeApp.apply(undefined, args);
};
var firebase$1 = firebase;
registerCoreComponents(firebase$1);

exports.default = firebase$1;
exports.firebase = firebase$1;
//# sourceMappingURL=index.cjs.js.map

},{"tslib":"a212b5bd40bedbc434eaed1b3a2942b1","@firebase/util":"05ebe87642faf12e3e6a5d8e2606f105","@firebase/component":"801a7b364998ef33b32e280aac4fea1a","@firebase/logger":"3a15e19ab036c3aaea02d8f124f3414e"}],"a212b5bd40bedbc434eaed1b3a2942b1":[function(require,module,exports) {
var global = arguments[3];
var define;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global global, define, System, Reflect, Promise */
var __extends;

var __assign;

var __rest;

var __decorate;

var __param;

var __metadata;

var __awaiter;

var __generator;

var __exportStar;

var __values;

var __read;

var __spread;

var __spreadArrays;

var __await;

var __asyncGenerator;

var __asyncDelegator;

var __asyncValues;

var __makeTemplateObject;

var __importStar;

var __importDefault;

var __classPrivateFieldGet;

var __classPrivateFieldSet;

var __createBinding;

(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }

  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }

    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  __extends = function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };

  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  __rest = function (s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };

  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };

  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };

  __createBinding = function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };

  __exportStar = function (m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  };

  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };

  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;

    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }

    return ar;
  };

  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

    return ar;
  };

  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  };

  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };

  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []),
        i,
        q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i;

    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }

    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }

    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }

    function fulfill(value) {
      resume("next", value);
    }

    function reject(value) {
      resume("throw", value);
    }

    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  };

  __asyncDelegator = function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i;

    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };

  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
        i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);

    function verb(n) {
      i[n] = o[n] && function (v) {
        return new Promise(function (resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }

    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };

  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }

    return cooked;
  };

  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };

  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  __classPrivateFieldGet = function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }

    return privateMap.get(receiver);
  };

  __classPrivateFieldSet = function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }

    privateMap.set(receiver, value);
    return value;
  };

  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});
},{}],"05ebe87642faf12e3e6a5d8e2606f105":[function(require,module,exports) {
'use strict';

var global = arguments[3];
Object.defineProperty(exports, '__esModule', {
  value: true
});

var tslib = require('tslib');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */


var CONSTANTS = {
  /**
   * @define {boolean} Whether this is the client Node.js SDK.
   */
  NODE_CLIENT: false,

  /**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */
  NODE_ADMIN: false,

  /**
   * Firebase SDK Version
   */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws an error if the provided assertion is falsy
 */

var assert = function (assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
 * Returns an Error object suitable for throwing.
 */


var assertionError = function (message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var stringToByteArray = function (str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */


var byteArrayToString = function (bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0,
      c = 0;

  while (pos < bytes.length) {
    var c1 = bytes[pos++];

    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }

  return out.join('');
}; // We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()


var base64 = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,

  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,

  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,

  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,

  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },

  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },

  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',

  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray: function (input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }

    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];

    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;

      if (!haveByte3) {
        outByte4 = 64;

        if (!haveByte2) {
          outByte3 = 64;
        }
      }

      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }

    return output.join('');
  },

  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }

    return this.encodeByteArray(stringToByteArray(input), webSafe);
  },

  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }

    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },

  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray: function (input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];

    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;

      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }

      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);

      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);

        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }

    return output;
  },

  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_: function () {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.

      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.

        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * URL-safe base64 encoding
 */

var base64Encode = function (str) {
  var utf8Bytes = stringToByteArray(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */


var base64Decode = function (str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }

  return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */


function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */


function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }

  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());

    case Object:
      if (target === undefined) {
        target = {};
      }

      break;

    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;

    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }

  for (var prop in source) {
    if (!source.hasOwnProperty(prop)) {
      continue;
    }

    target[prop] = deepExtend(target[prop], source[prop]);
  }

  return target;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.reject = function () {};

    this.resolve = function () {};

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */


  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;

    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }

      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        _this.promise.catch(function () {}); // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1


        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };

  return Deferred;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */


function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */


function isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/


function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
 * Detect Browser Environment
 */


function isBrowser() {
  return typeof self === 'object' && self.self === self;
}

function isBrowserExtension() {
  var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
  return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */


function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */


function isElectron() {
  return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */


function isIE() {
  var ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */


function isUWP() {
  return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */


function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */


function isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser
 * @return true if indexedDB is supported by current browser
 */


function isIndexedDBAvailable() {
  if (!('indexedDB' in window) || indexedDB === null) {
    return false;
  }

  return true;
}
/**
 * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 */


function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist_1 = true;
      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
      var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);

      request_1.onsuccess = function () {
        request_1.result.close(); // delete database only when it doesn't pre-exist

        if (!preExist_1) {
          window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
        }

        resolve(true);
      };

      request_1.onupgradeneeded = function () {
        preExist_1 = false;
      };

      request_1.onerror = function () {
        var _a;

        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */


function areCookiesEnabled() {
  if (!navigator || !navigator.cookieEnabled) {
    return false;
  }

  return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ERROR_NAME = 'FirebaseError'; // Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types

var FirebaseError =
/** @class */
function (_super) {
  tslib.__extends(FirebaseError, _super);

  function FirebaseError(code, message) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.name = ERROR_NAME; // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(_this, FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }

    return _this;
  }

  return FirebaseError;
}(Error);

var ErrorFactory =
/** @class */
function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }

  ErrorFactory.prototype.create = function (code) {
    var data = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }

    var customData = data[0] || {};
    var fullCode = this.service + "/" + code;
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).

    var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
    var error = new FirebaseError(fullCode, fullMessage); // Keys with an underscore at the end of their name are not included in
    // error.data for some reason.
    // TODO: Replace with Object.entries when lib is updated to es2017.

    for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
      var key = _b[_a];

      if (key.slice(-1) !== '_') {
        if (key in error) {
          console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
        }

        error[key] = customData[key];
      }
    }

    return error;
  };

  return ErrorFactory;
}();

function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<" + key + "?>";
  });
}

var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */

function jsonEval(str) {
  return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */


function stringify(data) {
  return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var decode = function (token) {
  var header = {},
      claims = {},
      data = {},
      signature = '';

  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}

  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidTimestamp = function (token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
      validUntil = 0;

  if (typeof claims === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }

    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }

  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var issuedAtTime = function (token) {
  var claims = decode(token).claims;

  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }

  return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidFormat = function (token) {
  var decoded = decode(token),
      claims = decoded.claims;
  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isAdmin = function (token) {
  var claims = decode(token).claims;
  return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}

function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function map(obj, fn, contextObj) {
  var res = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }

  return res;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */


function querystring(querystringParams) {
  var params = [];

  var _loop_1 = function (key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };

  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i],
        key = _b[0],
        value = _b[1];

    _loop_1(key, value);
  }

  return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */


function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var key = token.split('=');
      obj[key[0]] = key[1];
    }
  });
  return obj;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */


var Sha1 =
/** @class */
function () {
  function Sha1() {
    /**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */
    this.chain_ = [];
    /**
     * A buffer holding the partially computed hash result.
     * @private
     */

    this.buf_ = [];
    /**
     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
     * as the message schedule in the docs.
     * @private
     */

    this.W_ = [];
    /**
     * Contains data needed to pad messages less than 64 bytes.
     * @private
     */

    this.pad_ = [];
    /**
     * @private {number}
     */

    this.inbuf_ = 0;
    /**
     * @private {number}
     */

    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;

    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }

    this.reset();
  }

  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  /**
   * Internal compress helper function.
   * @param buf Block to compress.
   * @param offset Offset of the block in the buffer.
   * @private
   */


  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }

    var W = this.W_; // get 16 big endian words

    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
        // have a bug that turns the post-increment ++ operator into pre-increment
        // during JIT compilation.  We have code that depends heavily on SHA-1 for
        // correctness and which is affected by this bug, so I've removed all uses
        // of post-increment ++ in which the result value is used.  We can revert
        // this change once the Safari bug
        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
        // most clients have been updated.
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    } // expand to 80 words


    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }

    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k; // TODO(user): Try to unroll this loop to speed up the computation.

    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }

      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }

    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };

  Sha1.prototype.update = function (bytes, length) {
    // TODO(johnlenz): tighten the function signature and remove this check
    if (bytes == null) {
      return;
    }

    if (length === undefined) {
      length = bytes.length;
    }

    var lengthMinusBlock = length - this.blockSize;
    var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.

    var buf = this.buf_;
    var inbuf = this.inbuf_; // The outer while loop should execute at most twice.

    while (n < length) {
      // When we have no data in the block to top up, we can directly process the
      // input buffer (assuming it contains sufficient data). This gives ~25%
      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
      // the data is provided in large chunks (or in multiples of 64 bytes).
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }

      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      }
    }

    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  /** @override */


  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.

    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    } // Add # bits.


    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256; // Don't use bit-shifting here!
    }

    this.compress_(this.buf_);
    var n = 0;

    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }

    return digest;
  };

  return Sha1;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */


function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */


var ObserverProxy =
/** @class */
function () {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;

    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0; // Micro-task scheduling by calling task.then().

    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.

    this.task.then(function () {
      executor(_this);
    }).catch(function (e) {
      _this.error(e);
    });
  }

  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };

  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };

  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */


  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;

    var observer;

    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    } // Assemble an Observer object when passed as callback functions.


    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }

    if (observer.next === undefined) {
      observer.next = noop;
    }

    if (observer.error === undefined) {
      observer.error = noop;
    }

    if (observer.complete === undefined) {
      observer.complete = noop;
    }

    var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.

    if (this.finalized) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {// nothing
        }

        return;
      });
    }

    this.observers.push(observer);
    return unsub;
  }; // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.


  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }

    delete this.observers[i];
    this.observerCount -= 1;

    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };

  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    } // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.


    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }; // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.


  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this; // Execute the callback asynchronously
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };

  ObserverProxy.prototype.close = function (err) {
    var _this = this;

    if (this.finalized) {
      return;
    }

    this.finalized = true;

    if (err !== undefined) {
      this.finalError = err;
    } // Proxy is no longer needed - garbage collect references
    // eslint-disable-next-line @typescript-eslint/no-floating-promises


    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };

  return ObserverProxy;
}();
/** Turn synchronous function into one called asynchronously. */


function async(fn, onError) {
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    }).catch(function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }

  return false;
}

function noop() {// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */


var validateArgCount = function (fnName, minCount, maxCount, argCount) {
  var argError;

  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }

  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */


function errorPrefix(fnName, argumentNumber, optional) {
  var argName = '';

  switch (argumentNumber) {
    case 1:
      argName = optional ? 'first' : 'First';
      break;

    case 2:
      argName = optional ? 'second' : 'Second';
      break;

    case 3:
      argName = optional ? 'third' : 'Third';
      break;

    case 4:
      argName = optional ? 'fourth' : 'Fourth';
      break;

    default:
      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
  }

  var error = fnName + ' failed: ';
  error += argName + ' argument ';
  return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */


function validateNamespace(fnName, argumentNumber, namespace, optional) {
  if (optional && !namespace) {
    return;
  }

  if (typeof namespace !== 'string') {
    //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
  }
}

function validateCallback(fnName, argumentNumber, callback, optional) {
  if (optional && !callback) {
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
  }
}

function validateContextObject(fnName, argumentNumber, context, optional) {
  if (optional && !context) {
    return;
  }

  if (typeof context !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3

/**
 * @param {string} str
 * @return {Array}
 */


var stringToByteArray$1 = function (str) {
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?

    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800; // the high 10 bits.

      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.

      c = 0x10000 + (high << 10) + low;
    }

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */


var stringLength = function (str) {
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++; // skip trail surrogate.
    } else {
      p += 3;
    }
  }

  return p;
};

exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError;
exports.Sha1 = Sha1;
exports.areCookiesEnabled = areCookiesEnabled;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isIndexedDBAvailable = isIndexedDBAvailable;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isSafari = isSafari;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
exports.validateNamespace = validateNamespace; //# sourceMappingURL=index.cjs.js.map
},{"tslib":"a212b5bd40bedbc434eaed1b3a2942b1"}],"801a7b364998ef33b32e280aac4fea1a":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var util = require('@firebase/util');

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
var Component = /** @class */ (function () {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    function Component(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */
        this.serviceProps = {};
        this.instantiationMode = "LAZY" /* LAZY */;
    }
    Component.prototype.setInstantiationMode = function (mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component.prototype.setMultipleInstances = function (multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component.prototype.setServiceProps = function (props) {
        this.serviceProps = props;
        return this;
    };
    return Component;
}());

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
var Provider = /** @class */ (function () {
    function Provider(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    Provider.prototype.get = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            // If the service instance is available, resolve the promise with it immediately
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (instance) {
                    deferred.resolve(instance);
                }
            }
            catch (e) {
                // when the instance factory throws an exception during get(), it should not cause
                // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider.prototype.getImmediate = function (options) {
        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            if (!instance) {
                if (optional) {
                    return null;
                }
                throw Error("Service " + this.name + " is not available");
            }
            return instance;
        }
        catch (e) {
            if (optional) {
                return null;
            }
            else {
                throw e;
            }
        }
    };
    Provider.prototype.getComponent = function () {
        return this.component;
    };
    Provider.prototype.setComponent = function (component) {
        var e_1, _a;
        if (component.name !== this.name) {
            throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
            throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) {
            try {
                this.getOrInitializeService(DEFAULT_ENTRY_NAME);
            }
            catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
            }
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Provider.prototype.clearInstance = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider.prototype.delete = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var services;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        services = Array.from(this.instances.values());
                        return [4 /*yield*/, Promise.all(services
                                .filter(function (service) { return 'INTERNAL' in service; })
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                .map(function (service) { return service.INTERNAL.delete(); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Provider.prototype.isComponentSet = function () {
        return this.component != null;
    };
    Provider.prototype.getOrInitializeService = function (identifier) {
        var instance = this.instances.get(identifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
            this.instances.set(identifier, instance);
        }
        return instance || null;
    };
    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
        if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        }
        else {
            return identifier; // assume multiple instances are supported before the component is provided.
        }
    };
    return Provider;
}());
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
var ComponentContainer = /** @class */ (function () {
    function ComponentContainer(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    ComponentContainer.prototype.addComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            throw new Error("Component " + component.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component);
    };
    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            // delete the existing provider from the container, so we can register the new component
            this.providers.delete(component.name);
        }
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    ComponentContainer.prototype.getProvider = function (name) {
        if (this.providers.has(name)) {
            return this.providers.get(name);
        }
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer.prototype.getProviders = function () {
        return Array.from(this.providers.values());
    };
    return ComponentContainer;
}());

exports.Component = Component;
exports.ComponentContainer = ComponentContainer;
exports.Provider = Provider;
//# sourceMappingURL=index.cjs.js.map

},{"tslib":"a212b5bd40bedbc434eaed1b3a2942b1","@firebase/util":"05ebe87642faf12e3e6a5d8e2606f105"}],"3a15e19ab036c3aaea02d8f124f3414e":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
/**
 * A container for all of the Logger instances
 */
var instances = [];
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(exports.LogLevel || (exports.LogLevel = {}));
var levelStringToEnum = {
    'debug': exports.LogLevel.DEBUG,
    'verbose': exports.LogLevel.VERBOSE,
    'info': exports.LogLevel.INFO,
    'warn': exports.LogLevel.WARN,
    'error': exports.LogLevel.ERROR,
    'silent': exports.LogLevel.SILENT
};
/**
 * The default log level
 */
var defaultLogLevel = exports.LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
var ConsoleMethod = (_a = {},
    _a[exports.LogLevel.DEBUG] = 'log',
    _a[exports.LogLevel.VERBOSE] = 'log',
    _a[exports.LogLevel.INFO] = 'info',
    _a[exports.LogLevel.WARN] = 'warn',
    _a[exports.LogLevel.ERROR] = 'error',
    _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
var defaultLogHandler = function (instance, logType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (logType < instance.logLevel) {
        return;
    }
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) {
        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
    }
    else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = /** @class */ (function () {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    function Logger(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (val) {
            if (!(val in exports.LogLevel)) {
                throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
            }
            this._logLevel = val;
        },
        enumerable: false,
        configurable: true
    });
    // Workaround for setter/getter having to be the same type.
    Logger.prototype.setLogLevel = function (val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger.prototype, "logHandler", {
        get: function () {
            return this._logHandler;
        },
        set: function (val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "userLogHandler", {
        get: function () {
            return this._userLogHandler;
        },
        set: function (val) {
            this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
    };
    return Logger;
}());
function setLogLevel(level) {
    instances.forEach(function (inst) {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function (instance) {
        var customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = function (instance, level) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                var message = args
                    .map(function (arg) {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(function (arg) { return arg; })
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: exports.LogLevel[level].toLowerCase(),
                        message: message,
                        args: args,
                        type: instance.name
                    });
                }
            };
        }
    };
    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}

exports.Logger = Logger;
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;
//# sourceMappingURL=index.cjs.js.map

},{}],"fec2c7fcdbace8c49f19d39de584f6f8":[function(require,module,exports) {
'use strict';

require('@firebase/database');

//# sourceMappingURL=index.cjs.js.map

},{"@firebase/database":"50c61d45409ce3083b083477d9104bc8"}],"50c61d45409ce3083b083477d9104bc8":[function(require,module,exports) {
'use strict';

var process = require("process");

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var firebase = _interopDefault(require('@firebase/app'));

var tslib = require('tslib');

var util = require('@firebase/util');

var logger$1 = require('@firebase/logger');

var component = require('@firebase/component');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */


var DOMStorageWrapper =
/** @class */
function () {
  /**
   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
   */
  function DOMStorageWrapper(domStorage_) {
    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.

    this.prefix_ = 'firebase:';
  }
  /**
   * @param {string} key The key to save the value under
   * @param {?Object} value The value being stored, or null to remove the key.
   */


  DOMStorageWrapper.prototype.set = function (key, value) {
    if (value == null) {
      this.domStorage_.removeItem(this.prefixedName_(key));
    } else {
      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));
    }
  };
  /**
   * @param {string} key
   * @return {*} The value that was stored under this key, or null
   */


  DOMStorageWrapper.prototype.get = function (key) {
    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));

    if (storedVal == null) {
      return null;
    } else {
      return util.jsonEval(storedVal);
    }
  };
  /**
   * @param {string} key
   */


  DOMStorageWrapper.prototype.remove = function (key) {
    this.domStorage_.removeItem(this.prefixedName_(key));
  };
  /**
   * @param {string} name
   * @return {string}
   */


  DOMStorageWrapper.prototype.prefixedName_ = function (name) {
    return this.prefix_ + name;
  };

  DOMStorageWrapper.prototype.toString = function () {
    return this.domStorage_.toString();
  };

  return DOMStorageWrapper;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */


var MemoryStorage =
/** @class */
function () {
  function MemoryStorage() {
    this.cache_ = {};
    this.isInMemoryStorage = true;
  }

  MemoryStorage.prototype.set = function (key, value) {
    if (value == null) {
      delete this.cache_[key];
    } else {
      this.cache_[key] = value;
    }
  };

  MemoryStorage.prototype.get = function (key) {
    if (util.contains(this.cache_, key)) {
      return this.cache_[key];
    }

    return null;
  };

  MemoryStorage.prototype.remove = function (key) {
    delete this.cache_[key];
  };

  return MemoryStorage;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param {string} domStorageName Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @return {?} Turning off type information until a common interface is defined.
 */


var createStoragefor = function (domStorageName) {
  try {
    // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
    // so it must be inside the try/catch.
    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {
      // Need to test cache. Just because it's here doesn't mean it works
      var domStorage = window[domStorageName];
      domStorage.setItem('firebase:sentinel', 'cache');
      domStorage.removeItem('firebase:sentinel');
      return new DOMStorageWrapper(domStorage);
    }
  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.
  // TODO: log?


  return new MemoryStorage();
};
/** A storage object that lasts across sessions */


var PersistentStorage = createStoragefor('localStorage');
/** A storage object that only lasts one session */

var SessionStorage = createStoragefor('sessionStorage');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logClient = new logger$1.Logger('@firebase/database');
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 * @type {function(): number} Generated ID.
 */

var LUIDGenerator = function () {
  var id = 1;
  return function () {
    return id++;
  };
}();
/**
 * Sha1 hash of the input string
 * @param {!string} str The string to hash
 * @return {!string} The resulting hash
 */


var sha1 = function (str) {
  var utf8Bytes = util.stringToByteArray(str);
  var sha1 = new util.Sha1();
  sha1.update(utf8Bytes);
  var sha1Bytes = sha1.digest();
  return util.base64.encodeByteArray(sha1Bytes);
};
/**
 * @param {...*} varArgs
 * @return {string}
 * @private
 */


var buildLogMessage_ = function () {
  var varArgs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    varArgs[_i] = arguments[_i];
  }

  var message = '';

  for (var i = 0; i < varArgs.length; i++) {
    var arg = varArgs[i];

    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof arg.length === 'number') {
      message += buildLogMessage_.apply(null, arg);
    } else if (typeof arg === 'object') {
      message += util.stringify(arg);
    } else {
      message += arg;
    }

    message += ' ';
  }

  return message;
};
/**
 * Use this for all debug messages in Firebase.
 * @type {?function(string)}
 */


var logger = null;
/**
 * Flag to check for log availability on first log message
 * @type {boolean}
 * @private
 */

var firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
 */

var enableLogging = function (logger_, persistent) {
  util.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");

  if (logger_ === true) {
    logClient.logLevel = logger$1.LogLevel.VERBOSE;
    logger = logClient.log.bind(logClient);

    if (persistent) {
      SessionStorage.set('logging_enabled', true);
    }
  } else if (typeof logger_ === 'function') {
    logger = logger_;
  } else {
    logger = null;
    SessionStorage.remove('logging_enabled');
  }
};
/**
 *
 * @param {...(string|Arguments)} varArgs
 */


var log = function () {
  var varArgs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    varArgs[_i] = arguments[_i];
  }

  if (firstLog_ === true) {
    firstLog_ = false;

    if (logger === null && SessionStorage.get('logging_enabled') === true) {
      enableLogging(true);
    }
  }

  if (logger) {
    var message = buildLogMessage_.apply(null, varArgs);
    logger(message);
  }
};
/**
 * @param {!string} prefix
 * @return {function(...[*])}
 */


var logWrapper = function (prefix) {
  return function () {
    var varArgs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }

    log.apply(void 0, tslib.__spread([prefix], varArgs));
  };
};
/**
 * @param {...string} varArgs
 */


var error = function () {
  var varArgs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    varArgs[_i] = arguments[_i];
  }

  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
  logClient.error(message);
};
/**
 * @param {...string} varArgs
 */


var fatal = function () {
  var varArgs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    varArgs[_i] = arguments[_i];
  }

  var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
  logClient.error(message);
  throw new Error(message);
};
/**
 * @param {...*} varArgs
 */


var warn = function () {
  var varArgs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    varArgs[_i] = arguments[_i];
  }

  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
  logClient.warn(message);
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */


var warnIfPageIsSecure = function () {
  // Be very careful accessing browser globals. Who knows what may or may not exist.
  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {
    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');
  }
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 * @param {*} data
 * @return {boolean}
 */


var isInvalidJSONNumber = function (data) {
  return typeof data === 'number' && (data !== data || // NaN
  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
};
/**
 * @param {function()} fn
 */


var executeWhenDOMReady = function (fn) {
  if (util.isNodeSdk() || document.readyState === 'complete') {
    fn();
  } else {
    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
    // fire before onload), but fall back to onload.
    var called_1 = false;

    var wrappedFn_1 = function () {
      if (!document.body) {
        setTimeout(wrappedFn_1, Math.floor(10));
        return;
      }

      if (!called_1) {
        called_1 = true;
        fn();
      }
    };

    if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.

      window.addEventListener('load', wrappedFn_1, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } else if (document.attachEvent) {
      // IE.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      document.attachEvent('onreadystatechange', function () {
        if (document.readyState === 'complete') {
          wrappedFn_1();
        }
      }); // fallback to onload.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on
      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
      // I'm hoping we don't need it.
    }
  }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 * @type {!string}
 */


var MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 * @type {!string}
 */

var MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 * @param {!string} a
 * @param {!string} b
 * @return {!number}
 */

var nameCompare = function (a, b) {
  if (a === b) {
    return 0;
  } else if (a === MIN_NAME || b === MAX_NAME) {
    return -1;
  } else if (b === MIN_NAME || a === MAX_NAME) {
    return 1;
  } else {
    var aAsInt = tryParseInt(a),
        bAsInt = tryParseInt(b);

    if (aAsInt !== null) {
      if (bAsInt !== null) {
        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
      } else {
        return -1;
      }
    } else if (bAsInt !== null) {
      return 1;
    } else {
      return a < b ? -1 : 1;
    }
  }
};
/**
 * @param {!string} a
 * @param {!string} b
 * @return {!number} comparison result.
 */


var stringCompare = function (a, b) {
  if (a === b) {
    return 0;
  } else if (a < b) {
    return -1;
  } else {
    return 1;
  }
};
/**
 * @param {string} key
 * @param {Object} obj
 * @return {*}
 */


var requireKey = function (key, obj) {
  if (obj && key in obj) {
    return obj[key];
  } else {
    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));
  }
};
/**
 * @param {*} obj
 * @return {string}
 */


var ObjectToUniqueKey = function (obj) {
  if (typeof obj !== 'object' || obj === null) {
    return util.stringify(obj);
  }

  var keys = []; // eslint-disable-next-line guard-for-in

  for (var k in obj) {
    keys.push(k);
  } // Export as json, but with the keys sorted.


  keys.sort();
  var key = '{';

  for (var i = 0; i < keys.length; i++) {
    if (i !== 0) {
      key += ',';
    }

    key += util.stringify(keys[i]);
    key += ':';
    key += ObjectToUniqueKey(obj[keys[i]]);
  }

  key += '}';
  return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param {!string} str The string
 * @param {!number} segsize The maximum number of chars in the string.
 * @return {Array.<string>} The string, split into appropriately-sized chunks
 */


var splitStringBySize = function (str, segsize) {
  var len = str.length;

  if (len <= segsize) {
    return [str];
  }

  var dataSegs = [];

  for (var c = 0; c < len; c += segsize) {
    if (c + segsize > len) {
      dataSegs.push(str.substring(c, len));
    } else {
      dataSegs.push(str.substring(c, c + segsize));
    }
  }

  return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj The object or array to iterate over
 * @param fn The function to apply
 */


function each(obj, fn) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn(key, obj[key]);
    }
  }
}
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param {!number} v A double
 * @return {string}
 */


var doubleToIEEE754String = function (v) {
  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL

  var ebits = 11,
      fbits = 52;
  var bias = (1 << ebits - 1) - 1;
  var s, e, f, ln, i; // Compute sign, exponent, fraction
  // Skip NaN / Infinity handling --MJL.

  if (v === 0) {
    e = 0;
    f = 0;
    s = 1 / v === -Infinity ? 1 : 0;
  } else {
    s = v < 0;
    v = Math.abs(v);

    if (v >= Math.pow(2, 1 - bias)) {
      // Normalized
      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
      e = ln + bias;
      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
    } else {
      // Denormalized
      e = 0;
      f = Math.round(v / Math.pow(2, 1 - bias - fbits));
    }
  } // Pack sign, exponent, fraction


  var bits = [];

  for (i = fbits; i; i -= 1) {
    bits.push(f % 2 ? 1 : 0);
    f = Math.floor(f / 2);
  }

  for (i = ebits; i; i -= 1) {
    bits.push(e % 2 ? 1 : 0);
    e = Math.floor(e / 2);
  }

  bits.push(s ? 1 : 0);
  bits.reverse();
  var str = bits.join(''); // Return the data as a hex string. --MJL

  var hexByteString = '';

  for (i = 0; i < 64; i += 8) {
    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);

    if (hexByte.length === 1) {
      hexByte = '0' + hexByte;
    }

    hexByteString = hexByteString + hexByte;
  }

  return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 * @return {boolean}
 */


var isChromeExtensionContentScript = function () {
  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 * @return {boolean}
 */


var isWindowsStoreApp = function () {
  // Check for the presence of a couple WinRT globals
  return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a Javascript Error
 * @param {!string} code
 * @param {!Query} query
 * @return {Error}
 */


var errorForServerCode = function (code, query) {
  var reason = 'Unknown Error';

  if (code === 'too_big') {
    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';
  } else if (code === 'permission_denied') {
    reason = "Client doesn't have permission to access the desired data.";
  } else if (code === 'unavailable') {
    reason = 'The service is unavailable';
  }

  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  error.code = code.toUpperCase();
  return error;
};
/**
 * Used to test for integer-looking strings
 * @type {RegExp}
 * @private
 */


var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 * @param {!string} str
 * @return {?number}
 */

var tryParseInt = function (str) {
  if (INTEGER_REGEXP_.test(str)) {
    var intVal = Number(str);

    if (intVal >= -2147483648 && intVal <= 2147483647) {
      return intVal;
    }
  }

  return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param {!function()} fn The code to guard.
 */


var exceptionGuard = function (fn) {
  try {
    fn();
  } catch (e) {
    // Re-throw exception when it's safe.
    setTimeout(function () {
      // It used to be that "throw e" would result in a good console error with
      // relevant context, but as of Chrome 39, you just get the firebase.js
      // file/line number where we re-throw it, which is useless. So we log
      // e.stack explicitly.
      var stack = e.stack || '';
      warn('Exception was thrown by user callback.', stack);
      throw e;
    }, Math.floor(0));
  }
};
/**
 * @return {boolean} true if we think we're currently being crawled.
 */


var beingCrawled = function () {
  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
  // believe to support JavaScript/AJAX rendering.
  // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
  // would have seen the page" is flaky if we don't treat it as a crawler.

  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param {Function} fn Function to run.
 * @param {number} time Milliseconds to wait before running.
 * @return {number|Object} The setTimeout() return value.
 */


var setTimeoutNonBlocking = function (fn, time) {
  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  if (typeof timeout === 'object' && timeout['unref']) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    timeout['unref']();
  }

  return timeout;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */


var Path =
/** @class */
function () {
  /**
   * @param {string|Array.<string>} pathOrString Path string to parse,
   *      or another path, or the raw tokens array
   * @param {number=} pieceNum
   */
  function Path(pathOrString, pieceNum) {
    if (pieceNum === void 0) {
      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.

      var copyTo = 0;

      for (var i = 0; i < this.pieces_.length; i++) {
        if (this.pieces_[i].length > 0) {
          this.pieces_[copyTo] = this.pieces_[i];
          copyTo++;
        }
      }

      this.pieces_.length = copyTo;
      this.pieceNum_ = 0;
    } else {
      this.pieces_ = pathOrString;
      this.pieceNum_ = pieceNum;
    }
  }

  Object.defineProperty(Path, "Empty", {
    /**
     * Singleton to represent an empty path
     *
     * @const
     */
    get: function () {
      return new Path('');
    },
    enumerable: false,
    configurable: true
  });

  Path.prototype.getFront = function () {
    if (this.pieceNum_ >= this.pieces_.length) {
      return null;
    }

    return this.pieces_[this.pieceNum_];
  };
  /**
   * @return {number} The number of segments in this path
   */


  Path.prototype.getLength = function () {
    return this.pieces_.length - this.pieceNum_;
  };
  /**
   * @return {!Path}
   */


  Path.prototype.popFront = function () {
    var pieceNum = this.pieceNum_;

    if (pieceNum < this.pieces_.length) {
      pieceNum++;
    }

    return new Path(this.pieces_, pieceNum);
  };
  /**
   * @return {?string}
   */


  Path.prototype.getBack = function () {
    if (this.pieceNum_ < this.pieces_.length) {
      return this.pieces_[this.pieces_.length - 1];
    }

    return null;
  };

  Path.prototype.toString = function () {
    var pathString = '';

    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
      if (this.pieces_[i] !== '') {
        pathString += '/' + this.pieces_[i];
      }
    }

    return pathString || '/';
  };

  Path.prototype.toUrlEncodedString = function () {
    var pathString = '';

    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
      if (this.pieces_[i] !== '') {
        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
      }
    }

    return pathString || '/';
  };
  /**
   * Shallow copy of the parts of the path.
   *
   * @param {number=} begin
   * @return {!Array<string>}
   */


  Path.prototype.slice = function (begin) {
    if (begin === void 0) {
      begin = 0;
    }

    return this.pieces_.slice(this.pieceNum_ + begin);
  };
  /**
   * @return {?Path}
   */


  Path.prototype.parent = function () {
    if (this.pieceNum_ >= this.pieces_.length) {
      return null;
    }

    var pieces = [];

    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {
      pieces.push(this.pieces_[i]);
    }

    return new Path(pieces, 0);
  };
  /**
   * @param {string|!Path} childPathObj
   * @return {!Path}
   */


  Path.prototype.child = function (childPathObj) {
    var pieces = [];

    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
      pieces.push(this.pieces_[i]);
    }

    if (childPathObj instanceof Path) {
      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
        pieces.push(childPathObj.pieces_[i]);
      }
    } else {
      var childPieces = childPathObj.split('/');

      for (var i = 0; i < childPieces.length; i++) {
        if (childPieces[i].length > 0) {
          pieces.push(childPieces[i]);
        }
      }
    }

    return new Path(pieces, 0);
  };
  /**
   * @return {boolean} True if there are no segments in this path
   */


  Path.prototype.isEmpty = function () {
    return this.pieceNum_ >= this.pieces_.length;
  };
  /**
   * @param {!Path} outerPath
   * @param {!Path} innerPath
   * @return {!Path} The path from outerPath to innerPath
   */


  Path.relativePath = function (outerPath, innerPath) {
    var outer = outerPath.getFront(),
        inner = innerPath.getFront();

    if (outer === null) {
      return innerPath;
    } else if (outer === inner) {
      return Path.relativePath(outerPath.popFront(), innerPath.popFront());
    } else {
      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');
    }
  };
  /**
   * @param {!Path} left
   * @param {!Path} right
   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
   */


  Path.comparePaths = function (left, right) {
    var leftKeys = left.slice();
    var rightKeys = right.slice();

    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
      var cmp = nameCompare(leftKeys[i], rightKeys[i]);

      if (cmp !== 0) {
        return cmp;
      }
    }

    if (leftKeys.length === rightKeys.length) {
      return 0;
    }

    return leftKeys.length < rightKeys.length ? -1 : 1;
  };
  /**
   *
   * @param {Path} other
   * @return {boolean} true if paths are the same.
   */


  Path.prototype.equals = function (other) {
    if (this.getLength() !== other.getLength()) {
      return false;
    }

    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
      if (this.pieces_[i] !== other.pieces_[j]) {
        return false;
      }
    }

    return true;
  };
  /**
   *
   * @param {!Path} other
   * @return {boolean} True if this path is a parent (or the same as) other
   */


  Path.prototype.contains = function (other) {
    var i = this.pieceNum_;
    var j = other.pieceNum_;

    if (this.getLength() > other.getLength()) {
      return false;
    }

    while (i < this.pieces_.length) {
      if (this.pieces_[i] !== other.pieces_[j]) {
        return false;
      }

      ++i;
      ++j;
    }

    return true;
  };

  return Path;
}(); // end Path

/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */


var ValidationPath =
/** @class */
function () {
  /**
   * @param {!Path} path Initial Path.
   * @param {string} errorPrefix_ Prefix for any error messages.
   */
  function ValidationPath(path, errorPrefix_) {
    this.errorPrefix_ = errorPrefix_;
    /** @type {!Array<string>} */

    this.parts_ = path.slice();
    /** @type {number} Initialize to number of '/' chars needed in path. */

    this.byteLength_ = Math.max(1, this.parts_.length);

    for (var i = 0; i < this.parts_.length; i++) {
      this.byteLength_ += util.stringLength(this.parts_[i]);
    }

    this.checkValid_();
  }

  Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
    /** @const {number} Maximum key depth. */
    get: function () {
      return 32;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
    get: function () {
      return 768;
    },
    enumerable: false,
    configurable: true
  });
  /** @param {string} child */

  ValidationPath.prototype.push = function (child) {
    // Count the needed '/'
    if (this.parts_.length > 0) {
      this.byteLength_ += 1;
    }

    this.parts_.push(child);
    this.byteLength_ += util.stringLength(child);
    this.checkValid_();
  };

  ValidationPath.prototype.pop = function () {
    var last = this.parts_.pop();
    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'

    if (this.parts_.length > 0) {
      this.byteLength_ -= 1;
    }
  };

  ValidationPath.prototype.checkValid_ = function () {
    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');
    }

    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());
    }
  };
  /**
   * String for use in error messages - uses '.' notation for path.
   *
   * @return {string}
   */


  ValidationPath.prototype.toErrorString = function () {
    if (this.parts_.length === 0) {
      return '';
    }

    return "in property '" + this.parts_.join('.') + "'";
  };

  return ValidationPath;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var PROTOCOL_VERSION = '5';
var VERSION_PARAM = 'v';
var TRANSPORT_SESSION_PARAM = 's';
var REFERER_PARAM = 'r';
var FORGE_REF = 'f';
var FORGE_DOMAIN = 'firebaseio.com';
var LAST_SESSION_PARAM = 'ls';
var APPLICATION_ID_PARAM = 'p';
var WEBSOCKET = 'websocket';
var LONG_POLLING = 'long_polling';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A class that holds metadata about a Repo object
 *
 * @constructor
 */

var RepoInfo =
/** @class */
function () {
  /**
   * @param {string} host Hostname portion of the url for the repo
   * @param {boolean} secure Whether or not this repo is accessed over ssl
   * @param {string} namespace The namespace represented by the repo
   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
   * @param {string=} persistenceKey Override the default session persistence storage key
   */
  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {
    if (persistenceKey === void 0) {
      persistenceKey = '';
    }

    if (includeNamespaceInQueryParams === void 0) {
      includeNamespaceInQueryParams = false;
    }

    this.secure = secure;
    this.namespace = namespace;
    this.webSocketOnly = webSocketOnly;
    this.persistenceKey = persistenceKey;
    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
    this.host = host.toLowerCase();
    this.domain = this.host.substr(this.host.indexOf('.') + 1);
    this.internalHost = PersistentStorage.get('host:' + host) || this.host;
  }

  RepoInfo.prototype.needsQueryParam = function () {
    return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;
  };

  RepoInfo.prototype.isCacheableHost = function () {
    return this.internalHost.substr(0, 2) === 's-';
  };

  RepoInfo.prototype.isDemoHost = function () {
    return this.domain === 'firebaseio-demo.com';
  };

  RepoInfo.prototype.isCustomHost = function () {
    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';
  };

  RepoInfo.prototype.updateHost = function (newHost) {
    if (newHost !== this.internalHost) {
      this.internalHost = newHost;

      if (this.isCacheableHost()) {
        PersistentStorage.set('host:' + this.host, this.internalHost);
      }
    }
  };
  /**
   * Returns the websocket URL for this repo
   * @param {string} type of connection
   * @param {Object} params list
   * @return {string} The URL for this repo
   */


  RepoInfo.prototype.connectionURL = function (type, params) {
    util.assert(typeof type === 'string', 'typeof type must == string');
    util.assert(typeof params === 'object', 'typeof params must == object');
    var connURL;

    if (type === WEBSOCKET) {
      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
    } else if (type === LONG_POLLING) {
      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
    } else {
      throw new Error('Unknown connection type: ' + type);
    }

    if (this.needsQueryParam()) {
      params['ns'] = this.namespace;
    }

    var pairs = [];
    each(params, function (key, value) {
      pairs.push(key + '=' + value);
    });
    return connURL + pairs.join('&');
  };
  /** @return {string} */


  RepoInfo.prototype.toString = function () {
    var str = this.toURLString();

    if (this.persistenceKey) {
      str += '<' + this.persistenceKey + '>';
    }

    return str;
  };
  /** @return {string} */


  RepoInfo.prototype.toURLString = function () {
    return (this.secure ? 'https://' : 'http://') + this.host;
  };

  return RepoInfo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {!string} pathString
 * @return {string}
 */


function decodePath(pathString) {
  var pathStringDecoded = '';
  var pieces = pathString.split('/');

  for (var i = 0; i < pieces.length; i++) {
    if (pieces[i].length > 0) {
      var piece = pieces[i];

      try {
        piece = decodeURIComponent(piece.replace(/\+/g, ' '));
      } catch (e) {}

      pathStringDecoded += '/' + piece;
    }
  }

  return pathStringDecoded;
}
/**
 * @param {!string} queryString
 * @return {!{[key:string]:string}} key value hash
 */


function decodeQuery(queryString) {
  var e_1, _a;

  var results = {};

  if (queryString.charAt(0) === '?') {
    queryString = queryString.substring(1);
  }

  try {
    for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
      var segment = _c.value;

      if (segment.length === 0) {
        continue;
      }

      var kv = segment.split('=');

      if (kv.length === 2) {
        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
      } else {
        warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return results;
}
/**
 *
 * @param {!string} dataURL
 * @return {{repoInfo: !RepoInfo, path: !Path}}
 */


var parseRepoInfo = function (dataURL) {
  var parsedUrl = parseDatabaseURL(dataURL),
      namespace = parsedUrl.namespace;

  if (parsedUrl.domain === 'firebase.com') {
    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');
  } // Catch common error of uninitialized namespace value.


  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {
    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
  }

  if (!parsedUrl.secure) {
    warnIfPageIsSecure();
  }

  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
  return {
    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly,
    /*persistenceKey=*/
    '',
    /*includeNamespaceInQueryParams=*/
    namespace !== parsedUrl.subdomain),
    path: new Path(parsedUrl.pathString)
  };
};
/**
 *
 * @param {!string} dataURL
 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
 */


var parseDatabaseURL = function (dataURL) {
  // Default to empty strings in the event of a malformed string.
  var host = '',
      domain = '',
      subdomain = '',
      pathString = '',
      namespace = ''; // Always default to SSL, unless otherwise specified.

  var secure = true,
      scheme = 'https',
      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.

  if (typeof dataURL === 'string') {
    // Parse scheme.
    var colonInd = dataURL.indexOf('//');

    if (colonInd >= 0) {
      scheme = dataURL.substring(0, colonInd - 1);
      dataURL = dataURL.substring(colonInd + 2);
    } // Parse host, path, and query string.


    var slashInd = dataURL.indexOf('/');

    if (slashInd === -1) {
      slashInd = dataURL.length;
    }

    var questionMarkInd = dataURL.indexOf('?');

    if (questionMarkInd === -1) {
      questionMarkInd = dataURL.length;
    }

    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));

    if (slashInd < questionMarkInd) {
      // For pathString, questionMarkInd will always come after slashInd
      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
    }

    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.

    colonInd = host.indexOf(':');

    if (colonInd >= 0) {
      secure = scheme === 'https' || scheme === 'wss';
      port = parseInt(host.substring(colonInd + 1), 10);
    } else {
      colonInd = host.length;
    }

    var hostWithoutPort = host.slice(0, colonInd);

    if (hostWithoutPort.toLowerCase() === 'localhost') {
      domain = 'localhost';
    } else if (hostWithoutPort.split('.').length <= 2) {
      domain = hostWithoutPort;
    } else {
      // Interpret the subdomain of a 3 or more component URL as the namespace name.
      var dotInd = host.indexOf('.');
      subdomain = host.substring(0, dotInd).toLowerCase();
      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.

      namespace = subdomain;
    } // Always treat the value of the `ns` as the namespace name if it is present.


    if ('ns' in queryParams) {
      namespace = queryParams['ns'];
    }
  }

  return {
    host: host,
    port: port,
    domain: domain,
    subdomain: subdomain,
    secure: secure,
    scheme: scheme,
    pathString: pathString,
    namespace: namespace
  };
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * True for invalid Firebase keys
 * @type {RegExp}
 * @private
 */


var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 * @type {RegExp}
 * @private
 */

var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 * @type {number}
 * @private
 */

var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
/**
 * @param {*} key
 * @return {boolean}
 */

var isValidKey = function (key) {
  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
};
/**
 * @param {string} pathString
 * @return {boolean}
 */


var isValidPathString = function (pathString) {
  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
};
/**
 * @param {string} pathString
 * @return {boolean}
 */


var isValidRootPathString = function (pathString) {
  if (pathString) {
    // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
  }

  return isValidPathString(pathString);
};
/**
 * @param {*} priority
 * @return {boolean}
 */


var isValidPriority = function (priority) {
  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
  util.contains(priority, '.sv');
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */


var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
  if (optional && data === undefined) {
    return;
  }

  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);
};
/**
 * Validate a data object client-side before sending to server.
 *
 * @param {string} errorPrefix
 * @param {*} data
 * @param {!Path|!ValidationPath} path_
 */


var validateFirebaseData = function (errorPrefix, data, path_) {
  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;

  if (data === undefined) {
    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
  }

  if (typeof data === 'function') {
    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());
  }

  if (isInvalidJSONNumber(data)) {
    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
  } // Check max leaf size, but try to avoid the utf8 conversion if we can.


  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {
    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + " ('" + data.substring(0, 50) + "...')");
  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
  // to save extra walking of large objects.


  if (data && typeof data === 'object') {
    var hasDotValue_1 = false;
    var hasActualChild_1 = false;
    each(data, function (key, value) {
      if (key === '.value') {
        hasDotValue_1 = true;
      } else if (key !== '.priority' && key !== '.sv') {
        hasActualChild_1 = true;

        if (!isValidKey(key)) {
          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }
      }

      path.push(key);
      validateFirebaseData(errorPrefix, value, path);
      path.pop();
    });

    if (hasDotValue_1 && hasActualChild_1) {
      throw new Error(errorPrefix + ' contains ".value" child ' + path.toErrorString() + ' in addition to actual children.');
    }
  }
};
/**
 * Pre-validate paths passed in the firebase function.
 *
 * @param {string} errorPrefix
 * @param {Array<!Path>} mergePaths
 */


var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
  var i, curPath;

  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];
    var keys = curPath.slice();

    for (var j = 0; j < keys.length; j++) {
      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {
        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
      }
    }
  } // Check that update keys are not descendants of each other.
  // We rely on the property that sorting guarantees that ancestors come
  // right before descendants.


  mergePaths.sort(Path.comparePaths);
  var prevPath = null;

  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];

    if (prevPath !== null && prevPath.contains(curPath)) {
      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());
    }

    prevPath = curPath;
  }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */


var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
  if (optional && data === undefined) {
    return;
  }

  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);

  if (!(data && typeof data === 'object') || Array.isArray(data)) {
    throw new Error(errorPrefix + ' must be an object containing the children to replace.');
  }

  var mergePaths = [];
  each(data, function (key, value) {
    var curPath = new Path(key);
    validateFirebaseData(errorPrefix, value, path.child(curPath));

    if (curPath.getBack() === '.priority') {
      if (!isValidPriority(value)) {
        throw new Error(errorPrefix + "contains an invalid value for '" + curPath.toString() + "', which must be a valid " + 'Firebase priority (a string, finite number, server value, or null).');
      }
    }

    mergePaths.push(curPath);
  });
  validateFirebaseMergePaths(errorPrefix, mergePaths);
};

var validatePriority = function (fnName, argumentNumber, priority, optional) {
  if (optional && priority === undefined) {
    return;
  }

  if (isInvalidJSONNumber(priority)) {
    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');
  } // Special case to allow importing data with a .sv.


  if (!isValidPriority(priority)) {
    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');
  }
};

var validateEventType = function (fnName, argumentNumber, eventType, optional) {
  if (optional && eventType === undefined) {
    return;
  }

  switch (eventType) {
    case 'value':
    case 'child_added':
    case 'child_removed':
    case 'child_changed':
    case 'child_moved':
      break;

    default:
      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
  }
};

var validateKey = function (fnName, argumentNumber, key, optional) {
  if (optional && key === undefined) {
    return;
  }

  if (!isValidKey(key)) {
    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = "' + key + '".  Firebase keys must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "/", "[", or "]").');
  }
};

var validatePathString = function (fnName, argumentNumber, pathString, optional) {
  if (optional && pathString === undefined) {
    return;
  }

  if (!isValidPathString(pathString)) {
    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = "' + pathString + '". Paths must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "[", or "]"');
  }
};

var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
  if (pathString) {
    // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
  }

  validatePathString(fnName, argumentNumber, pathString, optional);
};

var validateWritablePath = function (fnName, path) {
  if (path.getFront() === '.info') {
    throw new Error(fnName + " failed = Can't modify data under /.info/");
  }
};

var validateUrl = function (fnName, argumentNumber, parsedUrl) {
  // TODO = Validate server better.
  var pathString = parsedUrl.path.toString();

  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {
    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\'t contain ".", "#", "$", "[", or "]".');
  }
};

var validateBoolean = function (fnName, argumentNumber, bool, optional) {
  if (optional && bool === undefined) {
    return;
  }

  if (typeof bool !== 'boolean') {
    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
  }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @constructor
 */


var OnDisconnect =
/** @class */
function () {
  /**
   * @param {!Repo} repo_
   * @param {!Path} path_
   */
  function OnDisconnect(repo_, path_) {
    this.repo_ = repo_;
    this.path_ = path_;
  }
  /**
   * @param {function(?Error)=} onComplete
   * @return {!firebase.Promise}
   */


  OnDisconnect.prototype.cancel = function (onComplete) {
    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
    var deferred = new util.Deferred();
    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {function(?Error)=} onComplete
   * @return {!firebase.Promise}
   */


  OnDisconnect.prototype.remove = function (onComplete) {
    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
    validateWritablePath('OnDisconnect.remove', this.path_);
    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);
    var deferred = new util.Deferred();
    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {*} value
   * @param {function(?Error)=} onComplete
   * @return {!firebase.Promise}
   */


  OnDisconnect.prototype.set = function (value, onComplete) {
    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
    validateWritablePath('OnDisconnect.set', this.path_);
    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
    util.validateCallback('OnDisconnect.set', 2, onComplete, true);
    var deferred = new util.Deferred();
    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {*} value
   * @param {number|string|null} priority
   * @param {function(?Error)=} onComplete
   * @return {!firebase.Promise}
   */


  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
    validateWritablePath('OnDisconnect.setWithPriority', this.path_);
    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
    var deferred = new util.Deferred();
    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {!Object} objectToMerge
   * @param {function(?Error)=} onComplete
   * @return {!firebase.Promise}
   */


  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
    validateWritablePath('OnDisconnect.update', this.path_);

    if (Array.isArray(objectToMerge)) {
      var newObjectToMerge = {};

      for (var i = 0; i < objectToMerge.length; ++i) {
        newObjectToMerge['' + i] = objectToMerge[i];
      }

      objectToMerge = newObjectToMerge;
      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');
    }

    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
    util.validateCallback('OnDisconnect.update', 2, onComplete, true);
    var deferred = new util.Deferred();
    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };

  return OnDisconnect;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var TransactionResult =
/** @class */
function () {
  /**
   * A type for the resolve value of Firebase.transaction.
   * @constructor
   * @dict
   * @param {boolean} committed
   * @param {DataSnapshot} snapshot
   */
  function TransactionResult(committed, snapshot) {
    this.committed = committed;
    this.snapshot = snapshot;
  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users


  TransactionResult.prototype.toJSON = function () {
    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
    return {
      committed: this.committed,
      snapshot: this.snapshot.toJSON()
    };
  };

  return TransactionResult;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */


var nextPushId = function () {
  // Modeled after base64 web-safe chars, but ordered by ASCII.
  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice
  // in one ms.

  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and
  // appended to the timestamp to prevent collisions with other clients. We
  // store the last characters we generated because in the event of a collision,
  // we'll use those same characters except "incremented" by one.

  var lastRandChars = [];
  return function (now) {
    var duplicateTime = now === lastPushTime;
    lastPushTime = now;
    var i;
    var timeStampChars = new Array(8);

    for (i = 7; i >= 0; i--) {
      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose
      // the upper bits.

      now = Math.floor(now / 64);
    }

    util.assert(now === 0, 'Cannot push at time == 0');
    var id = timeStampChars.join('');

    if (!duplicateTime) {
      for (i = 0; i < 12; i++) {
        lastRandChars[i] = Math.floor(Math.random() * 64);
      }
    } else {
      // If the timestamp hasn't changed since last push, use the same random
      // number, except incremented by 1.
      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
        lastRandChars[i] = 0;
      }

      lastRandChars[i]++;
    }

    for (i = 0; i < 12; i++) {
      id += PUSH_CHARS.charAt(lastRandChars[i]);
    }

    util.assert(id.length === 20, 'nextPushId: Length should be 20.');
    return id;
  };
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @param {!string} name
 * @param {!Node} node
 * @constructor
 * @struct
 */


var NamedNode =
/** @class */
function () {
  function NamedNode(name, node) {
    this.name = name;
    this.node = node;
  }
  /**
   *
   * @param {!string} name
   * @param {!Node} node
   * @return {NamedNode}
   */


  NamedNode.Wrap = function (name, node) {
    return new NamedNode(name, node);
  };

  return NamedNode;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @constructor
 */


var Index =
/** @class */
function () {
  function Index() {}
  /**
   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
   * this index
   */


  Index.prototype.getCompare = function () {
    return this.compare.bind(this);
  };
  /**
   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
   *
   * @param {!Node} oldNode
   * @param {!Node} newNode
   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
   */


  Index.prototype.indexedValueChanged = function (oldNode, newNode) {
    var oldWrapped = new NamedNode(MIN_NAME, oldNode);
    var newWrapped = new NamedNode(MIN_NAME, newNode);
    return this.compare(oldWrapped, newWrapped) !== 0;
  };
  /**
   * @return {!NamedNode} a node wrapper that will sort equal to or less than
   * any other node wrapper, using this index
   */


  Index.prototype.minPost = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  };

  return Index;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var __EMPTY_NODE;

var KeyIndex =
/** @class */
function (_super) {
  tslib.__extends(KeyIndex, _super);

  function KeyIndex() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
    get: function () {
      return __EMPTY_NODE;
    },
    set: function (val) {
      __EMPTY_NODE = val;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * @inheritDoc
   */

  KeyIndex.prototype.compare = function (a, b) {
    return nameCompare(a.name, b.name);
  };
  /**
   * @inheritDoc
   */


  KeyIndex.prototype.isDefinedOn = function (node) {
    // We could probably return true here (since every node has a key), but it's never called
    // so just leaving unimplemented for now.
    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');
  };
  /**
   * @inheritDoc
   */


  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
    return false; // The key for a node never changes.
  };
  /**
   * @inheritDoc
   */


  KeyIndex.prototype.minPost = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  };
  /**
   * @inheritDoc
   */


  KeyIndex.prototype.maxPost = function () {
    // TODO: This should really be created once and cached in a static property, but
    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
    return new NamedNode(MAX_NAME, __EMPTY_NODE);
  };
  /**
   * @param {*} indexValue
   * @param {string} name
   * @return {!NamedNode}
   */


  KeyIndex.prototype.makePost = function (indexValue, name) {
    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.

    return new NamedNode(indexValue, __EMPTY_NODE);
  };
  /**
   * @return {!string} String representation for inclusion in a query spec
   */


  KeyIndex.prototype.toString = function () {
    return '.key';
  };

  return KeyIndex;
}(Index);

var KEY_INDEX = new KeyIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_NODE;

function setMaxNode(val) {
  MAX_NODE = val;
}
/**
 * @param {(!string|!number)} priority
 * @return {!string}
 */


var priorityHashText = function (priority) {
  if (typeof priority === 'number') {
    return 'number:' + doubleToIEEE754String(priority);
  } else {
    return 'string:' + priority;
  }
};
/**
 * Validates that a priority snapshot Node is valid.
 *
 * @param {!Node} priorityNode
 */


var validatePriorityNode = function (priorityNode) {
  if (priorityNode.isLeafNode()) {
    var val = priorityNode.val();
    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');
  } else {
    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.


  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var __childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */


var LeafNode =
/** @class */
function () {
  /**
   * @implements {Node}
   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
   *                                         The object type is possible in the event of a deferred value
   * @param {!Node=} priorityNode_ The priority of this node.
   */
  function LeafNode(value_, priorityNode_) {
    if (priorityNode_ === void 0) {
      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }

    this.value_ = value_;
    this.priorityNode_ = priorityNode_;
    this.lazyHash_ = null;
    util.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
    validatePriorityNode(this.priorityNode_);
  }

  Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
    get: function () {
      return __childrenNodeConstructor;
    },
    set: function (val) {
      __childrenNodeConstructor = val;
    },
    enumerable: false,
    configurable: true
  });
  /** @inheritDoc */

  LeafNode.prototype.isLeafNode = function () {
    return true;
  };
  /** @inheritDoc */


  LeafNode.prototype.getPriority = function () {
    return this.priorityNode_;
  };
  /** @inheritDoc */


  LeafNode.prototype.updatePriority = function (newPriorityNode) {
    return new LeafNode(this.value_, newPriorityNode);
  };
  /** @inheritDoc */


  LeafNode.prototype.getImmediateChild = function (childName) {
    // Hack to treat priority as a regular child
    if (childName === '.priority') {
      return this.priorityNode_;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
  };
  /** @inheritDoc */


  LeafNode.prototype.getChild = function (path) {
    if (path.isEmpty()) {
      return this;
    } else if (path.getFront() === '.priority') {
      return this.priorityNode_;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.hasChild = function () {
    return false;
  };
  /** @inheritDoc */


  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
    return null;
  };
  /** @inheritDoc */


  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
    if (childName === '.priority') {
      return this.updatePriority(newChildNode);
    } else if (newChildNode.isEmpty() && childName !== '.priority') {
      return this;
    } else {
      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
    }
  };
  /** @inheritDoc */


  LeafNode.prototype.updateChild = function (path, newChildNode) {
    var front = path.getFront();

    if (front === null) {
      return newChildNode;
    } else if (newChildNode.isEmpty() && front !== '.priority') {
      return this;
    } else {
      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
    }
  };
  /** @inheritDoc */


  LeafNode.prototype.isEmpty = function () {
    return false;
  };
  /** @inheritDoc */


  LeafNode.prototype.numChildren = function () {
    return 0;
  };
  /** @inheritDoc */


  LeafNode.prototype.forEachChild = function (index, action) {
    return false;
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.val = function (exportFormat) {
    if (exportFormat && !this.getPriority().isEmpty()) {
      return {
        '.value': this.getValue(),
        '.priority': this.getPriority().val()
      };
    } else {
      return this.getValue();
    }
  };
  /** @inheritDoc */


  LeafNode.prototype.hash = function () {
    if (this.lazyHash_ === null) {
      var toHash = '';

      if (!this.priorityNode_.isEmpty()) {
        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';
      }

      var type = typeof this.value_;
      toHash += type + ':';

      if (type === 'number') {
        toHash += doubleToIEEE754String(this.value_);
      } else {
        toHash += this.value_;
      }

      this.lazyHash_ = sha1(toHash);
    }

    return this.lazyHash_;
  };
  /**
   * Returns the value of the leaf node.
   * @return {Object|string|number|boolean} The value of the node.
   */


  LeafNode.prototype.getValue = function () {
    return this.value_;
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.compareTo = function (other) {
    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
      return 1;
    } else if (other instanceof LeafNode.__childrenNodeConstructor) {
      return -1;
    } else {
      util.assert(other.isLeafNode(), 'Unknown node type');
      return this.compareToLeafNode_(other);
    }
  };
  /**
   * Comparison specifically for two leaf nodes
   * @param {!LeafNode} otherLeaf
   * @return {!number}
   * @private
   */


  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
    var otherLeafType = typeof otherLeaf.value_;
    var thisLeafType = typeof this.value_;
    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);

    if (otherIndex === thisIndex) {
      // Same type, compare values
      if (thisLeafType === 'object') {
        // Deferred value nodes are all equal, but we should also never get to this point...
        return 0;
      } else {
        // Note that this works because true > false, all others are number or string comparisons
        if (this.value_ < otherLeaf.value_) {
          return -1;
        } else if (this.value_ === otherLeaf.value_) {
          return 0;
        } else {
          return 1;
        }
      }
    } else {
      return thisIndex - otherIndex;
    }
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.withIndex = function () {
    return this;
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.isIndexed = function () {
    return true;
  };
  /**
   * @inheritDoc
   */


  LeafNode.prototype.equals = function (other) {
    /**
     * @inheritDoc
     */
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      var otherLeaf = other;
      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
    } else {
      return false;
    }
  };
  /**
   * The sort order for comparing leaf nodes of different types. If two leaf nodes have
   * the same type, the comparison falls back to their value
   * @type {Array.<!string>}
   * @const
   */


  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
  return LeafNode;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var nodeFromJSON;
var MAX_NODE$1;

function setNodeFromJSON(val) {
  nodeFromJSON = val;
}

function setMaxNode$1(val) {
  MAX_NODE$1 = val;
}
/**
 * @constructor
 * @extends {Index}
 * @private
 */


var PriorityIndex =
/** @class */
function (_super) {
  tslib.__extends(PriorityIndex, _super);

  function PriorityIndex() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * @inheritDoc
   */


  PriorityIndex.prototype.compare = function (a, b) {
    var aPriority = a.node.getPriority();
    var bPriority = b.node.getPriority();
    var indexCmp = aPriority.compareTo(bPriority);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  /**
   * @inheritDoc
   */


  PriorityIndex.prototype.isDefinedOn = function (node) {
    return !node.getPriority().isEmpty();
  };
  /**
   * @inheritDoc
   */


  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
    return !oldNode.getPriority().equals(newNode.getPriority());
  };
  /**
   * @inheritDoc
   */


  PriorityIndex.prototype.minPost = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  };
  /**
   * @inheritDoc
   */


  PriorityIndex.prototype.maxPost = function () {
    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
  };
  /**
   * @param {*} indexValue
   * @param {string} name
   * @return {!NamedNode}
   */


  PriorityIndex.prototype.makePost = function (indexValue, name) {
    var priorityNode = nodeFromJSON(indexValue);
    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
  };
  /**
   * @return {!string} String representation for inclusion in a query spec
   */


  PriorityIndex.prototype.toString = function () {
    return '.priority';
  };

  return PriorityIndex;
}(Index);

var PRIORITY_INDEX = new PriorityIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An iterator over an LLRBNode.
 */

var SortedMapIterator =
/** @class */
function () {
  /**
   * @template K, V, T
   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
   * @param {?K} startKey
   * @param {function(K, K): number} comparator
   * @param {boolean} isReverse_ Whether or not to iterate in reverse
   * @param {(function(K, V):T)=} resultGenerator_
   */
  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
    if (resultGenerator_ === void 0) {
      resultGenerator_ = null;
    }

    this.isReverse_ = isReverse_;
    this.resultGenerator_ = resultGenerator_;
    /** @private
     * @type {Array.<!LLRBNode>}
     */

    this.nodeStack_ = [];
    var cmp = 1;

    while (!node.isEmpty()) {
      node = node;
      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse

      if (isReverse_) {
        cmp *= -1;
      }

      if (cmp < 0) {
        // This node is less than our start key. ignore it
        if (this.isReverse_) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
        this.nodeStack_.push(node);
        break;
      } else {
        // This node is greater than our start key, add it to the stack and move to the next one
        this.nodeStack_.push(node);

        if (this.isReverse_) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }

  SortedMapIterator.prototype.getNext = function () {
    if (this.nodeStack_.length === 0) {
      return null;
    }

    var node = this.nodeStack_.pop();
    var result;

    if (this.resultGenerator_) {
      result = this.resultGenerator_(node.key, node.value);
    } else {
      result = {
        key: node.key,
        value: node.value
      };
    }

    if (this.isReverse_) {
      node = node.left;

      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.right;
      }
    } else {
      node = node.right;

      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.left;
      }
    }

    return result;
  };

  SortedMapIterator.prototype.hasNext = function () {
    return this.nodeStack_.length > 0;
  };

  SortedMapIterator.prototype.peek = function () {
    if (this.nodeStack_.length === 0) {
      return null;
    }

    var node = this.nodeStack_[this.nodeStack_.length - 1];

    if (this.resultGenerator_) {
      return this.resultGenerator_(node.key, node.value);
    } else {
      return {
        key: node.key,
        value: node.value
      };
    }
  };

  return SortedMapIterator;
}();
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */


var LLRBNode =
/** @class */
function () {
  /**
   * @template K, V
   * @param {!K} key Key associated with this node.
   * @param {!V} value Value associated with this node.
   * @param {?boolean} color Whether this node is red.
   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
   */
  function LLRBNode(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode.RED;
    this.left = left != null ? left : SortedMap.EMPTY_NODE;
    this.right = right != null ? right : SortedMap.EMPTY_NODE;
  }
  /**
   * Returns a copy of the current node, optionally replacing pieces of it.
   *
   * @param {?K} key New key for the node, or null.
   * @param {?V} value New value for the node, or null.
   * @param {?boolean} color New color for the node, or null.
   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
   * @return {!LLRBNode} The node copy.
   */


  LLRBNode.prototype.copy = function (key, value, color, left, right) {
    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  };
  /**
   * @return {number} The total number of nodes in the tree.
   */


  LLRBNode.prototype.count = function () {
    return this.left.count() + 1 + this.right.count();
  };
  /**
   * @return {boolean} True if the tree is empty.
   */


  LLRBNode.prototype.isEmpty = function () {
    return false;
  };
  /**
   * Traverses the tree in key order and calls the specified action function
   * for each node.
   *
   * @param {function(!K, !V):*} action Callback function to be called for each
   *   node.  If it returns true, traversal is aborted.
   * @return {*} The first truthy value returned by action, or the last falsey
   *   value returned by action
   */


  LLRBNode.prototype.inorderTraversal = function (action) {
    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
  };
  /**
   * Traverses the tree in reverse key order and calls the specified action function
   * for each node.
   *
   * @param {function(!Object, !Object)} action Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @return {*} True if traversal was aborted.
   */


  LLRBNode.prototype.reverseTraversal = function (action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  };
  /**
   * @return {!Object} The minimum node in the tree.
   * @private
   */


  LLRBNode.prototype.min_ = function () {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min_();
    }
  };
  /**
   * @return {!K} The maximum key in the tree.
   */


  LLRBNode.prototype.minKey = function () {
    return this.min_().key;
  };
  /**
   * @return {!K} The maximum key in the tree.
   */


  LLRBNode.prototype.maxKey = function () {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  };
  /**
   *
   * @param {!Object} key Key to insert.
   * @param {!Object} value Value to insert.
   * @param {Comparator} comparator Comparator.
   * @return {!LLRBNode} New tree, with the key/value added.
   */


  LLRBNode.prototype.insert = function (key, value, comparator) {
    var n = this;
    var cmp = comparator(key, n.key);

    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }

    return n.fixUp_();
  };
  /**
   * @private
   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
   */


  LLRBNode.prototype.removeMin_ = function () {
    if (this.left.isEmpty()) {
      return SortedMap.EMPTY_NODE;
    }

    var n = this;

    if (!n.left.isRed_() && !n.left.left.isRed_()) {
      n = n.moveRedLeft_();
    }

    n = n.copy(null, null, null, n.left.removeMin_(), null);
    return n.fixUp_();
  };
  /**
   * @param {!Object} key The key of the item to remove.
   * @param {Comparator} comparator Comparator.
   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
   */


  LLRBNode.prototype.remove = function (key, comparator) {
    var n, smallest;
    n = this;

    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
        n = n.moveRedLeft_();
      }

      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed_()) {
        n = n.rotateRight_();
      }

      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
        n = n.moveRedRight_();
      }

      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return SortedMap.EMPTY_NODE;
        } else {
          smallest = n.right.min_();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
        }
      }

      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }

    return n.fixUp_();
  };
  /**
   * @private
   * @return {boolean} Whether this is a RED node.
   */


  LLRBNode.prototype.isRed_ = function () {
    return this.color;
  };
  /**
   * @private
   * @return {!LLRBNode} New tree after performing any needed rotations.
   */


  LLRBNode.prototype.fixUp_ = function () {
    var n = this;

    if (n.right.isRed_() && !n.left.isRed_()) {
      n = n.rotateLeft_();
    }

    if (n.left.isRed_() && n.left.left.isRed_()) {
      n = n.rotateRight_();
    }

    if (n.left.isRed_() && n.right.isRed_()) {
      n = n.colorFlip_();
    }

    return n;
  };
  /**
   * @private
   * @return {!LLRBNode} New tree, after moveRedLeft.
   */


  LLRBNode.prototype.moveRedLeft_ = function () {
    var n = this.colorFlip_();

    if (n.right.left.isRed_()) {
      n = n.copy(null, null, null, null, n.right.rotateRight_());
      n = n.rotateLeft_();
      n = n.colorFlip_();
    }

    return n;
  };
  /**
   * @private
   * @return {!LLRBNode} New tree, after moveRedRight.
   */


  LLRBNode.prototype.moveRedRight_ = function () {
    var n = this.colorFlip_();

    if (n.left.left.isRed_()) {
      n = n.rotateRight_();
      n = n.colorFlip_();
    }

    return n;
  };
  /**
   * @private
   * @return {!LLRBNode} New tree, after rotateLeft.
   */


  LLRBNode.prototype.rotateLeft_ = function () {
    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  };
  /**
   * @private
   * @return {!LLRBNode} New tree, after rotateRight.
   */


  LLRBNode.prototype.rotateRight_ = function () {
    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr);
  };
  /**
   * @private
   * @return {!LLRBNode} New tree, after colorFlip.
   */


  LLRBNode.prototype.colorFlip_ = function () {
    var left = this.left.copy(null, null, !this.left.color, null, null);
    var right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  };
  /**
   * For testing.
   *
   * @private
   * @return {boolean} True if all is well.
   */


  LLRBNode.prototype.checkMaxDepth_ = function () {
    var blackDepth = this.check_();
    return Math.pow(2.0, blackDepth) <= this.count() + 1;
  };
  /**
   * @private
   * @return {number} Not sure what this returns exactly. :-).
   */


  LLRBNode.prototype.check_ = function () {
    if (this.isRed_() && this.left.isRed_()) {
      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
    }

    if (this.right.isRed_()) {
      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
    }

    var blackDepth = this.left.check_();

    if (blackDepth !== this.right.check_()) {
      throw new Error('Black depths differ');
    } else {
      return blackDepth + (this.isRed_() ? 0 : 1);
    }
  };

  LLRBNode.RED = true;
  LLRBNode.BLACK = false;
  return LLRBNode;
}();
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */


var LLRBEmptyNode =
/** @class */
function () {
  function LLRBEmptyNode() {}
  /**
   * Returns a copy of the current node.
   *
   * @return {!LLRBEmptyNode} The node copy.
   */


  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
    return this;
  };
  /**
   * Returns a copy of the tree, with the specified key/value added.
   *
   * @param {!K} key Key to be added.
   * @param {!V} value Value to be added.
   * @param {Comparator} comparator Comparator.
   * @return {!LLRBNode} New tree, with item added.
   */


  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
    return new LLRBNode(key, value, null);
  };
  /**
   * Returns a copy of the tree, with the specified key removed.
   *
   * @param {!K} key The key to remove.
   * @param {Comparator} comparator Comparator.
   * @return {!LLRBEmptyNode} New tree, with item removed.
   */


  LLRBEmptyNode.prototype.remove = function (key, comparator) {
    return this;
  };
  /**
   * @return {number} The total number of nodes in the tree.
   */


  LLRBEmptyNode.prototype.count = function () {
    return 0;
  };
  /**
   * @return {boolean} True if the tree is empty.
   */


  LLRBEmptyNode.prototype.isEmpty = function () {
    return true;
  };
  /**
   * Traverses the tree in key order and calls the specified action function
   * for each node.
   *
   * @param {function(!K, !V):*} action Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @return {boolean} True if traversal was aborted.
   */


  LLRBEmptyNode.prototype.inorderTraversal = function (action) {
    return false;
  };
  /**
   * Traverses the tree in reverse key order and calls the specified action function
   * for each node.
   *
   * @param {function(!K, !V)} action Callback function to be called for each
   * node.  If it returns true, traversal is aborted.
   * @return {boolean} True if traversal was aborted.
   */


  LLRBEmptyNode.prototype.reverseTraversal = function (action) {
    return false;
  };
  /**
   * @return {null}
   */


  LLRBEmptyNode.prototype.minKey = function () {
    return null;
  };
  /**
   * @return {null}
   */


  LLRBEmptyNode.prototype.maxKey = function () {
    return null;
  };
  /**
   * @private
   * @return {number} Not sure what this returns exactly. :-).
   */


  LLRBEmptyNode.prototype.check_ = function () {
    return 0;
  };
  /**
   * @private
   * @return {boolean} Whether this node is red.
   */


  LLRBEmptyNode.prototype.isRed_ = function () {
    return false;
  };

  return LLRBEmptyNode;
}();
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */


var SortedMap =
/** @class */
function () {
  /**
   * @template K, V
   * @param {function(K, K):number} comparator_ Key comparator.
   * @param {LLRBNode=} root_ (Optional) Root node for the map.
   */
  function SortedMap(comparator_, root_) {
    if (root_ === void 0) {
      root_ = SortedMap.EMPTY_NODE;
    }

    this.comparator_ = comparator_;
    this.root_ = root_;
  }
  /**
   * Returns a copy of the map, with the specified key/value added or replaced.
   * (TODO: We should perhaps rename this method to 'put')
   *
   * @param {!K} key Key to be added.
   * @param {!V} value Value to be added.
   * @return {!SortedMap.<K, V>} New map, with item added.
   */


  SortedMap.prototype.insert = function (key, value) {
    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  };
  /**
   * Returns a copy of the map, with the specified key removed.
   *
   * @param {!K} key The key to remove.
   * @return {!SortedMap.<K, V>} New map, with item removed.
   */


  SortedMap.prototype.remove = function (key) {
    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  };
  /**
   * Returns the value of the node with the given key, or null.
   *
   * @param {!K} key The key to look up.
   * @return {?V} The value of the node with the given key, or null if the
   * key doesn't exist.
   */


  SortedMap.prototype.get = function (key) {
    var cmp;
    var node = this.root_;

    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);

      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }

    return null;
  };
  /**
   * Returns the key of the item *before* the specified key, or null if key is the first item.
   * @param {K} key The key to find the predecessor of
   * @return {?K} The predecessor key.
   */


  SortedMap.prototype.getPredecessorKey = function (key) {
    var cmp,
        node = this.root_,
        rightParent = null;

    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);

      if (cmp === 0) {
        if (!node.left.isEmpty()) {
          node = node.left;

          while (!node.right.isEmpty()) {
            node = node.right;
          }

          return node.key;
        } else if (rightParent) {
          return rightParent.key;
        } else {
          return null; // first item.
        }
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        rightParent = node;
        node = node.right;
      }
    }

    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
  };
  /**
   * @return {boolean} True if the map is empty.
   */


  SortedMap.prototype.isEmpty = function () {
    return this.root_.isEmpty();
  };
  /**
   * @return {number} The total number of nodes in the map.
   */


  SortedMap.prototype.count = function () {
    return this.root_.count();
  };
  /**
   * @return {?K} The minimum key in the map.
   */


  SortedMap.prototype.minKey = function () {
    return this.root_.minKey();
  };
  /**
   * @return {?K} The maximum key in the map.
   */


  SortedMap.prototype.maxKey = function () {
    return this.root_.maxKey();
  };
  /**
   * Traverses the map in key order and calls the specified action function
   * for each key/value pair.
   *
   * @param {function(!K, !V):*} action Callback function to be called
   * for each key/value pair.  If action returns true, traversal is aborted.
   * @return {*} The first truthy value returned by action, or the last falsey
   *   value returned by action
   */


  SortedMap.prototype.inorderTraversal = function (action) {
    return this.root_.inorderTraversal(action);
  };
  /**
   * Traverses the map in reverse key order and calls the specified action function
   * for each key/value pair.
   *
   * @param {function(!Object, !Object)} action Callback function to be called
   * for each key/value pair.  If action returns true, traversal is aborted.
   * @return {*} True if the traversal was aborted.
   */


  SortedMap.prototype.reverseTraversal = function (action) {
    return this.root_.reverseTraversal(action);
  };
  /**
   * Returns an iterator over the SortedMap.
   * @template T
   * @param {(function(K, V):T)=} resultGenerator
   * @return {SortedMapIterator.<K, V, T>} The iterator.
   */


  SortedMap.prototype.getIterator = function (resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
  };

  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
  };

  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
  };

  SortedMap.prototype.getReverseIterator = function (resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
  };
  /**
   * Always use the same empty node, to reduce memory.
   * @const
   */


  SortedMap.EMPTY_NODE = new LLRBEmptyNode();
  return SortedMap;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_2 = Math.log(2);
/**
 * @constructor
 */

var Base12Num =
/** @class */
function () {
  /**
   * @param {number} length
   */
  function Base12Num(length) {
    var logBase2 = function (num) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return parseInt(Math.log(num) / LOG_2, 10);
    };

    var bitMask = function (bits) {
      return parseInt(Array(bits + 1).join('1'), 2);
    };

    this.count = logBase2(length + 1);
    this.current_ = this.count - 1;
    var mask = bitMask(this.count);
    this.bits_ = length + 1 & mask;
  }
  /**
   * @return {boolean}
   */


  Base12Num.prototype.nextBitIsOne = function () {
    //noinspection JSBitwiseOperatorUsage
    var result = !(this.bits_ & 0x1 << this.current_);
    this.current_--;
    return result;
  };

  return Base12Num;
}();
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @template K, V
 * @param {Array.<!NamedNode>} childList Unsorted list of children
 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
 *                                                        type is not NamedNode
 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
 * @return {SortedMap.<K, V>}
 */


var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
  childList.sort(cmp);

  var buildBalancedTree = function (low, high) {
    var length = high - low;
    var namedNode;
    var key;

    if (length === 0) {
      return null;
    } else if (length === 1) {
      namedNode = childList[low];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
    } else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var middle = parseInt(length / 2, 10) + low;
      var left = buildBalancedTree(low, middle);
      var right = buildBalancedTree(middle + 1, high);
      namedNode = childList[middle];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
    }
  };

  var buildFrom12Array = function (base12) {
    var node = null;
    var root = null;
    var index = childList.length;

    var buildPennant = function (chunkSize, color) {
      var low = index - chunkSize;
      var high = index;
      index -= chunkSize;
      var childTree = buildBalancedTree(low + 1, high);
      var namedNode = childList[low];
      var key = keyFn ? keyFn(namedNode) : namedNode;
      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
    };

    var attachPennant = function (pennant) {
      if (node) {
        node.left = pennant;
        node = pennant;
      } else {
        root = pennant;
        node = pennant;
      }
    };

    for (var i = 0; i < base12.count; ++i) {
      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))

      var chunkSize = Math.pow(2, base12.count - (i + 1));

      if (isOne) {
        buildPennant(chunkSize, LLRBNode.BLACK);
      } else {
        // current == 2
        buildPennant(chunkSize, LLRBNode.BLACK);
        buildPennant(chunkSize, LLRBNode.RED);
      }
    }

    return root;
  };

  var base12 = new Base12Num(childList.length);
  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return new SortedMap(mapSortFn || cmp, root);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var _defaultIndexMap;

var fallbackObject = {};

var IndexMap =
/** @class */
function () {
  function IndexMap(indexes_, indexSet_) {
    this.indexes_ = indexes_;
    this.indexSet_ = indexSet_;
  }

  Object.defineProperty(IndexMap, "Default", {
    /**
     * The default IndexMap for nodes without a priority
     */
    get: function () {
      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
      _defaultIndexMap = _defaultIndexMap || new IndexMap({
        '.priority': fallbackObject
      }, {
        '.priority': PRIORITY_INDEX
      });
      return _defaultIndexMap;
    },
    enumerable: false,
    configurable: true
  });

  IndexMap.prototype.get = function (indexKey) {
    var sortedMap = util.safeGet(this.indexes_, indexKey);

    if (!sortedMap) {
      throw new Error('No index defined for ' + indexKey);
    }

    if (sortedMap instanceof SortedMap) {
      return sortedMap;
    } else {
      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
      // regular child map
      return null;
    }
  };

  IndexMap.prototype.hasIndex = function (indexDefinition) {
    return util.contains(this.indexSet_, indexDefinition.toString());
  };

  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
    util.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
    var childList = [];
    var sawIndexedValue = false;
    var iter = existingChildren.getIterator(NamedNode.Wrap);
    var next = iter.getNext();

    while (next) {
      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
      childList.push(next);
      next = iter.getNext();
    }

    var newIndex;

    if (sawIndexedValue) {
      newIndex = buildChildSet(childList, indexDefinition.getCompare());
    } else {
      newIndex = fallbackObject;
    }

    var indexName = indexDefinition.toString();

    var newIndexSet = tslib.__assign({}, this.indexSet_);

    newIndexSet[indexName] = indexDefinition;

    var newIndexes = tslib.__assign({}, this.indexes_);

    newIndexes[indexName] = newIndex;
    return new IndexMap(newIndexes, newIndexSet);
  };
  /**
   * Ensure that this node is properly tracked in any indexes that we're maintaining
   */


  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
    var _this = this;

    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {
      var index = util.safeGet(_this.indexSet_, indexName);
      util.assert(index, 'Missing index implementation for ' + indexName);

      if (indexedChildren === fallbackObject) {
        // Check to see if we need to index everything
        if (index.isDefinedOn(namedNode.node)) {
          // We need to build this index
          var childList = [];
          var iter = existingChildren.getIterator(NamedNode.Wrap);
          var next = iter.getNext();

          while (next) {
            if (next.name !== namedNode.name) {
              childList.push(next);
            }

            next = iter.getNext();
          }

          childList.push(namedNode);
          return buildChildSet(childList, index.getCompare());
        } else {
          // No change, this remains a fallback
          return fallbackObject;
        }
      } else {
        var existingSnap = existingChildren.get(namedNode.name);
        var newChildren = indexedChildren;

        if (existingSnap) {
          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
        }

        return newChildren.insert(namedNode, namedNode.node);
      }
    });
    return new IndexMap(newIndexes, this.indexSet_);
  };
  /**
   * Create a new IndexMap instance with the given value removed
   */


  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
    var newIndexes = util.map(this.indexes_, function (indexedChildren) {
      if (indexedChildren === fallbackObject) {
        // This is the fallback. Just return it, nothing to do in this case
        return indexedChildren;
      } else {
        var existingSnap = existingChildren.get(namedNode.name);

        if (existingSnap) {
          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
        } else {
          // No record of this child
          return indexedChildren;
        }
      }
    });
    return new IndexMap(newIndexes, this.indexSet_);
  };

  return IndexMap;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function NAME_ONLY_COMPARATOR(left, right) {
  return nameCompare(left.name, right.name);
}

function NAME_COMPARATOR(left, right) {
  return nameCompare(left, right);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: For memory savings, don't store priorityNode_ if it's empty.


var EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 *
 * @constructor
 * @implements {Node}
 */

var ChildrenNode =
/** @class */
function () {
  /**
   *
   * @param {!SortedMap.<string, !Node>} children_ List of children
   * of this node..
   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
   * @param {!IndexMap} indexMap_
   */
  function ChildrenNode(children_, priorityNode_, indexMap_) {
    this.children_ = children_;
    this.priorityNode_ = priorityNode_;
    this.indexMap_ = indexMap_;
    this.lazyHash_ = null;
    /**
     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
     * class instead of an empty ChildrenNode.
     */

    if (this.priorityNode_) {
      validatePriorityNode(this.priorityNode_);
    }

    if (this.children_.isEmpty()) {
      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
    }
  }

  Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
    get: function () {
      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
    },
    enumerable: false,
    configurable: true
  });
  /** @inheritDoc */

  ChildrenNode.prototype.isLeafNode = function () {
    return false;
  };
  /** @inheritDoc */


  ChildrenNode.prototype.getPriority = function () {
    return this.priorityNode_ || EMPTY_NODE;
  };
  /** @inheritDoc */


  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
    if (this.children_.isEmpty()) {
      // Don't allow priorities on empty nodes
      return this;
    } else {
      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
    }
  };
  /** @inheritDoc */


  ChildrenNode.prototype.getImmediateChild = function (childName) {
    // Hack to treat priority as a regular child
    if (childName === '.priority') {
      return this.getPriority();
    } else {
      var child = this.children_.get(childName);
      return child === null ? EMPTY_NODE : child;
    }
  };
  /** @inheritDoc */


  ChildrenNode.prototype.getChild = function (path) {
    var front = path.getFront();

    if (front === null) {
      return this;
    }

    return this.getImmediateChild(front).getChild(path.popFront());
  };
  /** @inheritDoc */


  ChildrenNode.prototype.hasChild = function (childName) {
    return this.children_.get(childName) !== null;
  };
  /** @inheritDoc */


  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
    util.assert(newChildNode, 'We should always be passing snapshot nodes');

    if (childName === '.priority') {
      return this.updatePriority(newChildNode);
    } else {
      var namedNode = new NamedNode(childName, newChildNode);
      var newChildren = void 0,
          newIndexMap = void 0;

      if (newChildNode.isEmpty()) {
        newChildren = this.children_.remove(childName);
        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
      } else {
        newChildren = this.children_.insert(childName, newChildNode);
        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
      }

      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
      return new ChildrenNode(newChildren, newPriority, newIndexMap);
    }
  };
  /** @inheritDoc */


  ChildrenNode.prototype.updateChild = function (path, newChildNode) {
    var front = path.getFront();

    if (front === null) {
      return newChildNode;
    } else {
      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
      return this.updateImmediateChild(front, newImmediateChild);
    }
  };
  /** @inheritDoc */


  ChildrenNode.prototype.isEmpty = function () {
    return this.children_.isEmpty();
  };
  /** @inheritDoc */


  ChildrenNode.prototype.numChildren = function () {
    return this.children_.count();
  };
  /** @inheritDoc */


  ChildrenNode.prototype.val = function (exportFormat) {
    if (this.isEmpty()) {
      return null;
    }

    var obj = {};
    var numKeys = 0,
        maxKey = 0,
        allIntegerKeys = true;
    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
      obj[key] = childNode.val(exportFormat);
      numKeys++;

      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
        maxKey = Math.max(maxKey, Number(key));
      } else {
        allIntegerKeys = false;
      }
    });

    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
      // convert to array.
      var array = []; // eslint-disable-next-line guard-for-in

      for (var key in obj) {
        array[key] = obj[key];
      }

      return array;
    } else {
      if (exportFormat && !this.getPriority().isEmpty()) {
        obj['.priority'] = this.getPriority().val();
      }

      return obj;
    }
  };
  /** @inheritDoc */


  ChildrenNode.prototype.hash = function () {
    if (this.lazyHash_ === null) {
      var toHash_1 = '';

      if (!this.getPriority().isEmpty()) {
        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';
      }

      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
        var childHash = childNode.hash();

        if (childHash !== '') {
          toHash_1 += ':' + key + ':' + childHash;
        }
      });
      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
    }

    return this.lazyHash_;
  };
  /** @inheritDoc */


  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
    var idx = this.resolveIndex_(index);

    if (idx) {
      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
      return predecessor ? predecessor.name : null;
    } else {
      return this.children_.getPredecessorKey(childName);
    }
  };
  /**
   * @param {!Index} indexDefinition
   * @return {?string}
   */


  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      var minKey = idx.minKey();
      return minKey && minKey.name;
    } else {
      return this.children_.minKey();
    }
  };
  /**
   * @param {!Index} indexDefinition
   * @return {?NamedNode}
   */


  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
    var minKey = this.getFirstChildName(indexDefinition);

    if (minKey) {
      return new NamedNode(minKey, this.children_.get(minKey));
    } else {
      return null;
    }
  };
  /**
   * Given an index, return the key name of the largest value we have, according to that index
   * @param {!Index} indexDefinition
   * @return {?string}
   */


  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      var maxKey = idx.maxKey();
      return maxKey && maxKey.name;
    } else {
      return this.children_.maxKey();
    }
  };
  /**
   * @param {!Index} indexDefinition
   * @return {?NamedNode}
   */


  ChildrenNode.prototype.getLastChild = function (indexDefinition) {
    var maxKey = this.getLastChildName(indexDefinition);

    if (maxKey) {
      return new NamedNode(maxKey, this.children_.get(maxKey));
    } else {
      return null;
    }
  };
  /**
   * @inheritDoc
   */


  ChildrenNode.prototype.forEachChild = function (index, action) {
    var idx = this.resolveIndex_(index);

    if (idx) {
      return idx.inorderTraversal(function (wrappedNode) {
        return action(wrappedNode.name, wrappedNode.node);
      });
    } else {
      return this.children_.inorderTraversal(action);
    }
  };
  /**
   * @param {!Index} indexDefinition
   * @return {SortedMapIterator}
   */


  ChildrenNode.prototype.getIterator = function (indexDefinition) {
    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
  };
  /**
   *
   * @param {!NamedNode} startPost
   * @param {!Index} indexDefinition
   * @return {!SortedMapIterator}
   */


  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      return idx.getIteratorFrom(startPost, function (key) {
        return key;
      });
    } else {
      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
      var next = iterator.peek();

      while (next != null && indexDefinition.compare(next, startPost) < 0) {
        iterator.getNext();
        next = iterator.peek();
      }

      return iterator;
    }
  };
  /**
   * @param {!Index} indexDefinition
   * @return {!SortedMapIterator}
   */


  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
  };
  /**
   * @param {!NamedNode} endPost
   * @param {!Index} indexDefinition
   * @return {!SortedMapIterator}
   */


  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);

    if (idx) {
      return idx.getReverseIteratorFrom(endPost, function (key) {
        return key;
      });
    } else {
      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
      var next = iterator.peek();

      while (next != null && indexDefinition.compare(next, endPost) > 0) {
        iterator.getNext();
        next = iterator.peek();
      }

      return iterator;
    }
  };
  /**
   * @inheritDoc
   */


  ChildrenNode.prototype.compareTo = function (other) {
    if (this.isEmpty()) {
      if (other.isEmpty()) {
        return 0;
      } else {
        return -1;
      }
    } else if (other.isLeafNode() || other.isEmpty()) {
      return 1;
    } else if (other === MAX_NODE$2) {
      return -1;
    } else {
      // Must be another node with children.
      return 0;
    }
  };
  /**
   * @inheritDoc
   */


  ChildrenNode.prototype.withIndex = function (indexDefinition) {
    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
      return this;
    } else {
      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
    }
  };
  /**
   * @inheritDoc
   */


  ChildrenNode.prototype.isIndexed = function (index) {
    return index === KEY_INDEX || this.indexMap_.hasIndex(index);
  };
  /**
   * @inheritDoc
   */


  ChildrenNode.prototype.equals = function (other) {
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      return false;
    } else {
      var otherChildrenNode = other;

      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
        return false;
      } else if (this.children_.count() === otherChildrenNode.children_.count()) {
        var thisIter = this.getIterator(PRIORITY_INDEX);
        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
        var thisCurrent = thisIter.getNext();
        var otherCurrent = otherIter.getNext();

        while (thisCurrent && otherCurrent) {
          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
            return false;
          }

          thisCurrent = thisIter.getNext();
          otherCurrent = otherIter.getNext();
        }

        return thisCurrent === null && otherCurrent === null;
      } else {
        return false;
      }
    }
  };
  /**
   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
   * instead.
   *
   * @private
   * @param {!Index} indexDefinition
   * @return {?SortedMap.<NamedNode, Node>}
   */


  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
    if (indexDefinition === KEY_INDEX) {
      return null;
    } else {
      return this.indexMap_.get(indexDefinition.toString());
    }
  };
  /**
   * @private
   * @type {RegExp}
   */


  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
  return ChildrenNode;
}();
/**
 * @constructor
 * @extends {ChildrenNode}
 * @private
 */


var MaxNode =
/** @class */
function (_super) {
  tslib.__extends(MaxNode, _super);

  function MaxNode() {
    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
  }

  MaxNode.prototype.compareTo = function (other) {
    if (other === this) {
      return 0;
    } else {
      return 1;
    }
  };

  MaxNode.prototype.equals = function (other) {
    // Not that we every compare it, but MAX_NODE is only ever equal to itself
    return other === this;
  };

  MaxNode.prototype.getPriority = function () {
    return this;
  };

  MaxNode.prototype.getImmediateChild = function (childName) {
    return ChildrenNode.EMPTY_NODE;
  };

  MaxNode.prototype.isEmpty = function () {
    return false;
  };

  return MaxNode;
}(ChildrenNode);
/**
 * Marker that will sort higher than any other snapshot.
 * @type {!MAX_NODE}
 * @const
 */


var MAX_NODE$2 = new MaxNode();
Object.defineProperties(NamedNode, {
  MIN: {
    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
  },
  MAX: {
    value: new NamedNode(MAX_NAME, MAX_NODE$2)
  }
});
/**
 * Reference Extensions
 */

KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode.__childrenNodeConstructor = ChildrenNode;
setMaxNode(MAX_NODE$2);
setMaxNode$1(MAX_NODE$2);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param {*} json JSON to create a node for.
 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return {!Node}
 */

function nodeFromJSON$1(json, priority) {
  if (priority === void 0) {
    priority = null;
  }

  if (json === null) {
    return ChildrenNode.EMPTY_NODE;
  }

  if (typeof json === 'object' && '.priority' in json) {
    priority = json['.priority'];
  }

  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);

  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
    json = json['.value'];
  } // Valid leaf nodes include non-objects or server-value wrapper objects


  if (typeof json !== 'object' || '.sv' in json) {
    var jsonLeaf = json;
    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
  }

  if (!(json instanceof Array) && USE_HINZE) {
    var children_1 = [];
    var childrenHavePriority_1 = false;
    var hinzeJsonObj = json;
    each(hinzeJsonObj, function (key, child) {
      if (key.substring(0, 1) !== '.') {
        // Ignore metadata nodes
        var childNode = nodeFromJSON$1(child);

        if (!childNode.isEmpty()) {
          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
          children_1.push(new NamedNode(key, childNode));
        }
      }
    });

    if (children_1.length === 0) {
      return ChildrenNode.EMPTY_NODE;
    }

    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {
      return namedNode.name;
    }, NAME_COMPARATOR);

    if (childrenHavePriority_1) {
      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({
        '.priority': sortedChildSet
      }, {
        '.priority': PRIORITY_INDEX
      }));
    } else {
      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
    }
  } else {
    var node_1 = ChildrenNode.EMPTY_NODE;
    each(json, function (key, childData) {
      if (util.contains(json, key)) {
        if (key.substring(0, 1) !== '.') {
          // ignore metadata nodes.
          var childNode = nodeFromJSON$1(childData);

          if (childNode.isLeafNode() || !childNode.isEmpty()) {
            node_1 = node_1.updateImmediateChild(key, childNode);
          }
        }
      }
    });
    return node_1.updatePriority(nodeFromJSON$1(priority));
  }
}

setNodeFromJSON(nodeFromJSON$1);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @constructor
 * @extends {Index}
 * @private
 */

var ValueIndex =
/** @class */
function (_super) {
  tslib.__extends(ValueIndex, _super);

  function ValueIndex() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * @inheritDoc
   */


  ValueIndex.prototype.compare = function (a, b) {
    var indexCmp = a.node.compareTo(b.node);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  /**
   * @inheritDoc
   */


  ValueIndex.prototype.isDefinedOn = function (node) {
    return true;
  };
  /**
   * @inheritDoc
   */


  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
    return !oldNode.equals(newNode);
  };
  /**
   * @inheritDoc
   */


  ValueIndex.prototype.minPost = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MIN;
  };
  /**
   * @inheritDoc
   */


  ValueIndex.prototype.maxPost = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return NamedNode.MAX;
  };
  /**
   * @param {*} indexValue
   * @param {string} name
   * @return {!NamedNode}
   */


  ValueIndex.prototype.makePost = function (indexValue, name) {
    var valueNode = nodeFromJSON$1(indexValue);
    return new NamedNode(name, valueNode);
  };
  /**
   * @return {!string} String representation for inclusion in a query spec
   */


  ValueIndex.prototype.toString = function () {
    return '.value';
  };

  return ValueIndex;
}(Index);

var VALUE_INDEX = new ValueIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {!Path} indexPath
 * @constructor
 * @extends {Index}
 */

var PathIndex =
/** @class */
function (_super) {
  tslib.__extends(PathIndex, _super);

  function PathIndex(indexPath_) {
    var _this = _super.call(this) || this;

    _this.indexPath_ = indexPath_;
    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
    return _this;
  }
  /**
   * @param {!Node} snap
   * @return {!Node}
   * @protected
   */


  PathIndex.prototype.extractChild = function (snap) {
    return snap.getChild(this.indexPath_);
  };
  /**
   * @inheritDoc
   */


  PathIndex.prototype.isDefinedOn = function (node) {
    return !node.getChild(this.indexPath_).isEmpty();
  };
  /**
   * @inheritDoc
   */


  PathIndex.prototype.compare = function (a, b) {
    var aChild = this.extractChild(a.node);
    var bChild = this.extractChild(b.node);
    var indexCmp = aChild.compareTo(bChild);

    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  /**
   * @inheritDoc
   */


  PathIndex.prototype.makePost = function (indexValue, name) {
    var valueNode = nodeFromJSON$1(indexValue);
    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
    return new NamedNode(name, node);
  };
  /**
   * @inheritDoc
   */


  PathIndex.prototype.maxPost = function () {
    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
    return new NamedNode(MAX_NAME, node);
  };
  /**
   * @inheritDoc
   */


  PathIndex.prototype.toString = function () {
    return this.indexPath_.slice().join('/');
  };

  return PathIndex;
}(Index);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */


var DataSnapshot =
/** @class */
function () {
  /**
   * @param {!Node} node_ A SnapshotNode to wrap.
   * @param {!Reference} ref_ The ref of the location this snapshot came from.
   * @param {!Index} index_ The iteration order for this snapshot
   */
  function DataSnapshot(node_, ref_, index_) {
    this.node_ = node_;
    this.ref_ = ref_;
    this.index_ = index_;
  }
  /**
   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
   * empty.
   *
   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
   */


  DataSnapshot.prototype.val = function () {
    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
    return this.node_.val();
  };
  /**
   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
   * the entire node contents.
   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
   */


  DataSnapshot.prototype.exportVal = function () {
    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
    return this.node_.val(true);
  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users


  DataSnapshot.prototype.toJSON = function () {
    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
    return this.exportVal();
  };
  /**
   * Returns whether the snapshot contains a non-null value.
   *
   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
   */


  DataSnapshot.prototype.exists = function () {
    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
    return !this.node_.isEmpty();
  };
  /**
   * Returns a DataSnapshot of the specified child node's contents.
   *
   * @param {!string} childPathString Path to a child.
   * @return {!DataSnapshot} DataSnapshot for child node.
   */


  DataSnapshot.prototype.child = function (childPathString) {
    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)

    childPathString = String(childPathString);
    validatePathString('DataSnapshot.child', 1, childPathString, false);
    var childPath = new Path(childPathString);
    var childRef = this.ref_.child(childPath);
    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
  };
  /**
   * Returns whether the snapshot contains a child at the specified path.
   *
   * @param {!string} childPathString Path to a child.
   * @return {boolean} Whether the child exists.
   */


  DataSnapshot.prototype.hasChild = function (childPathString) {
    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
    var childPath = new Path(childPathString);
    return !this.node_.getChild(childPath).isEmpty();
  };
  /**
   * Returns the priority of the object, or null if no priority was set.
   *
   * @return {string|number|null} The priority.
   */


  DataSnapshot.prototype.getPriority = function () {
    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)

    return this.node_.getPriority().val();
  };
  /**
   * Iterates through child nodes and calls the specified action for each one.
   *
   * @param {function(!DataSnapshot)} action Callback function to be called
   * for each child.
   * @return {boolean} True if forEach was canceled by action returning true for
   * one of the child nodes.
   */


  DataSnapshot.prototype.forEach = function (action) {
    var _this = this;

    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
    util.validateCallback('DataSnapshot.forEach', 1, action, false);

    if (this.node_.isLeafNode()) {
      return false;
    }

    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...

    return !!childrenNode.forEachChild(this.index_, function (key, node) {
      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
    });
  };
  /**
   * Returns whether this DataSnapshot has children.
   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
   */


  DataSnapshot.prototype.hasChildren = function () {
    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);

    if (this.node_.isLeafNode()) {
      return false;
    } else {
      return !this.node_.isEmpty();
    }
  };

  Object.defineProperty(DataSnapshot.prototype, "key", {
    get: function () {
      return this.ref_.getKey();
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns the number of children for this DataSnapshot.
   * @return {number} The number of children that this DataSnapshot contains.
   */

  DataSnapshot.prototype.numChildren = function () {
    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
    return this.node_.numChildren();
  };
  /**
   * @return {Reference} The Firebase reference for the location this snapshot's data came from.
   */


  DataSnapshot.prototype.getRef = function () {
    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
    return this.ref_;
  };

  Object.defineProperty(DataSnapshot.prototype, "ref", {
    get: function () {
      return this.getRef();
    },
    enumerable: false,
    configurable: true
  });
  return DataSnapshot;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Encapsulates the data needed to raise an event
 * @implements {Event}
 */


var DataEvent =
/** @class */
function () {
  /**
   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
   * @param {!DataSnapshot} snapshot The data backing the event
   * @param {?string=} prevName Optional, the name of the previous child for child_* events.
   */
  function DataEvent(eventType, eventRegistration, snapshot, prevName) {
    this.eventType = eventType;
    this.eventRegistration = eventRegistration;
    this.snapshot = snapshot;
    this.prevName = prevName;
  }
  /**
   * @inheritDoc
   */


  DataEvent.prototype.getPath = function () {
    var ref = this.snapshot.getRef();

    if (this.eventType === 'value') {
      return ref.path;
    } else {
      return ref.getParent().path;
    }
  };
  /**
   * @inheritDoc
   */


  DataEvent.prototype.getEventType = function () {
    return this.eventType;
  };
  /**
   * @inheritDoc
   */


  DataEvent.prototype.getEventRunner = function () {
    return this.eventRegistration.getEventRunner(this);
  };
  /**
   * @inheritDoc
   */


  DataEvent.prototype.toString = function () {
    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());
  };

  return DataEvent;
}();

var CancelEvent =
/** @class */
function () {
  /**
   * @param {EventRegistration} eventRegistration
   * @param {Error} error
   * @param {!Path} path
   */
  function CancelEvent(eventRegistration, error, path) {
    this.eventRegistration = eventRegistration;
    this.error = error;
    this.path = path;
  }
  /**
   * @inheritDoc
   */


  CancelEvent.prototype.getPath = function () {
    return this.path;
  };
  /**
   * @inheritDoc
   */


  CancelEvent.prototype.getEventType = function () {
    return 'cancel';
  };
  /**
   * @inheritDoc
   */


  CancelEvent.prototype.getEventRunner = function () {
    return this.eventRegistration.getEventRunner(this);
  };
  /**
   * @inheritDoc
   */


  CancelEvent.prototype.toString = function () {
    return this.path.toString() + ':cancel';
  };

  return CancelEvent;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents registration for 'value' events.
 */


var ValueEventRegistration =
/** @class */
function () {
  /**
   * @param {?function(!DataSnapshot)} callback_
   * @param {?function(Error)} cancelCallback_
   * @param {?Object} context_
   */
  function ValueEventRegistration(callback_, cancelCallback_, context_) {
    this.callback_ = callback_;
    this.cancelCallback_ = cancelCallback_;
    this.context_ = context_;
  }
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.respondsTo = function (eventType) {
    return eventType === 'value';
  };
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.createEvent = function (change, query) {
    var index = query.getQueryParams().getIndex();
    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
  };
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.getEventRunner = function (eventData) {
    var ctx = this.context_;

    if (eventData.getEventType() === 'cancel') {
      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
      var cancelCB_1 = this.cancelCallback_;
      return function () {
        // We know that error exists, we checked above that this is a cancel event
        cancelCB_1.call(ctx, eventData.error);
      };
    } else {
      var cb_1 = this.callback_;
      return function () {
        cb_1.call(ctx, eventData.snapshot);
      };
    }
  };
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
    if (this.cancelCallback_) {
      return new CancelEvent(this, error, path);
    } else {
      return null;
    }
  };
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.matches = function (other) {
    if (!(other instanceof ValueEventRegistration)) {
      return false;
    } else if (!other.callback_ || !this.callback_) {
      // If no callback specified, we consider it to match any callback.
      return true;
    } else {
      return other.callback_ === this.callback_ && other.context_ === this.context_;
    }
  };
  /**
   * @inheritDoc
   */


  ValueEventRegistration.prototype.hasAnyCallback = function () {
    return this.callback_ !== null;
  };

  return ValueEventRegistration;
}();
/**
 * Represents the registration of 1 or more child_xxx events.
 *
 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
 * register a group of callbacks together in the future.
 *
 * @constructor
 * @implements {EventRegistration}
 */


var ChildEventRegistration =
/** @class */
function () {
  /**
   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
   * @param {?function(Error)} cancelCallback_
   * @param {Object=} context_
   */
  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
    this.callbacks_ = callbacks_;
    this.cancelCallback_ = cancelCallback_;
    this.context_ = context_;
  }
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.respondsTo = function (eventType) {
    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
    return util.contains(this.callbacks_, eventToCheck);
  };
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
    if (this.cancelCallback_) {
      return new CancelEvent(this, error, path);
    } else {
      return null;
    }
  };
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.createEvent = function (change, query) {
    util.assert(change.childName != null, 'Child events should have a childName.');
    var ref = query.getRef().child(
    /** @type {!string} */
    change.childName);
    var index = query.getQueryParams().getIndex();
    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
  };
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.getEventRunner = function (eventData) {
    var ctx = this.context_;

    if (eventData.getEventType() === 'cancel') {
      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
      var cancelCB_2 = this.cancelCallback_;
      return function () {
        // We know that error exists, we checked above that this is a cancel event
        cancelCB_2.call(ctx, eventData.error);
      };
    } else {
      var cb_2 = this.callbacks_[eventData.eventType];
      return function () {
        cb_2.call(ctx, eventData.snapshot, eventData.prevName);
      };
    }
  };
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.matches = function (other) {
    var _this = this;

    if (other instanceof ChildEventRegistration) {
      if (!this.callbacks_ || !other.callbacks_) {
        return true;
      } else if (this.context_ === other.context_) {
        var otherKeys = Object.keys(other.callbacks_);
        var thisKeys = Object.keys(this.callbacks_);
        var otherCount = otherKeys.length;
        var thisCount = thisKeys.length;

        if (otherCount === thisCount) {
          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
          // If event types don't match, not a match
          // If count is not 1, exact match across all
          if (otherCount === 1) {
            var otherKey = otherKeys[0];
            var thisKey = thisKeys[0];
            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);
          } else {
            // Exact match on each key.
            return thisKeys.every(function (eventType) {
              return other.callbacks_[eventType] === _this.callbacks_[eventType];
            });
          }
        }
      }
    }

    return false;
  };
  /**
   * @inheritDoc
   */


  ChildEventRegistration.prototype.hasAnyCallback = function () {
    return this.callbacks_ !== null;
  };

  return ChildEventRegistration;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var __referenceConstructor;
/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */


var Query =
/** @class */
function () {
  function Query(repo, path, queryParams_, orderByCalled_) {
    this.repo = repo;
    this.path = path;
    this.queryParams_ = queryParams_;
    this.orderByCalled_ = orderByCalled_;
  }

  Object.defineProperty(Query, "__referenceConstructor", {
    get: function () {
      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');
      return __referenceConstructor;
    },
    set: function (val) {
      __referenceConstructor = val;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Validates start/end values for queries.
   * @param {!QueryParams} params
   * @private
   */

  Query.validateQueryEndpoints_ = function (params) {
    var startNode = null;
    var endNode = null;

    if (params.hasStart()) {
      startNode = params.getIndexStartValue();
    }

    if (params.hasEnd()) {
      endNode = params.getIndexEndValue();
    }

    if (params.getIndex() === KEY_INDEX) {
      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';
      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';

      if (params.hasStart()) {
        var startName = params.getIndexStartName();

        if (startName !== MIN_NAME) {
          throw new Error(tooManyArgsError);
        } else if (typeof startNode !== 'string') {
          throw new Error(wrongArgTypeError);
        }
      }

      if (params.hasEnd()) {
        var endName = params.getIndexEndName();

        if (endName !== MAX_NAME) {
          throw new Error(tooManyArgsError);
        } else if (typeof endNode !== 'string') {
          throw new Error(wrongArgTypeError);
        }
      }
    } else if (params.getIndex() === PRIORITY_INDEX) {
      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {
        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
      }
    } else {
      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');

      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {
        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');
      }
    }
  };
  /**
   * Validates that limit* has been called with the correct combination of parameters
   * @param {!QueryParams} params
   * @private
   */


  Query.validateLimit_ = function (params) {
    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
      throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
    }
  };
  /**
   * Validates that no other order by call has been made
   * @param {!string} fnName
   * @private
   */


  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
    if (this.orderByCalled_ === true) {
      throw new Error(fnName + ": You can't combine multiple orderBy calls.");
    }
  };
  /**
   * @return {!QueryParams}
   */


  Query.prototype.getQueryParams = function () {
    return this.queryParams_;
  };
  /**
   * @return {!Reference}
   */


  Query.prototype.getRef = function () {
    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
    // method gets called.

    return new Query.__referenceConstructor(this.repo, this.path);
  };
  /**
   * @param {!string} eventType
   * @param {!function(DataSnapshot, string=)} callback
   * @param {(function(Error)|Object)=} cancelCallbackOrContext
   * @param {Object=} context
   * @return {!function(DataSnapshot, string=)}
   */


  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
    util.validateArgCount('Query.on', 2, 4, arguments.length);
    validateEventType('Query.on', 1, eventType, false);
    util.validateCallback('Query.on', 2, callback, false);
    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);

    if (eventType === 'value') {
      this.onValueEvent(callback, ret.cancel, ret.context);
    } else {
      var callbacks = {};
      callbacks[eventType] = callback;
      this.onChildEvent(callbacks, ret.cancel, ret.context);
    }

    return callback;
  };
  /**
   * @param {!function(!DataSnapshot)} callback
   * @param {?function(Error)} cancelCallback
   * @param {?Object} context
   * @protected
   */


  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
    this.repo.addEventCallbackForQuery(this, container);
  };
  /**
   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
   * @param {?function(Error)} cancelCallback
   * @param {?Object} context
   * @protected
   */


  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
    var container = new ChildEventRegistration(callbacks, cancelCallback, context);
    this.repo.addEventCallbackForQuery(this, container);
  };
  /**
   * @param {string=} eventType
   * @param {(function(!DataSnapshot, ?string=))=} callback
   * @param {Object=} context
   */


  Query.prototype.off = function (eventType, callback, context) {
    util.validateArgCount('Query.off', 0, 3, arguments.length);
    validateEventType('Query.off', 1, eventType, true);
    util.validateCallback('Query.off', 2, callback, true);
    util.validateContextObject('Query.off', 3, context, true);
    var container = null;
    var callbacks = null;

    if (eventType === 'value') {
      var valueCallback = callback || null;
      container = new ValueEventRegistration(valueCallback, null, context || null);
    } else if (eventType) {
      if (callback) {
        callbacks = {};
        callbacks[eventType] = callback;
      }

      container = new ChildEventRegistration(callbacks, null, context || null);
    }

    this.repo.removeEventCallbackForQuery(this, container);
  };
  /**
   * Attaches a listener, waits for the first event, and then removes the listener
   * @param {!string} eventType
   * @param {!function(!DataSnapshot, string=)} userCallback
   * @param failureCallbackOrContext
   * @param context
   * @return {!firebase.Promise}
   */


  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
    var _this = this;

    util.validateArgCount('Query.once', 1, 4, arguments.length);
    validateEventType('Query.once', 1, eventType, false);
    util.validateCallback('Query.once', 2, userCallback, true);
    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
    // against the Promise specification.

    var firstCall = true;
    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises

    deferred.promise.catch(function () {});

    var onceCallback = function (snapshot) {
      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
      // triggers multiple events (e.g. child_added or child_changed).
      if (firstCall) {
        firstCall = false;

        _this.off(eventType, onceCallback);

        if (userCallback) {
          userCallback.bind(ret.context)(snapshot);
        }

        deferred.resolve(snapshot);
      }
    };

    this.on(eventType, onceCallback,
    /*cancel=*/
    function (err) {
      _this.off(eventType, onceCallback);

      if (ret.cancel) {
        ret.cancel.bind(ret.context)(err);
      }

      deferred.reject(err);
    });
    return deferred.promise;
  };
  /**
   * Set a limit and anchor it to the start of the window.
   * @param {!number} limit
   * @return {!Query}
   */


  Query.prototype.limitToFirst = function (limit) {
    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);

    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
      throw new Error('Query.limitToFirst: First argument must be a positive integer.');
    }

    if (this.queryParams_.hasLimit()) {
      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');
    }

    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
  };
  /**
   * Set a limit and anchor it to the end of the window.
   * @param {!number} limit
   * @return {!Query}
   */


  Query.prototype.limitToLast = function (limit) {
    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);

    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
      throw new Error('Query.limitToLast: First argument must be a positive integer.');
    }

    if (this.queryParams_.hasLimit()) {
      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');
    }

    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
  };
  /**
   * Given a child path, return a new query ordered by the specified grandchild path.
   * @param {!string} path
   * @return {!Query}
   */


  Query.prototype.orderByChild = function (path) {
    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);

    if (path === '$key') {
      throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
    } else if (path === '$priority') {
      throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
    } else if (path === '$value') {
      throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
    }

    validatePathString('Query.orderByChild', 1, path, false);
    this.validateNoPreviousOrderByCall_('Query.orderByChild');
    var parsedPath = new Path(path);

    if (parsedPath.isEmpty()) {
      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
    }

    var index = new PathIndex(parsedPath);
    var newParams = this.queryParams_.orderBy(index);
    Query.validateQueryEndpoints_(newParams);
    return new Query(this.repo, this.path, newParams,
    /*orderByCalled=*/
    true);
  };
  /**
   * Return a new query ordered by the KeyIndex
   * @return {!Query}
   */


  Query.prototype.orderByKey = function () {
    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
    this.validateNoPreviousOrderByCall_('Query.orderByKey');
    var newParams = this.queryParams_.orderBy(KEY_INDEX);
    Query.validateQueryEndpoints_(newParams);
    return new Query(this.repo, this.path, newParams,
    /*orderByCalled=*/
    true);
  };
  /**
   * Return a new query ordered by the PriorityIndex
   * @return {!Query}
   */


  Query.prototype.orderByPriority = function () {
    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
    this.validateNoPreviousOrderByCall_('Query.orderByPriority');
    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
    Query.validateQueryEndpoints_(newParams);
    return new Query(this.repo, this.path, newParams,
    /*orderByCalled=*/
    true);
  };
  /**
   * Return a new query ordered by the ValueIndex
   * @return {!Query}
   */


  Query.prototype.orderByValue = function () {
    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
    this.validateNoPreviousOrderByCall_('Query.orderByValue');
    var newParams = this.queryParams_.orderBy(VALUE_INDEX);
    Query.validateQueryEndpoints_(newParams);
    return new Query(this.repo, this.path, newParams,
    /*orderByCalled=*/
    true);
  };
  /**
   * @param {number|string|boolean|null} value
   * @param {?string=} name
   * @return {!Query}
   */


  Query.prototype.startAt = function (value, name) {
    if (value === void 0) {
      value = null;
    }

    util.validateArgCount('Query.startAt', 0, 2, arguments.length);
    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
    validateKey('Query.startAt', 2, name, true);
    var newParams = this.queryParams_.startAt(value, name);
    Query.validateLimit_(newParams);
    Query.validateQueryEndpoints_(newParams);

    if (this.queryParams_.hasStart()) {
      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');
    } // Calling with no params tells us to start at the beginning.


    if (value === undefined) {
      value = null;
      name = null;
    }

    return new Query(this.repo, this.path, newParams, this.orderByCalled_);
  };
  /**
   * @param {number|string|boolean|null} value
   * @param {?string=} name
   * @return {!Query}
   */


  Query.prototype.endAt = function (value, name) {
    if (value === void 0) {
      value = null;
    }

    util.validateArgCount('Query.endAt', 0, 2, arguments.length);
    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
    validateKey('Query.endAt', 2, name, true);
    var newParams = this.queryParams_.endAt(value, name);
    Query.validateLimit_(newParams);
    Query.validateQueryEndpoints_(newParams);

    if (this.queryParams_.hasEnd()) {
      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');
    }

    return new Query(this.repo, this.path, newParams, this.orderByCalled_);
  };
  /**
   * Load the selection of children with exactly the specified value, and, optionally,
   * the specified name.
   * @param {number|string|boolean|null} value
   * @param {string=} name
   * @return {!Query}
   */


  Query.prototype.equalTo = function (value, name) {
    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);
    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
    validateKey('Query.equalTo', 2, name, true);

    if (this.queryParams_.hasStart()) {
      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');
    }

    if (this.queryParams_.hasEnd()) {
      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');
    }

    return this.startAt(value, name).endAt(value, name);
  };
  /**
   * @return {!string} URL for this location.
   */


  Query.prototype.toString = function () {
    util.validateArgCount('Query.toString', 0, 0, arguments.length);
    return this.repo.toString() + this.path.toUrlEncodedString();
  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
  // for end-users.


  Query.prototype.toJSON = function () {
    // An optional spacer argument is unnecessary for a string.
    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);
    return this.toString();
  };
  /**
   * An object representation of the query parameters used by this Query.
   * @return {!Object}
   */


  Query.prototype.queryObject = function () {
    return this.queryParams_.getQueryObject();
  };
  /**
   * @return {!string}
   */


  Query.prototype.queryIdentifier = function () {
    var obj = this.queryObject();
    var id = ObjectToUniqueKey(obj);
    return id === '{}' ? 'default' : id;
  };
  /**
   * Return true if this query and the provided query are equivalent; otherwise, return false.
   * @param {Query} other
   * @return {boolean}
   */


  Query.prototype.isEqual = function (other) {
    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);

    if (!(other instanceof Query)) {
      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
      throw new Error(error);
    }

    var sameRepo = this.repo === other.repo;
    var samePath = this.path.equals(other.path);
    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
    return sameRepo && samePath && sameQueryIdentifier;
  };
  /**
   * Helper used by .on and .once to extract the context and or cancel arguments.
   * @param {!string} fnName The function name (on or once)
   * @param {(function(Error)|Object)=} cancelOrContext
   * @param {Object=} context
   * @return {{cancel: ?function(Error), context: ?Object}}
   * @private
   */


  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
    var ret = {
      cancel: null,
      context: null
    };

    if (cancelOrContext && context) {
      ret.cancel = cancelOrContext;
      util.validateCallback(fnName, 3, ret.cancel, true);
      ret.context = context;
      util.validateContextObject(fnName, 4, ret.context, true);
    } else if (cancelOrContext) {
      // we have either a cancel callback or a context.
      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
        // it's a context!
        ret.context = cancelOrContext;
      } else if (typeof cancelOrContext === 'function') {
        ret.cancel = cancelOrContext;
      } else {
        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');
      }
    }

    return ret;
  };

  Object.defineProperty(Query.prototype, "ref", {
    get: function () {
      return this.getRef();
    },
    enumerable: false,
    configurable: true
  });
  return Query;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ExistingValueProvider =
/** @class */
function () {
  function ExistingValueProvider(node_) {
    this.node_ = node_;
  }

  ExistingValueProvider.prototype.getImmediateChild = function (childName) {
    var child = this.node_.getImmediateChild(childName);
    return new ExistingValueProvider(child);
  };

  ExistingValueProvider.prototype.node = function () {
    return this.node_;
  };

  return ExistingValueProvider;
}();

var DeferredValueProvider =
/** @class */
function () {
  function DeferredValueProvider(syncTree, path) {
    this.syncTree_ = syncTree;
    this.path_ = path;
  }

  DeferredValueProvider.prototype.getImmediateChild = function (childName) {
    var childPath = this.path_.child(childName);
    return new DeferredValueProvider(this.syncTree_, childPath);
  };

  DeferredValueProvider.prototype.node = function () {
    return this.syncTree_.calcCompleteEventCache(this.path_);
  };

  return DeferredValueProvider;
}();
/**
 * Generate placeholders for deferred values.
 * @param {?Object} values
 * @return {!Object}
 */


var generateWithValues = function (values) {
  values = values || {};
  values['timestamp'] = values['timestamp'] || new Date().getTime();
  return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)} value
 * @param {!Object} serverValues
 * @return {!(string|number|boolean)}
 */


var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
  if (!value || typeof value !== 'object') {
    return value;
  }

  util.assert('.sv' in value, 'Unexpected leaf node or priority contents');

  if (typeof value['.sv'] === 'string') {
    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
  } else if (typeof value['.sv'] === 'object') {
    return resolveComplexDeferredValue(value['.sv'], existingVal);
  } else {
    util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
  }
};

var resolveScalarDeferredValue = function (op, existing, serverValues) {
  switch (op) {
    case 'timestamp':
      return serverValues['timestamp'];

    default:
      util.assert(false, 'Unexpected server value: ' + op);
  }
};

var resolveComplexDeferredValue = function (op, existing, unused) {
  if (!op.hasOwnProperty('increment')) {
    util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
  }

  var delta = op['increment'];

  if (typeof delta !== 'number') {
    util.assert(false, 'Unexpected increment value: ' + delta);
  }

  var existingNode = existing.node();
  util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount

  if (!existingNode.isLeafNode()) {
    return delta;
  }

  var leaf = existingNode;
  var existingVal = leaf.getValue();

  if (typeof existingVal !== 'number') {
    return delta;
  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers


  return existingVal + delta;
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!Path} path path to which write is relative
 * @param {!Node} node new data written at path
 * @param {!SyncTree} syncTree current data
 * @param {!Object} serverValues
 * @return {!SparseSnapshotTree}
 */


var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node} node
 * @param {!Object} serverValues
 * @return {!Node}
 */


var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
};

function resolveDeferredValue(node, existingVal, serverValues) {
  var rawPri = node.getPriority().val();
  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
  var newNode;

  if (node.isLeafNode()) {
    var leafNode = node;
    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);

    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
      return new LeafNode(value, nodeFromJSON$1(priority));
    } else {
      return node;
    }
  } else {
    var childrenNode = node;
    newNode = childrenNode;

    if (priority !== childrenNode.getPriority().val()) {
      newNode = newNode.updatePriority(new LeafNode(priority));
    }

    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);

      if (newChildNode !== childNode) {
        newNode = newNode.updateImmediateChild(childName, newChildNode);
      }
    });
    return newNode;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper class to store a sparse set of snapshots.
 */


var SparseSnapshotTree =
/** @class */
function () {
  function SparseSnapshotTree() {
    this.value = null;
    this.children = new Map();
  }
  /**
   * Gets the node stored at the given path if one exists.
   *
   * @param path Path to look up snapshot for.
   * @return The retrieved node, or null.
   */


  SparseSnapshotTree.prototype.find = function (path) {
    if (this.value != null) {
      return this.value.getChild(path);
    } else if (!path.isEmpty() && this.children.size > 0) {
      var childKey = path.getFront();
      path = path.popFront();

      if (this.children.has(childKey)) {
        var childTree = this.children.get(childKey);
        return childTree.find(path);
      } else {
        return null;
      }
    } else {
      return null;
    }
  };
  /**
   * Stores the given node at the specified path. If there is already a node
   * at a shallower path, it merges the new data into that snapshot node.
   *
   * @param path Path to look up snapshot for.
   * @param data The new data, or null.
   */


  SparseSnapshotTree.prototype.remember = function (path, data) {
    if (path.isEmpty()) {
      this.value = data;
      this.children.clear();
    } else if (this.value !== null) {
      this.value = this.value.updateChild(path, data);
    } else {
      var childKey = path.getFront();

      if (!this.children.has(childKey)) {
        this.children.set(childKey, new SparseSnapshotTree());
      }

      var child = this.children.get(childKey);
      path = path.popFront();
      child.remember(path, data);
    }
  };
  /**
   * Purge the data at path from the cache.
   *
   * @param path Path to look up snapshot for.
   * @return True if this node should now be removed.
   */


  SparseSnapshotTree.prototype.forget = function (path) {
    if (path.isEmpty()) {
      this.value = null;
      this.children.clear();
      return true;
    } else {
      if (this.value !== null) {
        if (this.value.isLeafNode()) {
          // We're trying to forget a node that doesn't exist
          return false;
        } else {
          var value = this.value;
          this.value = null;
          var self_1 = this;
          value.forEachChild(PRIORITY_INDEX, function (key, tree) {
            self_1.remember(new Path(key), tree);
          });
          return this.forget(path);
        }
      } else if (this.children.size > 0) {
        var childKey = path.getFront();
        path = path.popFront();

        if (this.children.has(childKey)) {
          var safeToRemove = this.children.get(childKey).forget(path);

          if (safeToRemove) {
            this.children.delete(childKey);
          }
        }

        return this.children.size === 0;
      } else {
        return true;
      }
    }
  };
  /**
   * Recursively iterates through all of the stored tree and calls the
   * callback on each one.
   *
   * @param prefixPath Path to look up node for.
   * @param func The function to invoke for each tree.
   */


  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
    if (this.value !== null) {
      func(prefixPath, this.value);
    } else {
      this.forEachChild(function (key, tree) {
        var path = new Path(prefixPath.toString() + '/' + key);
        tree.forEachTree(path, func);
      });
    }
  };
  /**
   * Iterates through each immediate child and triggers the callback.
   *
   * @param func The function to invoke for each child.
   */


  SparseSnapshotTree.prototype.forEachChild = function (func) {
    this.children.forEach(function (tree, key) {
      func(key, tree);
    });
  };

  return SparseSnapshotTree;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @enum
 */


var OperationType;

(function (OperationType) {
  OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
  OperationType[OperationType["MERGE"] = 1] = "MERGE";
  OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
  OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType || (OperationType = {}));
/**
 * @param {boolean} fromUser
 * @param {boolean} fromServer
 * @param {?string} queryId
 * @param {boolean} tagged
 * @constructor
 */


var OperationSource =
/** @class */
function () {
  function OperationSource(fromUser, fromServer, queryId, tagged) {
    this.fromUser = fromUser;
    this.fromServer = fromServer;
    this.queryId = queryId;
    this.tagged = tagged;
    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');
  }
  /**
   * @const
   * @type {!OperationSource}
   */


  OperationSource.User = new OperationSource(
  /*fromUser=*/
  true, false, null,
  /*tagged=*/
  false);
  /**
   * @const
   * @type {!OperationSource}
   */

  OperationSource.Server = new OperationSource(false,
  /*fromServer=*/
  true, null,
  /*tagged=*/
  false);
  /**
   * @param {string} queryId
   * @return {!OperationSource}
   */

  OperationSource.forServerTaggedQuery = function (queryId) {
    return new OperationSource(false,
    /*fromServer=*/
    true, queryId,
    /*tagged=*/
    true);
  };

  return OperationSource;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var AckUserWrite =
/** @class */
function () {
  /**
   *
   * @param {!Path} path
   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
   * @param {!boolean} revert
   */
  function AckUserWrite(
  /** @inheritDoc */
  path,
  /** @inheritDoc */
  affectedTree,
  /** @inheritDoc */
  revert) {
    this.path = path;
    this.affectedTree = affectedTree;
    this.revert = revert;
    /** @inheritDoc */

    this.type = OperationType.ACK_USER_WRITE;
    /** @inheritDoc */

    this.source = OperationSource.User;
  }
  /**
   * @inheritDoc
   */


  AckUserWrite.prototype.operationForChild = function (childName) {
    if (!this.path.isEmpty()) {
      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
    } else if (this.affectedTree.value != null) {
      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.

      return this;
    } else {
      var childTree = this.affectedTree.subtree(new Path(childName));
      return new AckUserWrite(Path.Empty, childTree, this.revert);
    }
  };

  return AckUserWrite;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 * @const
 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
 */

var EmptyChildren = function () {
  if (!emptyChildrenSingleton) {
    emptyChildrenSingleton = new SortedMap(stringCompare);
  }

  return emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */


var ImmutableTree =
/** @class */
function () {
  /**
   * @template T
   * @param {?T} value
   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
   */
  function ImmutableTree(value, children) {
    if (children === void 0) {
      children = EmptyChildren();
    }

    this.value = value;
    this.children = children;
  }
  /**
   * @template T
   * @param {!Object.<string, !T>} obj
   * @return {!ImmutableTree.<!T>}
   */


  ImmutableTree.fromObject = function (obj) {
    var tree = ImmutableTree.Empty;
    each(obj, function (childPath, childSnap) {
      tree = tree.set(new Path(childPath), childSnap);
    });
    return tree;
  };
  /**
   * True if the value is empty and there are no children
   * @return {boolean}
   */


  ImmutableTree.prototype.isEmpty = function () {
    return this.value === null && this.children.isEmpty();
  };
  /**
   * Given a path and predicate, return the first node and the path to that node
   * where the predicate returns true.
   *
   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
   * on the way back out, it may be better to pass down a pathSoFar obj.
   *
   * @param {!Path} relativePath The remainder of the path
   * @param {function(T):boolean} predicate The predicate to satisfy to return a
   *   node
   * @return {?{path:!Path, value:!T}}
   */


  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
    if (this.value != null && predicate(this.value)) {
      return {
        path: Path.Empty,
        value: this.value
      };
    } else {
      if (relativePath.isEmpty()) {
        return null;
      } else {
        var front = relativePath.getFront();
        var child = this.children.get(front);

        if (child !== null) {
          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);

          if (childExistingPathAndValue != null) {
            var fullPath = new Path(front).child(childExistingPathAndValue.path);
            return {
              path: fullPath,
              value: childExistingPathAndValue.value
            };
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  };
  /**
   * Find, if it exists, the shortest subpath of the given path that points a defined
   * value in the tree
   * @param {!Path} relativePath
   * @return {?{path: !Path, value: !T}}
   */


  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
    return this.findRootMostMatchingPathAndValue(relativePath, function () {
      return true;
    });
  };
  /**
   * @param {!Path} relativePath
   * @return {!ImmutableTree.<T>} The subtree at the given path
   */


  ImmutableTree.prototype.subtree = function (relativePath) {
    if (relativePath.isEmpty()) {
      return this;
    } else {
      var front = relativePath.getFront();
      var childTree = this.children.get(front);

      if (childTree !== null) {
        return childTree.subtree(relativePath.popFront());
      } else {
        return ImmutableTree.Empty;
      }
    }
  };
  /**
   * Sets a value at the specified path.
   *
   * @param {!Path} relativePath Path to set value at.
   * @param {?T} toSet Value to set.
   * @return {!ImmutableTree.<T>} Resulting tree.
   */


  ImmutableTree.prototype.set = function (relativePath, toSet) {
    if (relativePath.isEmpty()) {
      return new ImmutableTree(toSet, this.children);
    } else {
      var front = relativePath.getFront();
      var child = this.children.get(front) || ImmutableTree.Empty;
      var newChild = child.set(relativePath.popFront(), toSet);
      var newChildren = this.children.insert(front, newChild);
      return new ImmutableTree(this.value, newChildren);
    }
  };
  /**
   * Removes the value at the specified path.
   *
   * @param {!Path} relativePath Path to value to remove.
   * @return {!ImmutableTree.<T>} Resulting tree.
   */


  ImmutableTree.prototype.remove = function (relativePath) {
    if (relativePath.isEmpty()) {
      if (this.children.isEmpty()) {
        return ImmutableTree.Empty;
      } else {
        return new ImmutableTree(null, this.children);
      }
    } else {
      var front = relativePath.getFront();
      var child = this.children.get(front);

      if (child) {
        var newChild = child.remove(relativePath.popFront());
        var newChildren = void 0;

        if (newChild.isEmpty()) {
          newChildren = this.children.remove(front);
        } else {
          newChildren = this.children.insert(front, newChild);
        }

        if (this.value === null && newChildren.isEmpty()) {
          return ImmutableTree.Empty;
        } else {
          return new ImmutableTree(this.value, newChildren);
        }
      } else {
        return this;
      }
    }
  };
  /**
   * Gets a value from the tree.
   *
   * @param {!Path} relativePath Path to get value for.
   * @return {?T} Value at path, or null.
   */


  ImmutableTree.prototype.get = function (relativePath) {
    if (relativePath.isEmpty()) {
      return this.value;
    } else {
      var front = relativePath.getFront();
      var child = this.children.get(front);

      if (child) {
        return child.get(relativePath.popFront());
      } else {
        return null;
      }
    }
  };
  /**
   * Replace the subtree at the specified path with the given new tree.
   *
   * @param {!Path} relativePath Path to replace subtree for.
   * @param {!ImmutableTree} newTree New tree.
   * @return {!ImmutableTree} Resulting tree.
   */


  ImmutableTree.prototype.setTree = function (relativePath, newTree) {
    if (relativePath.isEmpty()) {
      return newTree;
    } else {
      var front = relativePath.getFront();
      var child = this.children.get(front) || ImmutableTree.Empty;
      var newChild = child.setTree(relativePath.popFront(), newTree);
      var newChildren = void 0;

      if (newChild.isEmpty()) {
        newChildren = this.children.remove(front);
      } else {
        newChildren = this.children.insert(front, newChild);
      }

      return new ImmutableTree(this.value, newChildren);
    }
  };
  /**
   * Performs a depth first fold on this tree. Transforms a tree into a single
   * value, given a function that operates on the path to a node, an optional
   * current value, and a map of child names to folded subtrees
   * @template V
   * @param {function(Path, ?T, Object.<string, V>):V} fn
   * @return {V}
   */


  ImmutableTree.prototype.fold = function (fn) {
    return this.fold_(Path.Empty, fn);
  };
  /**
   * Recursive helper for public-facing fold() method
   * @template V
   * @param {!Path} pathSoFar
   * @param {function(Path, ?T, Object.<string, V>):V} fn
   * @return {V}
   * @private
   */


  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
    var accum = {};
    this.children.inorderTraversal(function (childKey, childTree) {
      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
    });
    return fn(pathSoFar, this.value, accum);
  };
  /**
   * Find the first matching value on the given path. Return the result of applying f to it.
   * @template V
   * @param {!Path} path
   * @param {!function(!Path, !T):?V} f
   * @return {?V}
   */


  ImmutableTree.prototype.findOnPath = function (path, f) {
    return this.findOnPath_(path, Path.Empty, f);
  };

  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
    var result = this.value ? f(pathSoFar, this.value) : false;

    if (result) {
      return result;
    } else {
      if (pathToFollow.isEmpty()) {
        return null;
      } else {
        var front = pathToFollow.getFront();
        var nextChild = this.children.get(front);

        if (nextChild) {
          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
        } else {
          return null;
        }
      }
    }
  };
  /**
   *
   * @param {!Path} path
   * @param {!function(!Path, !T)} f
   * @returns {!ImmutableTree.<T>}
   */


  ImmutableTree.prototype.foreachOnPath = function (path, f) {
    return this.foreachOnPath_(path, Path.Empty, f);
  };

  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
    if (pathToFollow.isEmpty()) {
      return this;
    } else {
      if (this.value) {
        f(currentRelativePath, this.value);
      }

      var front = pathToFollow.getFront();
      var nextChild = this.children.get(front);

      if (nextChild) {
        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
      } else {
        return ImmutableTree.Empty;
      }
    }
  };
  /**
   * Calls the given function for each node in the tree that has a value.
   *
   * @param {function(!Path, !T)} f A function to be called with
   *   the path from the root of the tree to a node, and the value at that node.
   *   Called in depth-first order.
   */


  ImmutableTree.prototype.foreach = function (f) {
    this.foreach_(Path.Empty, f);
  };

  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
    this.children.inorderTraversal(function (childName, childTree) {
      childTree.foreach_(currentRelativePath.child(childName), f);
    });

    if (this.value) {
      f(currentRelativePath, this.value);
    }
  };
  /**
   *
   * @param {function(string, !T)} f
   */


  ImmutableTree.prototype.foreachChild = function (f) {
    this.children.inorderTraversal(function (childName, childTree) {
      if (childTree.value) {
        f(childName, childTree.value);
      }
    });
  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any


  ImmutableTree.Empty = new ImmutableTree(null);
  return ImmutableTree;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @constructor
 * @implements {Operation}
 */


var ListenComplete =
/** @class */
function () {
  function ListenComplete(source, path) {
    this.source = source;
    this.path = path;
    /** @inheritDoc */

    this.type = OperationType.LISTEN_COMPLETE;
  }

  ListenComplete.prototype.operationForChild = function (childName) {
    if (this.path.isEmpty()) {
      return new ListenComplete(this.source, Path.Empty);
    } else {
      return new ListenComplete(this.source, this.path.popFront());
    }
  };

  return ListenComplete;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!Node} snap
 * @constructor
 * @implements {Operation}
 */


var Overwrite =
/** @class */
function () {
  function Overwrite(source, path, snap) {
    this.source = source;
    this.path = path;
    this.snap = snap;
    /** @inheritDoc */

    this.type = OperationType.OVERWRITE;
  }

  Overwrite.prototype.operationForChild = function (childName) {
    if (this.path.isEmpty()) {
      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
    } else {
      return new Overwrite(this.source, this.path.popFront(), this.snap);
    }
  };

  return Overwrite;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!ImmutableTree.<!Node>} children
 * @constructor
 * @implements {Operation}
 */


var Merge =
/** @class */
function () {
  function Merge(
  /** @inheritDoc */
  source,
  /** @inheritDoc */
  path,
  /** @inheritDoc */
  children) {
    this.source = source;
    this.path = path;
    this.children = children;
    /** @inheritDoc */

    this.type = OperationType.MERGE;
  }
  /**
   * @inheritDoc
   */


  Merge.prototype.operationForChild = function (childName) {
    if (this.path.isEmpty()) {
      var childTree = this.children.subtree(new Path(childName));

      if (childTree.isEmpty()) {
        // This child is unaffected
        return null;
      } else if (childTree.value) {
        // We have a snapshot for the child in question.  This becomes an overwrite of the child.
        return new Overwrite(this.source, Path.Empty, childTree.value);
      } else {
        // This is a merge at a deeper level
        return new Merge(this.source, Path.Empty, childTree);
      }
    } else {
      util.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
      return new Merge(this.source, this.path.popFront(), this.children);
    }
  };
  /**
   * @inheritDoc
   */


  Merge.prototype.toString = function () {
    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';
  };

  return Merge;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */


var CacheNode =
/** @class */
function () {
  /**
   * @param {!Node} node_
   * @param {boolean} fullyInitialized_
   * @param {boolean} filtered_
   */
  function CacheNode(node_, fullyInitialized_, filtered_) {
    this.node_ = node_;
    this.fullyInitialized_ = fullyInitialized_;
    this.filtered_ = filtered_;
  }
  /**
   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
   * @return {boolean}
   */


  CacheNode.prototype.isFullyInitialized = function () {
    return this.fullyInitialized_;
  };
  /**
   * Returns whether this node is potentially missing children due to a filter applied to the node
   * @return {boolean}
   */


  CacheNode.prototype.isFiltered = function () {
    return this.filtered_;
  };
  /**
   * @param {!Path} path
   * @return {boolean}
   */


  CacheNode.prototype.isCompleteForPath = function (path) {
    if (path.isEmpty()) {
      return this.isFullyInitialized() && !this.filtered_;
    }

    var childKey = path.getFront();
    return this.isCompleteForChild(childKey);
  };
  /**
   * @param {!string} key
   * @return {boolean}
   */


  CacheNode.prototype.isCompleteForChild = function (key) {
    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
  };
  /**
   * @return {!Node}
   */


  CacheNode.prototype.getNode = function () {
    return this.node_;
  };

  return CacheNode;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */


var ViewCache =
/** @class */
function () {
  /**
   *
   * @param {!CacheNode} eventCache_
   * @param {!CacheNode} serverCache_
   */
  function ViewCache(eventCache_, serverCache_) {
    this.eventCache_ = eventCache_;
    this.serverCache_ = serverCache_;
  }
  /**
   * @param {!Node} eventSnap
   * @param {boolean} complete
   * @param {boolean} filtered
   * @return {!ViewCache}
   */


  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
  };
  /**
   * @param {!Node} serverSnap
   * @param {boolean} complete
   * @param {boolean} filtered
   * @return {!ViewCache}
   */


  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
  };
  /**
   * @return {!CacheNode}
   */


  ViewCache.prototype.getEventCache = function () {
    return this.eventCache_;
  };
  /**
   * @return {?Node}
   */


  ViewCache.prototype.getCompleteEventSnap = function () {
    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;
  };
  /**
   * @return {!CacheNode}
   */


  ViewCache.prototype.getServerCache = function () {
    return this.serverCache_;
  };
  /**
   * @return {?Node}
   */


  ViewCache.prototype.getCompleteServerSnap = function () {
    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;
  };
  /**
   * @const
   * @type {ViewCache}
   */


  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,
  /*fullyInitialized=*/
  false,
  /*filtered=*/
  false), new CacheNode(ChildrenNode.EMPTY_NODE,
  /*fullyInitialized=*/
  false,
  /*filtered=*/
  false));
  return ViewCache;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @constructor
 * @struct
 * @param {!string} type The event type
 * @param {!Node} snapshotNode The data
 * @param {string=} childName The name for this child, if it's a child event
 * @param {Node=} oldSnap Used for intermediate processing of child changed events
 * @param {string=} prevName The name for the previous child, if applicable
 */


var Change =
/** @class */
function () {
  function Change(type, snapshotNode, childName, oldSnap, prevName) {
    this.type = type;
    this.snapshotNode = snapshotNode;
    this.childName = childName;
    this.oldSnap = oldSnap;
    this.prevName = prevName;
  }
  /**
   * @param {!Node} snapshot
   * @return {!Change}
   */


  Change.valueChange = function (snapshot) {
    return new Change(Change.VALUE, snapshot);
  };
  /**
   * @param {string} childKey
   * @param {!Node} snapshot
   * @return {!Change}
   */


  Change.childAddedChange = function (childKey, snapshot) {
    return new Change(Change.CHILD_ADDED, snapshot, childKey);
  };
  /**
   * @param {string} childKey
   * @param {!Node} snapshot
   * @return {!Change}
   */


  Change.childRemovedChange = function (childKey, snapshot) {
    return new Change(Change.CHILD_REMOVED, snapshot, childKey);
  };
  /**
   * @param {string} childKey
   * @param {!Node} newSnapshot
   * @param {!Node} oldSnapshot
   * @return {!Change}
   */


  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
  };
  /**
   * @param {string} childKey
   * @param {!Node} snapshot
   * @return {!Change}
   */


  Change.childMovedChange = function (childKey, snapshot) {
    return new Change(Change.CHILD_MOVED, snapshot, childKey);
  }; //event types

  /** Event type for a child added */


  Change.CHILD_ADDED = 'child_added';
  /** Event type for a child removed */

  Change.CHILD_REMOVED = 'child_removed';
  /** Event type for a child changed */

  Change.CHILD_CHANGED = 'child_changed';
  /** Event type for a child moved */

  Change.CHILD_MOVED = 'child_moved';
  /** Event type for a value change */

  Change.VALUE = 'value';
  return Change;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 *
 * @constructor
 * @implements {NodeFilter}
 * @param {!Index} index
 */


var IndexedFilter =
/** @class */
function () {
  function IndexedFilter(index_) {
    this.index_ = index_;
  }

  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.

    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
      // to avoid treating these cases as "nothing changed."
      if (oldChild.isEmpty() === newChild.isEmpty()) {
        // Nothing changed.
        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
        return snap;
      }
    }

    if (optChangeAccumulator != null) {
      if (newChild.isEmpty()) {
        if (snap.hasChild(key)) {
          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
        } else {
          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
        }
      } else if (oldChild.isEmpty()) {
        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
      } else {
        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
      }
    }

    if (snap.isLeafNode() && newChild.isEmpty()) {
      return snap;
    } else {
      // Make sure the node is indexed
      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
    }
  };
  /**
   * @inheritDoc
   */


  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
    if (optChangeAccumulator != null) {
      if (!oldSnap.isLeafNode()) {
        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
          if (!newSnap.hasChild(key)) {
            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
          }
        });
      }

      if (!newSnap.isLeafNode()) {
        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
          if (oldSnap.hasChild(key)) {
            var oldChild = oldSnap.getImmediateChild(key);

            if (!oldChild.equals(childNode)) {
              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
            }
          } else {
            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
          }
        });
      }
    }

    return newSnap.withIndex(this.index_);
  };
  /**
   * @inheritDoc
   */


  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
    if (oldSnap.isEmpty()) {
      return ChildrenNode.EMPTY_NODE;
    } else {
      return oldSnap.updatePriority(newPriority);
    }
  };
  /**
   * @inheritDoc
   */


  IndexedFilter.prototype.filtersNodes = function () {
    return false;
  };
  /**
   * @inheritDoc
   */


  IndexedFilter.prototype.getIndexedFilter = function () {
    return this;
  };
  /**
   * @inheritDoc
   */


  IndexedFilter.prototype.getIndex = function () {
    return this.index_;
  };

  return IndexedFilter;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ChildChangeAccumulator =
/** @class */
function () {
  function ChildChangeAccumulator() {
    this.changeMap = new Map();
  }

  ChildChangeAccumulator.prototype.trackChildChange = function (change) {
    var type = change.type;
    var childKey = change.childName;
    util.assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');
    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
    var oldChange = this.changeMap.get(childKey);

    if (oldChange) {
      var oldType = oldChange.type;

      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {
        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {
        this.changeMap.delete(childKey);
      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {
        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {
        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {
        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
      } else {
        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
      }
    } else {
      this.changeMap.set(childKey, change);
    }
  };

  ChildChangeAccumulator.prototype.getChanges = function () {
    return Array.from(this.changeMap.values());
  };

  return ChildChangeAccumulator;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of CompleteChildSource that never returns any additional children
 *
 * @private
 * @constructor
 * @implements CompleteChildSource
 */
// eslint-disable-next-line @typescript-eslint/class-name-casing


var NoCompleteChildSource_ =
/** @class */
function () {
  function NoCompleteChildSource_() {}
  /**
   * @inheritDoc
   */


  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
    return null;
  };
  /**
   * @inheritDoc
   */


  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
    return null;
  };

  return NoCompleteChildSource_;
}();
/**
 * Singleton instance.
 * @const
 * @type {!CompleteChildSource}
 */


var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 *
 *
 * @implements CompleteChildSource
 */

var WriteTreeCompleteChildSource =
/** @class */
function () {
  /**
   * @param {!WriteTreeRef} writes_
   * @param {!ViewCache} viewCache_
   * @param {?Node} optCompleteServerCache_
   */
  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
    if (optCompleteServerCache_ === void 0) {
      optCompleteServerCache_ = null;
    }

    this.writes_ = writes_;
    this.viewCache_ = viewCache_;
    this.optCompleteServerCache_ = optCompleteServerCache_;
  }
  /**
   * @inheritDoc
   */


  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
    var node = this.viewCache_.getEventCache();

    if (node.isCompleteForChild(childKey)) {
      return node.getNode().getImmediateChild(childKey);
    } else {
      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();
      return this.writes_.calcCompleteChild(childKey, serverNode);
    }
  };
  /**
   * @inheritDoc
   */


  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();
    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);

    if (nodes.length === 0) {
      return null;
    } else {
      return nodes[0];
    }
  };

  return WriteTreeCompleteChildSource;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @constructor
 * @struct
 */


var ProcessorResult =
/** @class */
function () {
  /**
   * @param {!ViewCache} viewCache
   * @param {!Array.<!Change>} changes
   */
  function ProcessorResult(viewCache, changes) {
    this.viewCache = viewCache;
    this.changes = changes;
  }

  return ProcessorResult;
}();
/**
 * @constructor
 */


var ViewProcessor =
/** @class */
function () {
  /**
   * @param {!NodeFilter} filter_
   */
  function ViewProcessor(filter_) {
    this.filter_ = filter_;
  }
  /**
   * @param {!ViewCache} viewCache
   */


  ViewProcessor.prototype.assertIndexed = function (viewCache) {
    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
  };
  /**
   * @param {!ViewCache} oldViewCache
   * @param {!Operation} operation
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeCache
   * @return {!ProcessorResult}
   */


  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
    var accumulator = new ChildChangeAccumulator();
    var newViewCache, filterServerNode;

    if (operation.type === OperationType.OVERWRITE) {
      var overwrite = operation;

      if (overwrite.source.fromUser) {
        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
      } else {
        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the
        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
        // again

        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();
        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
      }
    } else if (operation.type === OperationType.MERGE) {
      var merge = operation;

      if (merge.source.fromUser) {
        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
      } else {
        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered

        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();
        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
      }
    } else if (operation.type === OperationType.ACK_USER_WRITE) {
      var ackUserWrite = operation;

      if (!ackUserWrite.revert) {
        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
      } else {
        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
      }
    } else if (operation.type === OperationType.LISTEN_COMPLETE) {
      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
    } else {
      throw util.assertionError('Unknown operation type: ' + operation.type);
    }

    var changes = accumulator.getChanges();
    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
    return new ProcessorResult(newViewCache, changes);
  };
  /**
   * @param {!ViewCache} oldViewCache
   * @param {!ViewCache} newViewCache
   * @param {!Array.<!Change>} accumulator
   * @private
   */


  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
    var eventSnap = newViewCache.getEventCache();

    if (eventSnap.isFullyInitialized()) {
      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();

      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(
      /** @type {!Node} */
      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
        accumulator.push(Change.valueChange(
        /** @type {!Node} */
        newViewCache.getCompleteEventSnap()));
      }
    }
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} changePath
   * @param {!WriteTreeRef} writesCache
   * @param {!CompleteChildSource} source
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
    var oldEventSnap = viewCache.getEventCache();

    if (writesCache.shadowingWrite(changePath) != null) {
      // we have a shadowing write, ignore changes
      return viewCache;
    } else {
      var newEventCache = void 0,
          serverNode = void 0;

      if (changePath.isEmpty()) {
        // TODO: figure out how this plays with "sliding ack windows"
        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');

        if (viewCache.getServerCache().isFiltered()) {
          // We need to special case this, because we need to only apply writes to complete children, or
          // we might end up raising events for incomplete children. If the server data is filtered deep
          // writes cannot be guaranteed to be complete
          var serverCache = viewCache.getCompleteServerSnap();
          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
        } else {
          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
        }
      } else {
        var childKey = changePath.getFront();

        if (childKey === '.priority') {
          util.assert(changePath.getLength() === 1, "Can't have a priority with additional path components");
          var oldEventNode = oldEventSnap.getNode();
          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority

          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);

          if (updatedPriority != null) {
            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
          } else {
            // priority didn't change, keep old node
            newEventCache = oldEventSnap.getNode();
          }
        } else {
          var childChangePath = changePath.popFront(); // update child

          var newEventChild = void 0;

          if (oldEventSnap.isCompleteForChild(childKey)) {
            serverNode = viewCache.getServerCache().getNode();
            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);

            if (eventChildUpdate != null) {
              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
            } else {
              // Nothing changed, just keep the old child
              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
            }
          } else {
            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
          }

          if (newEventChild != null) {
            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
          } else {
            // no complete child available or no change
            newEventCache = oldEventSnap.getNode();
          }
        }
      }

      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
    }
  };
  /**
   * @param {!ViewCache} oldViewCache
   * @param {!Path} changePath
   * @param {!Node} changedSnap
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeCache
   * @param {boolean} filterServerNode
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
    var oldServerSnap = oldViewCache.getServerCache();
    var newServerCache;
    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();

    if (changePath.isEmpty()) {
      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
    } else {
      var childKey = changePath.getFront();

      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {
        // We don't update incomplete nodes with updates intended for other listeners
        return oldViewCache;
      }

      var childChangePath = changePath.popFront();
      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
      var newChildNode = childNode.updateChild(childChangePath, changedSnap);

      if (childKey === '.priority') {
        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
      } else {
        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
      }
    }

    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
  };
  /**
   * @param {!ViewCache} oldViewCache
   * @param {!Path} changePath
   * @param {!Node} changedSnap
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeCache
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
    var oldEventSnap = oldViewCache.getEventCache();
    var newViewCache, newEventCache;
    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);

    if (changePath.isEmpty()) {
      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
    } else {
      var childKey = changePath.getFront();

      if (childKey === '.priority') {
        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
      } else {
        var childChangePath = changePath.popFront();
        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
        var newChild = void 0;

        if (childChangePath.isEmpty()) {
          // Child overwrite, we can replace the child
          newChild = changedSnap;
        } else {
          var childNode = source.getCompleteChild(childKey);

          if (childNode != null) {
            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {
              // This is a priority update on an empty node. If this node exists on the server, the
              // server will send down the priority in the update, so ignore for now
              newChild = childNode;
            } else {
              newChild = childNode.updateChild(childChangePath, changedSnap);
            }
          } else {
            // There is no complete child node available
            newChild = ChildrenNode.EMPTY_NODE;
          }
        }

        if (!oldChild.equals(newChild)) {
          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
        } else {
          newViewCache = oldViewCache;
        }
      }
    }

    return newViewCache;
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {string} childKey
   * @return {boolean}
   * @private
   */


  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
    return viewCache.getEventCache().isCompleteForChild(childKey);
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} path
   * @param {ImmutableTree.<!Node>} changedChildren
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} serverCache
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.


    var curViewCache = viewCache;
    changedChildren.foreach(function (relativePath, childNode) {
      var writePath = path.child(relativePath);

      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
      }
    });
    changedChildren.foreach(function (relativePath, childNode) {
      var writePath = path.child(relativePath);

      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
      }
    });
    return curViewCache;
  };
  /**
   * @param {!Node} node
   * @param {ImmutableTree.<!Node>} merge
   * @return {!Node}
   * @private
   */


  ViewProcessor.prototype.applyMerge_ = function (node, merge) {
    merge.foreach(function (relativePath, childNode) {
      node = node.updateChild(relativePath, childNode);
    });
    return node;
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} path
   * @param {!ImmutableTree.<!Node>} changedChildren
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} serverCache
   * @param {boolean} filterServerNode
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
    // wait for the complete data update coming soon.


    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {
      return viewCache;
    } // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.


    var curViewCache = viewCache;
    var viewMergeTree;

    if (path.isEmpty()) {
      viewMergeTree = changedChildren;
    } else {
      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
    }

    var serverNode = viewCache.getServerCache().getNode();
    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
      if (serverNode.hasChild(childKey)) {
        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

        var newChild = _this.applyMerge_(serverChild, childTree);

        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
      }
    });
    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;

      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

        var newChild = _this.applyMerge_(serverChild, childMergeTree);

        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
      }
    });
    return curViewCache;
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} ackPath
   * @param {!ImmutableTree<!boolean>} affectedTree
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeCache
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
    if (writesCache.shadowingWrite(ackPath) != null) {
      return viewCache;
    } // Only filter server node if it is currently filtered


    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
    // now that it won't be shadowed.

    var serverCache = viewCache.getServerCache();

    if (affectedTree.value != null) {
      // This is an overwrite.
      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
      } else if (ackPath.isEmpty()) {
        // This is a goofy edge case where we are acking data at this location but don't have full data.  We
        // should just re-apply whatever we have in our cache as a merge.
        var changedChildren_1 = ImmutableTree.Empty;
        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
          changedChildren_1 = changedChildren_1.set(new Path(name), node);
        });
        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
      } else {
        return viewCache;
      }
    } else {
      // This is a merge.
      var changedChildren_2 = ImmutableTree.Empty;
      affectedTree.foreach(function (mergePath, value) {
        var serverCachePath = ackPath.child(mergePath);

        if (serverCache.isCompleteForPath(serverCachePath)) {
          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
        }
      });
      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
    }
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} path
   * @param {!WriteTreeRef} writesCache
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
    var oldServerNode = viewCache.getServerCache();
    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
  };
  /**
   * @param {!ViewCache} viewCache
   * @param {!Path} path
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeServerCache
   * @param {!ChildChangeAccumulator} accumulator
   * @return {!ViewCache}
   * @private
   */


  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
    var complete;

    if (writesCache.shadowingWrite(path) != null) {
      return viewCache;
    } else {
      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
      var oldEventCache = viewCache.getEventCache().getNode();
      var newEventCache = void 0;

      if (path.isEmpty() || path.getFront() === '.priority') {
        var newNode = void 0;

        if (viewCache.getServerCache().isFullyInitialized()) {
          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
        } else {
          var serverChildren = viewCache.getServerCache().getNode();
          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
          newNode = writesCache.calcCompleteEventChildren(serverChildren);
        }

        newNode = newNode;
        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
      } else {
        var childKey = path.getFront();
        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());

        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {
          newChild = oldEventCache.getImmediateChild(childKey);
        }

        if (newChild != null) {
          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
          // No complete child available, delete the existing one, if any
          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
        } else {
          newEventCache = oldEventCache;
        }

        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {
          // We might have reverted all child writes. Maybe the old event was a leaf node
          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());

          if (complete.isLeafNode()) {
            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
          }
        }
      }

      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;
      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
    }
  };

  return ViewProcessor;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 * @constructor
 */


var EventGenerator =
/** @class */
function () {
  /**
   *
   * @param {!Query} query_
   */
  function EventGenerator(query_) {
    this.query_ = query_;
    /**
     * @private
     * @type {!Index}
     */

    this.index_ = this.query_.getQueryParams().getIndex();
  }
  /**
   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
   *
   * Notes:
   *  - child_moved events will be synthesized at this time for any child_changed events that affect
   *    our index.
   *  - prevName will be calculated based on the index ordering.
   *
   * @param {!Array.<!Change>} changes
   * @param {!Node} eventCache
   * @param {!Array.<!EventRegistration>} eventRegistrations
   * @return {!Array.<!Event>}
   */


  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
    var _this = this;

    var events = [];
    var moves = [];
    changes.forEach(function (change) {
      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
      }
    });
    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
    return events;
  };
  /**
   * Given changes of a single change type, generate the corresponding events.
   *
   * @param {!Array.<!Event>} events
   * @param {!string} eventType
   * @param {!Array.<!Change>} changes
   * @param {!Array.<!EventRegistration>} registrations
   * @param {!Node} eventCache
   * @private
   */


  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
    var _this = this;

    var filteredChanges = changes.filter(function (change) {
      return change.type === eventType;
    });
    filteredChanges.sort(this.compareChanges_.bind(this));
    filteredChanges.forEach(function (change) {
      var materializedChange = _this.materializeSingleChange_(change, eventCache);

      registrations.forEach(function (registration) {
        if (registration.respondsTo(change.type)) {
          events.push(registration.createEvent(materializedChange, _this.query_));
        }
      });
    });
  };
  /**
   * @param {!Change} change
   * @param {!Node} eventCache
   * @return {!Change}
   * @private
   */


  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
    if (change.type === 'value' || change.type === 'child_removed') {
      return change;
    } else {
      change.prevName = eventCache.getPredecessorChildName(
      /** @type {!string} */
      change.childName, change.snapshotNode, this.index_);
      return change;
    }
  };
  /**
   * @param {!Change} a
   * @param {!Change} b
   * @return {number}
   * @private
   */


  EventGenerator.prototype.compareChanges_ = function (a, b) {
    if (a.childName == null || b.childName == null) {
      throw util.assertionError('Should only compare child_ events.');
    }

    var aWrapped = new NamedNode(a.childName, a.snapshotNode);
    var bWrapped = new NamedNode(b.childName, b.snapshotNode);
    return this.index_.compare(aWrapped, bWrapped);
  };

  return EventGenerator;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */


var View =
/** @class */
function () {
  /**
   *
   * @param {!Query} query_
   * @param {!ViewCache} initialViewCache
   */
  function View(query_, initialViewCache) {
    this.query_ = query_;
    this.eventRegistrations_ = [];
    var params = this.query_.getQueryParams();
    var indexFilter = new IndexedFilter(params.getIndex());
    var filter = params.getNodeFilter();
    /**
     * @type {ViewProcessor}
     * @private
     */

    this.processor_ = new ViewProcessor(filter);
    var initialServerCache = initialViewCache.getServerCache();
    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen

    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
    /**
     * @type {!ViewCache}
     * @private
     */

    this.viewCache_ = new ViewCache(newEventCache, newServerCache);
    /**
     * @type {!EventGenerator}
     * @private
     */

    this.eventGenerator_ = new EventGenerator(this.query_);
  }
  /**
   * @return {!Query}
   */


  View.prototype.getQuery = function () {
    return this.query_;
  };
  /**
   * @return {?Node}
   */


  View.prototype.getServerCache = function () {
    return this.viewCache_.getServerCache().getNode();
  };
  /**
   * @param {!Path} path
   * @return {?Node}
   */


  View.prototype.getCompleteServerCache = function (path) {
    var cache = this.viewCache_.getCompleteServerSnap();

    if (cache) {
      // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
      // we need to see if it contains the child we're interested in.
      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {
        return cache.getChild(path);
      }
    }

    return null;
  };
  /**
   * @return {boolean}
   */


  View.prototype.isEmpty = function () {
    return this.eventRegistrations_.length === 0;
  };
  /**
   * @param {!EventRegistration} eventRegistration
   */


  View.prototype.addEventRegistration = function (eventRegistration) {
    this.eventRegistrations_.push(eventRegistration);
  };
  /**
   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
   */


  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
    var cancelEvents = [];

    if (cancelError) {
      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
      var path_1 = this.query_.path;
      this.eventRegistrations_.forEach(function (registration) {
        cancelError
        /** @type {!Error} */
        = cancelError;
        var maybeEvent = registration.createCancelEvent(cancelError, path_1);

        if (maybeEvent) {
          cancelEvents.push(maybeEvent);
        }
      });
    }

    if (eventRegistration) {
      var remaining = [];

      for (var i = 0; i < this.eventRegistrations_.length; ++i) {
        var existing = this.eventRegistrations_[i];

        if (!existing.matches(eventRegistration)) {
          remaining.push(existing);
        } else if (eventRegistration.hasAnyCallback()) {
          // We're removing just this one
          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
          break;
        }
      }

      this.eventRegistrations_ = remaining;
    } else {
      this.eventRegistrations_ = [];
    }

    return cancelEvents;
  };
  /**
   * Applies the given Operation, updates our cache, and returns the appropriate events.
   *
   * @param {!Operation} operation
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} completeServerCache
   * @return {!Array.<!Event>}
   */


  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
    }

    var oldViewCache = this.viewCache_;
    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
    this.processor_.assertIndexed(result.viewCache);
    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
    this.viewCache_ = result.viewCache;
    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
  };
  /**
   * @param {!EventRegistration} registration
   * @return {!Array.<!Event>}
   */


  View.prototype.getInitialEvents = function (registration) {
    var eventSnap = this.viewCache_.getEventCache();
    var initialChanges = [];

    if (!eventSnap.getNode().isLeafNode()) {
      var eventNode = eventSnap.getNode();
      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
        initialChanges.push(Change.childAddedChange(key, childNode));
      });
    }

    if (eventSnap.isFullyInitialized()) {
      initialChanges.push(Change.valueChange(eventSnap.getNode()));
    }

    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
  };
  /**
   * @private
   * @param {!Array.<!Change>} changes
   * @param {!Node} eventCache
   * @param {EventRegistration=} eventRegistration
   * @return {!Array.<!Event>}
   */


  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;
    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
  };

  return View;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var __referenceConstructor$1;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */


var SyncPoint =
/** @class */
function () {
  function SyncPoint() {
    /**
     * The Views being tracked at this location in the tree, stored as a map where the key is a
     * queryId and the value is the View for that query.
     *
     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
     */
    this.views = new Map();
  }

  Object.defineProperty(SyncPoint, "__referenceConstructor", {
    get: function () {
      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
      return __referenceConstructor$1;
    },
    set: function (val) {
      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');
      __referenceConstructor$1 = val;
    },
    enumerable: false,
    configurable: true
  });

  SyncPoint.prototype.isEmpty = function () {
    return this.views.size === 0;
  };

  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
    var e_1, _a;

    var queryId = operation.source.queryId;

    if (queryId !== null) {
      var view = this.views.get(queryId);
      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');
      return view.applyOperation(operation, writesCache, optCompleteServerCache);
    } else {
      var events = [];

      try {
        for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var view = _c.value;
          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      return events;
    }
  };
  /**
   * Add an event callback for the specified query.
   *
   * @param {!Query} query
   * @param {!EventRegistration} eventRegistration
   * @param {!WriteTreeRef} writesCache
   * @param {?Node} serverCache Complete server cache, if we have it.
   * @param {boolean} serverCacheComplete
   * @return {!Array.<!Event>} Events to raise.
   */


  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
    var queryId = query.queryIdentifier();
    var view = this.views.get(queryId);

    if (!view) {
      // TODO: make writesCache take flag for complete server node
      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
      var eventCacheComplete = false;

      if (eventCache) {
        eventCacheComplete = true;
      } else if (serverCache instanceof ChildrenNode) {
        eventCache = writesCache.calcCompleteEventChildren(serverCache);
        eventCacheComplete = false;
      } else {
        eventCache = ChildrenNode.EMPTY_NODE;
        eventCacheComplete = false;
      }

      var viewCache = new ViewCache(new CacheNode(
      /** @type {!Node} */
      eventCache, eventCacheComplete, false), new CacheNode(
      /** @type {!Node} */
      serverCache, serverCacheComplete, false));
      view = new View(query, viewCache);
      this.views.set(queryId, view);
    } // This is guaranteed to exist now, we just created anything that was missing


    view.addEventRegistration(eventRegistration);
    return view.getInitialEvents(eventRegistration);
  };
  /**
   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
   *
   * If query is the default query, we'll check all views for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
   *
   * @param {!Query} query
   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
   */


  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
    var e_2, _a;

    var queryId = query.queryIdentifier();
    var removed = [];
    var cancelEvents = [];
    var hadCompleteView = this.hasCompleteView();

    if (queryId === 'default') {
      try {
        // When you do ref.off(...), we search all views for the registration to remove.
        for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = tslib.__read(_c.value, 2),
              viewQueryId = _d[0],
              view = _d[1];

          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

          if (view.isEmpty()) {
            this.views.delete(viewQueryId); // We'll deal with complete views later.

            if (!view.getQuery().getQueryParams().loadsAllData()) {
              removed.push(view.getQuery());
            }
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    } else {
      // remove the callback from the specific view.
      var view = this.views.get(queryId);

      if (view) {
        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

        if (view.isEmpty()) {
          this.views.delete(queryId); // We'll deal with complete views later.

          if (!view.getQuery().getQueryParams().loadsAllData()) {
            removed.push(view.getQuery());
          }
        }
      }
    }

    if (hadCompleteView && !this.hasCompleteView()) {
      // We removed our last complete view.
      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
    }

    return {
      removed: removed,
      events: cancelEvents
    };
  };

  SyncPoint.prototype.getQueryViews = function () {
    var e_3, _a;

    var result = [];

    try {
      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;

        if (!view.getQuery().getQueryParams().loadsAllData()) {
          result.push(view);
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    return result;
  };
  /**
   * @param path The path to the desired complete snapshot
   * @return A complete cache, if it exists
   */


  SyncPoint.prototype.getCompleteServerCache = function (path) {
    var e_4, _a;

    var serverCache = null;

    try {
      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;
        serverCache = serverCache || view.getCompleteServerCache(path);
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    return serverCache;
  };

  SyncPoint.prototype.viewForQuery = function (query) {
    var params = query.getQueryParams();

    if (params.loadsAllData()) {
      return this.getCompleteView();
    } else {
      var queryId = query.queryIdentifier();
      return this.views.get(queryId);
    }
  };

  SyncPoint.prototype.viewExistsForQuery = function (query) {
    return this.viewForQuery(query) != null;
  };

  SyncPoint.prototype.hasCompleteView = function () {
    return this.getCompleteView() != null;
  };

  SyncPoint.prototype.getCompleteView = function () {
    var e_5, _a;

    try {
      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;

        if (view.getQuery().getQueryParams().loadsAllData()) {
          return view;
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_5) throw e_5.error;
      }
    }

    return null;
  };

  return SyncPoint;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */


var CompoundWrite =
/** @class */
function () {
  function CompoundWrite(writeTree_) {
    this.writeTree_ = writeTree_;
  }

  CompoundWrite.prototype.addWrite = function (path, node) {
    if (path.isEmpty()) {
      return new CompoundWrite(new ImmutableTree(node));
    } else {
      var rootmost = this.writeTree_.findRootMostValueAndPath(path);

      if (rootmost != null) {
        var rootMostPath = rootmost.path;
        var value = rootmost.value;
        var relativePath = Path.relativePath(rootMostPath, path);
        value = value.updateChild(relativePath, node);
        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
      } else {
        var subtree = new ImmutableTree(node);
        var newWriteTree = this.writeTree_.setTree(path, subtree);
        return new CompoundWrite(newWriteTree);
      }
    }
  };

  CompoundWrite.prototype.addWrites = function (path, updates) {
    var newWrite = this;
    each(updates, function (childKey, node) {
      newWrite = newWrite.addWrite(path.child(childKey), node);
    });
    return newWrite;
  };
  /**
   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
   * location, which must be removed by calling this method with that path.
   *
   * @param path The path at which a write and all deeper writes should be removed
   * @return {!CompoundWrite} The new CompoundWrite with the removed path
   */


  CompoundWrite.prototype.removeWrite = function (path) {
    if (path.isEmpty()) {
      return CompoundWrite.Empty;
    } else {
      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
      return new CompoundWrite(newWriteTree);
    }
  };
  /**
   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
   * considered "complete".
   *
   * @param path The path to check for
   * @return Whether there is a complete write at that path
   */


  CompoundWrite.prototype.hasCompleteWrite = function (path) {
    return this.getCompleteNode(path) != null;
  };
  /**
   * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
   * writes from deeper paths, but will return child nodes from a more shallow path.
   *
   * @param path The path to get a complete write
   * @return The node if complete at that path, or null otherwise.
   */


  CompoundWrite.prototype.getCompleteNode = function (path) {
    var rootmost = this.writeTree_.findRootMostValueAndPath(path);

    if (rootmost != null) {
      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));
    } else {
      return null;
    }
  };
  /**
   * Returns all children that are guaranteed to be a complete overwrite.
   *
   * @return A list of all complete children.
   */


  CompoundWrite.prototype.getCompleteChildren = function () {
    var children = [];
    var node = this.writeTree_.value;

    if (node != null) {
      // If it's a leaf node, it has no children; so nothing to do.
      if (!node.isLeafNode()) {
        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
          children.push(new NamedNode(childName, childNode));
        });
      }
    } else {
      this.writeTree_.children.inorderTraversal(function (childName, childTree) {
        if (childTree.value != null) {
          children.push(new NamedNode(childName, childTree.value));
        }
      });
    }

    return children;
  };

  CompoundWrite.prototype.childCompoundWrite = function (path) {
    if (path.isEmpty()) {
      return this;
    } else {
      var shadowingNode = this.getCompleteNode(path);

      if (shadowingNode != null) {
        return new CompoundWrite(new ImmutableTree(shadowingNode));
      } else {
        return new CompoundWrite(this.writeTree_.subtree(path));
      }
    }
  };
  /**
   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
   * @return Whether this CompoundWrite is empty
   */


  CompoundWrite.prototype.isEmpty = function () {
    return this.writeTree_.isEmpty();
  };
  /**
   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
   * node
   * @param node The node to apply this CompoundWrite to
   * @return The node with all writes applied
   */


  CompoundWrite.prototype.apply = function (node) {
    return applySubtreeWrite(Path.Empty, this.writeTree_, node);
  };

  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
  return CompoundWrite;
}();

function applySubtreeWrite(relativePath, writeTree, node) {
  if (writeTree.value != null) {
    // Since there a write is always a leaf, we're done here
    return node.updateChild(relativePath, writeTree.value);
  } else {
    var priorityWrite_1 = null;
    writeTree.children.inorderTraversal(function (childKey, childTree) {
      if (childKey === '.priority') {
        // Apply priorities at the end so we don't update priorities for either empty nodes or forget
        // to apply priorities to empty nodes that are later filled
        util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
        priorityWrite_1 = childTree.value;
      } else {
        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
      }
    }); // If there was a priority write, we only apply it if the node is not empty

    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
    }

    return node;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
 * and addMerge(), and removed with removeWrite().
 *
 * @constructor
 */


var WriteTree =
/** @class */
function () {
  function WriteTree() {
    /**
     * A tree tracking the result of applying all visible writes.  This does not include transactions with
     * applyLocally=false or writes that are completely shadowed by other writes.
     *
     * @type {!CompoundWrite}
     * @private
     */
    this.visibleWrites_ = CompoundWrite.Empty;
    /**
     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
     * used by transactions).
     *
     * @type {!Array.<!WriteRecord>}
     * @private
     */

    this.allWrites_ = [];
    this.lastWriteId_ = -1;
  }
  /**
   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
   *
   * @param {!Path} path
   * @return {!WriteTreeRef}
   */


  WriteTree.prototype.childWrites = function (path) {
    return new WriteTreeRef(path, this);
  };
  /**
   * Record a new overwrite from user code.
   *
   * @param {!Path} path
   * @param {!Node} snap
   * @param {!number} writeId
   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
   */


  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');

    if (visible === undefined) {
      visible = true;
    }

    this.allWrites_.push({
      path: path,
      snap: snap,
      writeId: writeId,
      visible: visible
    });

    if (visible) {
      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
    }

    this.lastWriteId_ = writeId;
  };
  /**
   * Record a new merge from user code.
   *
   * @param {!Path} path
   * @param {!Object.<string, !Node>} changedChildren
   * @param {!number} writeId
   */


  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
    this.allWrites_.push({
      path: path,
      children: changedChildren,
      writeId: writeId,
      visible: true
    });
    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
    this.lastWriteId_ = writeId;
  };
  /**
   * @param {!number} writeId
   * @return {?WriteRecord}
   */


  WriteTree.prototype.getWrite = function (writeId) {
    for (var i = 0; i < this.allWrites_.length; i++) {
      var record = this.allWrites_[i];

      if (record.writeId === writeId) {
        return record;
      }
    }

    return null;
  };
  /**
   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
   *
   * @param {!number} writeId
   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
   * events as a result).
   */


  WriteTree.prototype.removeWrite = function (writeId) {
    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
    // out of order.
    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
    //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
    var _this = this;

    var idx = this.allWrites_.findIndex(function (s) {
      return s.writeId === writeId;
    });
    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
    var writeToRemove = this.allWrites_[idx];
    this.allWrites_.splice(idx, 1);
    var removedWriteWasVisible = writeToRemove.visible;
    var removedWriteOverlapsWithOtherWrites = false;
    var i = this.allWrites_.length - 1;

    while (removedWriteWasVisible && i >= 0) {
      var currentWrite = this.allWrites_[i];

      if (currentWrite.visible) {
        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {
          // The removed write was completely shadowed by a subsequent write.
          removedWriteWasVisible = false;
        } else if (writeToRemove.path.contains(currentWrite.path)) {
          // Either we're covering some writes or they're covering part of us (depending on which came first).
          removedWriteOverlapsWithOtherWrites = true;
        }
      }

      i--;
    }

    if (!removedWriteWasVisible) {
      return false;
    } else if (removedWriteOverlapsWithOtherWrites) {
      // There's some shadowing going on. Just rebuild the visible writes from scratch.
      this.resetTree_();
      return true;
    } else {
      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
      if (writeToRemove.snap) {
        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
      } else {
        var children = writeToRemove.children;
        each(children, function (childName) {
          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
        });
      }

      return true;
    }
  };
  /**
   * Return a complete snapshot for the given path if there's visible write data at that path, else null.
   * No server data is considered.
   *
   * @param {!Path} path
   * @return {?Node}
   */


  WriteTree.prototype.getCompleteWriteData = function (path) {
    return this.visibleWrites_.getCompleteNode(path);
  };
  /**
   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
   * writes), attempt to calculate a complete snapshot for the given path
   *
   * @param {!Path} treePath
   * @param {?Node} completeServerCache
   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
   * @return {?Node}
   */


  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    if (!writeIdsToExclude && !includeHiddenWrites) {
      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);

      if (shadowingNode != null) {
        return shadowingNode;
      } else {
        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);

        if (subMerge.isEmpty()) {
          return completeServerCache;
        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {
          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
          return null;
        } else {
          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
          return subMerge.apply(layeredCache);
        }
      }
    } else {
      var merge = this.visibleWrites_.childCompoundWrite(treePath);

      if (!includeHiddenWrites && merge.isEmpty()) {
        return completeServerCache;
      } else {
        // If the server cache is null, and we don't have a complete cache, we need to return null
        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {
          return null;
        } else {
          var filter = function (write) {
            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));
          };

          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
          return mergeAtPath.apply(layeredCache);
        }
      }
    }
  };
  /**
   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
   * Used when creating new views, to pre-fill their complete event children snapshot.
   *
   * @param {!Path} treePath
   * @param {?ChildrenNode} completeServerChildren
   * @return {!ChildrenNode}
   */


  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
    var completeChildren = ChildrenNode.EMPTY_NODE;
    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);

    if (topLevelSet) {
      if (!topLevelSet.isLeafNode()) {
        // we're shadowing everything. Return the children.
        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
        });
      }

      return completeChildren;
    } else if (completeServerChildren) {
      // Layer any children we have on top of this
      // We know we don't have a top-level set, so just enumerate existing children
      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);
        completeChildren = completeChildren.updateImmediateChild(childName, node);
      }); // Add any complete children we have from the set

      merge_1.getCompleteChildren().forEach(function (namedNode) {
        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
      });
      return completeChildren;
    } else {
      // We don't have anything to layer on top of. Layer on any children we have
      // Note that we can return an empty snap if we have a defined delete
      var merge = this.visibleWrites_.childCompoundWrite(treePath);
      merge.getCompleteChildren().forEach(function (namedNode) {
        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
      });
      return completeChildren;
    }
  };
  /**
   * Given that the underlying server data has updated, determine what, if anything, needs to be
   * applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events
   *
   * Either existingEventSnap or existingServerSnap must exist
   *
   * @param {!Path} treePath
   * @param {!Path} childPath
   * @param {?Node} existingEventSnap
   * @param {?Node} existingServerSnap
   * @return {?Node}
   */


  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
    var path = treePath.child(childPath);

    if (this.visibleWrites_.hasCompleteWrite(path)) {
      // At this point we can probably guarantee that we're in case 2, meaning no events
      // May need to check visibility while doing the findRootMostValueAndPath call
      return null;
    } else {
      // No complete shadowing. We're either partially shadowing or not shadowing at all.
      var childMerge = this.visibleWrites_.childCompoundWrite(path);

      if (childMerge.isEmpty()) {
        // We're not shadowing at all. Case 1
        return existingServerSnap.getChild(childPath);
      } else {
        // This could be more efficient if the serverNode + updates doesn't change the eventSnap
        // However this is tricky to find out, since user updates don't necessary change the server
        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
        // adds nodes, but doesn't change any existing writes. It is therefore not enough to
        // only check if the updates change the serverNode.
        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
        return childMerge.apply(existingServerSnap.getChild(childPath));
      }
    }
  };
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   *
   * @param {!Path} treePath
   * @param {!string} childKey
   * @param {!CacheNode} existingServerSnap
   * @return {?Node}
   */


  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
    var path = treePath.child(childKey);
    var shadowingNode = this.visibleWrites_.getCompleteNode(path);

    if (shadowingNode != null) {
      return shadowingNode;
    } else {
      if (existingServerSnap.isCompleteForChild(childKey)) {
        var childMerge = this.visibleWrites_.childCompoundWrite(path);
        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
      } else {
        return null;
      }
    }
  };
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   */


  WriteTree.prototype.shadowingWrite = function (path) {
    return this.visibleWrites_.getCompleteNode(path);
  };
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window.
   */


  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
    var toIterate;
    var merge = this.visibleWrites_.childCompoundWrite(treePath);
    var shadowingNode = merge.getCompleteNode(Path.Empty);

    if (shadowingNode != null) {
      toIterate = shadowingNode;
    } else if (completeServerData != null) {
      toIterate = merge.apply(completeServerData);
    } else {
      // no children to iterate on
      return [];
    }

    toIterate = toIterate.withIndex(index);

    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
      var nodes = [];
      var cmp = index.getCompare();
      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
      var next = iter.getNext();

      while (next && nodes.length < count) {
        if (cmp(next, startPost) !== 0) {
          nodes.push(next);
        }

        next = iter.getNext();
      }

      return nodes;
    } else {
      return [];
    }
  };

  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
    if (writeRecord.snap) {
      return writeRecord.path.contains(path);
    } else {
      for (var childName in writeRecord.children) {
        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {
          return true;
        }
      }

      return false;
    }
  };
  /**
   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
   */


  WriteTree.prototype.resetTree_ = function () {
    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);

    if (this.allWrites_.length > 0) {
      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
    } else {
      this.lastWriteId_ = -1;
    }
  };
  /**
   * The default filter used when constructing the tree. Keep everything that's visible.
   */


  WriteTree.DefaultFilter_ = function (write) {
    return write.visible;
  };
  /**
   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
   * event data at that path.
   */


  WriteTree.layerTree_ = function (writes, filter, treeRoot) {
    var compoundWrite = CompoundWrite.Empty;

    for (var i = 0; i < writes.length; ++i) {
      var write = writes[i]; // Theory, a later set will either:
      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction

      if (filter(write)) {
        var writePath = write.path;
        var relativePath = void 0;

        if (write.snap) {
          if (treeRoot.contains(writePath)) {
            relativePath = Path.relativePath(treeRoot, writePath);
            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
          } else if (writePath.contains(treeRoot)) {
            relativePath = Path.relativePath(writePath, treeRoot);
            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
          }
        } else if (write.children) {
          if (treeRoot.contains(writePath)) {
            relativePath = Path.relativePath(treeRoot, writePath);
            compoundWrite = compoundWrite.addWrites(relativePath, write.children);
          } else if (writePath.contains(treeRoot)) {
            relativePath = Path.relativePath(writePath, treeRoot);

            if (relativePath.isEmpty()) {
              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
            } else {
              var child = util.safeGet(write.children, relativePath.getFront());

              if (child) {
                // There exists a child in this node that matches the root path
                var deepNode = child.getChild(relativePath.popFront());
                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
              }
            }
          }
        } else {
          throw util.assertionError('WriteRecord should have .snap or .children');
        }
      }
    }

    return compoundWrite;
  };

  return WriteTree;
}();
/**
 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
 * just proxy to the underlying WriteTree.
 *
 * @constructor
 */


var WriteTreeRef =
/** @class */
function () {
  /**
   * @param {!Path} path
   * @param {!WriteTree} writeTree
   */
  function WriteTreeRef(path, writeTree) {
    this.treePath_ = path;
    this.writeTree_ = writeTree;
  }
  /**
   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
   * can lead to a more expensive calculation.
   *
   * @param {?Node} completeServerCache
   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
   * @return {?Node}
   */


  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
  };
  /**
   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
   * mix of the given server data and write data.
   *
   * @param {?ChildrenNode} completeServerChildren
   * @return {!ChildrenNode}
   */


  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
  };
  /**
   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
   * if anything, needs to be applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events should be raised
   *
   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
   *
   * @param {!Path} path
   * @param {?Node} existingEventSnap
   * @param {?Node} existingServerSnap
   * @return {?Node}
   */


  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
  };
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   *
   * @param {!Path} path
   * @return {?Node}
   */


  WriteTreeRef.prototype.shadowingWrite = function (path) {
    return this.writeTree_.shadowingWrite(this.treePath_.child(path));
  };
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window
   *
   * @param {?Node} completeServerData
   * @param {!NamedNode} startPost
   * @param {!number} count
   * @param {boolean} reverse
   * @param {!Index} index
   * @return {!Array.<!NamedNode>}
   */


  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
  };
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   *
   * @param {!string} childKey
   * @param {!CacheNode} existingServerCache
   * @return {?Node}
   */


  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
  };
  /**
   * Return a WriteTreeRef for a child.
   *
   * @param {string} childName
   * @return {!WriteTreeRef}
   */


  WriteTreeRef.prototype.child = function (childName) {
    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
  };

  return WriteTreeRef;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 * @constructor
 */


var SyncTree =
/** @class */
function () {
  /**
   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
   *   to server data.
   */
  function SyncTree(listenProvider_) {
    this.listenProvider_ = listenProvider_;
    /**
     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
     */

    this.syncPointTree_ = ImmutableTree.Empty;
    /**
     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
     */

    this.pendingWriteTree_ = new WriteTree();
    this.tagToQueryMap = new Map();
    this.queryToTagMap = new Map();
  }
  /**
   * Apply the data changes for a user-generated set() or transaction() call.
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
    // Record pending write.
    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);

    if (!visible) {
      return [];
    } else {
      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
    }
  };
  /**
   * Apply the data from a user-generated update() call
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
    // Record pending merge.
    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
  };
  /**
   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
   *
   * @param revert True if the given write failed and needs to be reverted
   * @return Events to raise.
   */


  SyncTree.prototype.ackUserWrite = function (writeId, revert) {
    if (revert === void 0) {
      revert = false;
    }

    var write = this.pendingWriteTree_.getWrite(writeId);
    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);

    if (!needToReevaluate) {
      return [];
    } else {
      var affectedTree_1 = ImmutableTree.Empty;

      if (write.snap != null) {
        // overwrite
        affectedTree_1 = affectedTree_1.set(Path.Empty, true);
      } else {
        each(write.children, function (pathString, node) {
          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
        });
      }

      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
    }
  };
  /**
   * Apply new server data for the specified path..
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyServerOverwrite = function (path, newData) {
    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
  };
  /**
   * Apply new server data to be merged in at the specified path.
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
  };
  /**
   * Apply a listen complete for a query
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyListenComplete = function (path) {
    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
  };
  /**
   * Apply new server data for the specified tagged query.
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
    var queryKey = this.queryKeyForTag_(tag);

    if (queryKey != null) {
      var r = SyncTree.parseQueryKey_(queryKey);
      var queryPath = r.path,
          queryId = r.queryId;
      var relativePath = Path.relativePath(queryPath, path);
      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
      return this.applyTaggedOperation_(queryPath, op);
    } else {
      // Query must have been removed already
      return [];
    }
  };
  /**
   * Apply server data to be merged in for the specified tagged query.
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
    var queryKey = this.queryKeyForTag_(tag);

    if (queryKey) {
      var r = SyncTree.parseQueryKey_(queryKey);
      var queryPath = r.path,
          queryId = r.queryId;
      var relativePath = Path.relativePath(queryPath, path);
      var changeTree = ImmutableTree.fromObject(changedChildren);
      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
      return this.applyTaggedOperation_(queryPath, op);
    } else {
      // We've already removed the query. No big deal, ignore the update
      return [];
    }
  };
  /**
   * Apply a listen complete for a tagged query
   *
   * @return Events to raise.
   */


  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
    var queryKey = this.queryKeyForTag_(tag);

    if (queryKey) {
      var r = SyncTree.parseQueryKey_(queryKey);
      var queryPath = r.path,
          queryId = r.queryId;
      var relativePath = Path.relativePath(queryPath, path);
      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
      return this.applyTaggedOperation_(queryPath, op);
    } else {
      // We've already removed the query. No big deal, ignore the update
      return [];
    }
  };
  /**
   * Add an event callback for the specified query.
   *
   * @return Events to raise.
   */


  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
    var path = query.path;
    var serverCache = null;
    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
    // Consider optimizing this once there's a better understanding of what actual behavior will be.

    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
      var relativePath = Path.relativePath(pathToSyncPoint, path);
      serverCache = serverCache || sp.getCompleteServerCache(relativePath);
      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();
    });
    var syncPoint = this.syncPointTree_.get(path);

    if (!syncPoint) {
      syncPoint = new SyncPoint();
      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
    } else {
      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();
      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
    }

    var serverCacheComplete;

    if (serverCache != null) {
      serverCacheComplete = true;
    } else {
      serverCacheComplete = false;
      serverCache = ChildrenNode.EMPTY_NODE;
      var subtree = this.syncPointTree_.subtree(path);
      subtree.foreachChild(function (childName, childSyncPoint) {
        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);

        if (completeCache) {
          serverCache = serverCache.updateImmediateChild(childName, completeCache);
        }
      });
    }

    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);

    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
      // We need to track a tag for this query
      var queryKey = SyncTree.makeQueryKey_(query);
      util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
      var tag = SyncTree.getNextQueryTag_();
      this.queryToTagMap.set(queryKey, tag);
      this.tagToQueryMap.set(tag, queryKey);
    }

    var writesCache = this.pendingWriteTree_.childWrites(path);
    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);

    if (!viewAlreadyExists && !foundAncestorDefaultView) {
      var view
      /** @type !View */
      = syncPoint.viewForQuery(query);
      events = events.concat(this.setupListener_(query, view));
    }

    return events;
  };
  /**
   * Remove event callback(s).
   *
   * If query is the default query, we'll check all queries for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
   *
   * @param eventRegistration If null, all callbacks are removed.
   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
   * @return Cancel events, if cancelError was provided.
   */


  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners


    var path = query.path;
    var maybeSyncPoint = this.syncPointTree_.get(path);
    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
    // not loadsAllData().

    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {
      /**
       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
       */
      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);

      if (maybeSyncPoint.isEmpty()) {
        this.syncPointTree_ = this.syncPointTree_.remove(path);
      }

      var removed = removedAndEvents.removed;
      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process
      // We may also not have removed a default listener, in which case all of the descendant listeners should already be
      // properly set up.
      //
      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
      // queryId === 'default'

      var removingDefault = -1 !== removed.findIndex(function (query) {
        return query.getQueryParams().loadsAllData();
      });
      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
        return parentSyncPoint.hasCompleteView();
      });

      if (removingDefault && !covered) {
        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the
        // removal

        if (!subtree.isEmpty()) {
          // We need to fold over our subtree and collect the listeners to send
          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.

          for (var i = 0; i < newViews.length; ++i) {
            var view = newViews[i],
                newQuery = view.getQuery();
            var listener = this.createListenerForView_(view);
            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
          }
        }
      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
      // Also, note that if we have a cancelError, it's already been removed at the provider level.


      if (!covered && removed.length > 0 && !cancelError) {
        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
        // default. Otherwise, we need to iterate through and cancel each individual query
        if (removingDefault) {
          // We don't tag default listeners
          var defaultTag = null;
          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
        } else {
          removed.forEach(function (queryToRemove) {
            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));

            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
          });
        }
      } // Now, clear all of the tags we're tracking for the removed listens


      this.removeTags_(removed);
    }

    return cancelEvents;
  };
  /**
   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
   * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
   *     <incremented total> as the write is applied locally and then acknowledged at the server.
   *
   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
   *
   * @param path The path to the data we want
   * @param writeIdsToExclude A specific set to be excluded
   */


  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
    var includeHiddenSets = true;
    var writeTree = this.pendingWriteTree_;
    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
      var relativePath = Path.relativePath(pathSoFar, path);
      var serverCache = syncPoint.getCompleteServerCache(relativePath);

      if (serverCache) {
        return serverCache;
      }
    });
    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
  };
  /**
   * This collapses multiple unfiltered views into a single view, since we only need a single
   * listener for them.
   */


  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
        var completeView = maybeChildSyncPoint.getCompleteView();
        return [completeView];
      } else {
        // No complete view here, flatten any deeper listens into an array
        var views_1 = [];

        if (maybeChildSyncPoint) {
          views_1 = maybeChildSyncPoint.getQueryViews();
        }

        each(childMap, function (_key, childViews) {
          views_1 = views_1.concat(childViews);
        });
        return views_1;
      }
    });
  };

  SyncTree.prototype.removeTags_ = function (queries) {
    for (var j = 0; j < queries.length; ++j) {
      var removedQuery = queries[j];

      if (!removedQuery.getQueryParams().loadsAllData()) {
        // We should have a tag for this
        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
        this.queryToTagMap.delete(removedQueryKey);
        this.tagToQueryMap.delete(removedQueryTag);
      }
    }
  };
  /**
   * Normalizes a query to a query we send the server for listening
   *
   * @return The normalized query
   */


  SyncTree.queryForListening_ = function (query) {
    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {
      // We treat queries that load all data as default queries
      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
      // from Query
      return query.getRef();
    } else {
      return query;
    }
  };
  /**
   * For a given new listen, manage the de-duplication of outstanding subscriptions.
   *
   * @return This method can return events to support synchronous data sources
   */


  SyncTree.prototype.setupListener_ = function (query, view) {
    var path = query.path;
    var tag = this.tagForQuery_(query);
    var listener = this.createListenerForView_(view);
    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
    // may need to shadow other listens as well.

    if (tag) {
      util.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
    } else {
      // Shadow everything at or below this location, this is a default listener.
      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
          return [maybeChildSyncPoint.getCompleteView().getQuery()];
        } else {
          // No default listener here, flatten any deeper queries into an array
          var queries_1 = [];

          if (maybeChildSyncPoint) {
            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {
              return view.getQuery();
            }));
          }

          each(childMap, function (_key, childQueries) {
            queries_1 = queries_1.concat(childQueries);
          });
          return queries_1;
        }
      });

      for (var i = 0; i < queriesToStop.length; ++i) {
        var queryToStop = queriesToStop[i];
        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
      }
    }

    return events;
  };

  SyncTree.prototype.createListenerForView_ = function (view) {
    var _this = this;

    var query = view.getQuery();
    var tag = this.tagForQuery_(query);
    return {
      hashFn: function () {
        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
        return cache.hash();
      },
      onComplete: function (status) {
        if (status === 'ok') {
          if (tag) {
            return _this.applyTaggedListenComplete(query.path, tag);
          } else {
            return _this.applyListenComplete(query.path);
          }
        } else {
          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
          // Note that this may need to be scoped to just this listener if we change permissions on filtered children
          var error = errorForServerCode(status, query);
          return _this.removeEventRegistration(query,
          /*eventRegistration*/
          null, error);
        }
      }
    };
  };
  /**
   * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
   */


  SyncTree.makeQueryKey_ = function (query) {
    return query.path.toString() + '$' + query.queryIdentifier();
  };
  /**
   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
   */


  SyncTree.parseQueryKey_ = function (queryKey) {
    var splitIndex = queryKey.indexOf('$');
    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
    return {
      queryId: queryKey.substr(splitIndex + 1),
      path: new Path(queryKey.substr(0, splitIndex))
    };
  };
  /**
   * Return the query associated with the given tag, if we have one
   */


  SyncTree.prototype.queryKeyForTag_ = function (tag) {
    return this.tagToQueryMap.get(tag);
  };
  /**
   * Return the tag associated with the given query.
   */


  SyncTree.prototype.tagForQuery_ = function (query) {
    var queryKey = SyncTree.makeQueryKey_(query);
    return this.queryToTagMap.get(queryKey);
  };
  /**
   * Static accessor for query tags.
   */


  SyncTree.getNextQueryTag_ = function () {
    return SyncTree.nextQueryTag_++;
  };
  /**
   * A helper method to apply tagged operations
   */


  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
    var syncPoint = this.syncPointTree_.get(queryPath);
    util.assert(syncPoint, "Missing sync point for query tag that we're tracking");
    var writesCache = this.pendingWriteTree_.childWrites(queryPath);
    return syncPoint.applyOperation(operation, writesCache,
    /*serverCache=*/
    null);
  };
  /**
   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
   *
   * NOTES:
   * - Descendant SyncPoints will be visited first (since we raise events depth-first).
   *
   * - We call applyOperation() on each SyncPoint passing three things:
   *   1. A version of the Operation that has been made relative to the SyncPoint location.
   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
   *   3. A snapshot Node with cached server data, if we have it.
   *
   * - We concatenate all of the events returned by each SyncPoint and return the result.
   */


  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
    return this.applyOperationHelper_(operation, this.syncPointTree_,
    /*serverCache=*/
    null, this.pendingWriteTree_.childWrites(Path.Empty));
  };
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */


  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
    if (operation.path.isEmpty()) {
      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
    } else {
      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.

      if (serverCache == null && syncPoint != null) {
        serverCache = syncPoint.getCompleteServerCache(Path.Empty);
      }

      var events = [];
      var childName = operation.path.getFront();
      var childOperation = operation.operationForChild(childName);
      var childTree = syncPointTree.children.get(childName);

      if (childTree && childOperation) {
        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
        var childWritesCache = writesCache.child(childName);
        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
      }

      if (syncPoint) {
        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
      }

      return events;
    }
  };
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */


  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
    var _this = this;

    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.

    if (serverCache == null && syncPoint != null) {
      serverCache = syncPoint.getCompleteServerCache(Path.Empty);
    }

    var events = [];
    syncPointTree.children.inorderTraversal(function (childName, childTree) {
      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
      var childWritesCache = writesCache.child(childName);
      var childOperation = operation.operationForChild(childName);

      if (childOperation) {
        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
      }
    });

    if (syncPoint) {
      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
    }

    return events;
  };
  /**
   * Static tracker for next query tag.
   */


  SyncTree.nextQueryTag_ = 1;
  return SyncTree;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 *
 * @constructor
 */


var SnapshotHolder =
/** @class */
function () {
  function SnapshotHolder() {
    this.rootNode_ = ChildrenNode.EMPTY_NODE;
  }

  SnapshotHolder.prototype.getNode = function (path) {
    return this.rootNode_.getChild(path);
  };

  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
  };

  return SnapshotHolder;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Tracks a collection of stats.
 *
 * @constructor
 */


var StatsCollection =
/** @class */
function () {
  function StatsCollection() {
    this.counters_ = {};
  }

  StatsCollection.prototype.incrementCounter = function (name, amount) {
    if (amount === void 0) {
      amount = 1;
    }

    if (!util.contains(this.counters_, name)) {
      this.counters_[name] = 0;
    }

    this.counters_[name] += amount;
  };

  StatsCollection.prototype.get = function () {
    return util.deepCopy(this.counters_);
  };

  return StatsCollection;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var StatsManager =
/** @class */
function () {
  function StatsManager() {}

  StatsManager.getCollection = function (repoInfo) {
    var hashString = repoInfo.toString();

    if (!this.collections_[hashString]) {
      this.collections_[hashString] = new StatsCollection();
    }

    return this.collections_[hashString];
  };

  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
    var hashString = repoInfo.toString();

    if (!this.reporters_[hashString]) {
      this.reporters_[hashString] = creatorFunction();
    }

    return this.reporters_[hashString];
  };

  StatsManager.collections_ = {};
  StatsManager.reporters_ = {};
  return StatsManager;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ The collection to "listen" to.
 * @constructor
 */


var StatsListener =
/** @class */
function () {
  function StatsListener(collection_) {
    this.collection_ = collection_;
    this.last_ = null;
  }

  StatsListener.prototype.get = function () {
    var newStats = this.collection_.get();

    var delta = tslib.__assign({}, newStats);

    if (this.last_) {
      each(this.last_, function (stat, value) {
        delta[stat] = delta[stat] - value;
      });
    }

    this.last_ = newStats;
    return delta;
  };

  return StatsListener;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.


var FIRST_STATS_MIN_TIME = 10 * 1000;
var FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.

var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
/**
 * @constructor
 */

var StatsReporter =
/** @class */
function () {
  /**
   * @param collection
   * @param server_
   */
  function StatsReporter(collection, server_) {
    this.server_ = server_;
    this.statsToReport_ = {};
    this.statsListener_ = new StatsListener(collection);
    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
  }

  StatsReporter.prototype.includeStat = function (stat) {
    this.statsToReport_[stat] = true;
  };

  StatsReporter.prototype.reportStats_ = function () {
    var _this = this;

    var stats = this.statsListener_.get();
    var reportedStats = {};
    var haveStatsToReport = false;
    each(stats, function (stat, value) {
      if (value > 0 && util.contains(_this.statsToReport_, stat)) {
        reportedStats[stat] = value;
        haveStatsToReport = true;
      }
    });

    if (haveStatsToReport) {
      this.server_.reportStats(reportedStats);
    } // queue our next run.


    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
  };

  return StatsReporter;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */


var EventQueue =
/** @class */
function () {
  function EventQueue() {
    /**
     * @private
     * @type {!Array.<EventList>}
     */
    this.eventLists_ = [];
    /**
     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
     * @private
     * @type {!number}
     */

    this.recursionDepth_ = 0;
  }
  /**
   * @param {!Array.<Event>} eventDataList The new events to queue.
   */


  EventQueue.prototype.queueEvents = function (eventDataList) {
    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
    var currList = null;

    for (var i = 0; i < eventDataList.length; i++) {
      var eventData = eventDataList[i];
      var eventPath = eventData.getPath();

      if (currList !== null && !eventPath.equals(currList.getPath())) {
        this.eventLists_.push(currList);
        currList = null;
      }

      if (currList === null) {
        currList = new EventList(eventPath);
      }

      currList.add(eventData);
    }

    if (currList) {
      this.eventLists_.push(currList);
    }
  };
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones)
   * for the specified path.
   *
   * It is assumed that the new events are all for the specified path.
   *
   * @param {!Path} path The path to raise events for.
   * @param {!Array.<Event>} eventDataList The new events to raise.
   */


  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
    this.queueEvents(eventDataList);
    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
      return eventPath.equals(path);
    });
  };
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones) for
   * locations related to the specified change path (i.e. all ancestors and descendants).
   *
   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
   *
   * @param {!Path} changedPath The path to raise events for.
   * @param {!Array.<!Event>} eventDataList The events to raise
   */


  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
    this.queueEvents(eventDataList);
    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
      return eventPath.contains(changedPath) || changedPath.contains(eventPath);
    });
  };
  /**
   * @param {!function(!Path):boolean} predicate
   * @private
   */


  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
    this.recursionDepth_++;
    var sentAll = true;

    for (var i = 0; i < this.eventLists_.length; i++) {
      var eventList = this.eventLists_[i];

      if (eventList) {
        var eventPath = eventList.getPath();

        if (predicate(eventPath)) {
          this.eventLists_[i].raise();
          this.eventLists_[i] = null;
        } else {
          sentAll = false;
        }
      }
    }

    if (sentAll) {
      this.eventLists_ = [];
    }

    this.recursionDepth_--;
  };

  return EventQueue;
}();
/**
 * @param {!Path} path
 * @constructor
 */


var EventList =
/** @class */
function () {
  function EventList(path_) {
    this.path_ = path_;
    /**
     * @type {!Array.<Event>}
     * @private
     */

    this.events_ = [];
  }
  /**
   * @param {!Event} eventData
   */


  EventList.prototype.add = function (eventData) {
    this.events_.push(eventData);
  };
  /**
   * Iterates through the list and raises each event
   */


  EventList.prototype.raise = function () {
    for (var i = 0; i < this.events_.length; i++) {
      var eventData = this.events_[i];

      if (eventData !== null) {
        this.events_[i] = null;
        var eventFn = eventData.getEventRunner();

        if (logger) {
          log('event: ' + eventData.toString());
        }

        exceptionGuard(eventFn);
      }
    }
  };
  /**
   * @return {!Path}
   */


  EventList.prototype.getPath = function () {
    return this.path_;
  };

  return EventList;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */


var EventEmitter =
/** @class */
function () {
  /**
   * @param {!Array.<string>} allowedEvents_
   */
  function EventEmitter(allowedEvents_) {
    this.allowedEvents_ = allowedEvents_;
    this.listeners_ = {};
    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
  }
  /**
   * To be called by derived classes to trigger events.
   * @param {!string} eventType
   * @param {...*} varArgs
   */


  EventEmitter.prototype.trigger = function (eventType) {
    var varArgs = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      varArgs[_i - 1] = arguments[_i];
    }

    if (Array.isArray(this.listeners_[eventType])) {
      // Clone the list, since callbacks could add/remove listeners.
      var listeners = tslib.__spread(this.listeners_[eventType]);

      for (var i = 0; i < listeners.length; i++) {
        listeners[i].callback.apply(listeners[i].context, varArgs);
      }
    }
  };

  EventEmitter.prototype.on = function (eventType, callback, context) {
    this.validateEventType_(eventType);
    this.listeners_[eventType] = this.listeners_[eventType] || [];
    this.listeners_[eventType].push({
      callback: callback,
      context: context
    });
    var eventData = this.getInitialEvent(eventType);

    if (eventData) {
      callback.apply(context, eventData);
    }
  };

  EventEmitter.prototype.off = function (eventType, callback, context) {
    this.validateEventType_(eventType);
    var listeners = this.listeners_[eventType] || [];

    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
        listeners.splice(i, 1);
        return;
      }
    }
  };

  EventEmitter.prototype.validateEventType_ = function (eventType) {
    util.assert(this.allowedEvents_.find(function (et) {
      return et === eventType;
    }), 'Unknown event: ' + eventType);
  };

  return EventEmitter;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {EventEmitter}
 */


var VisibilityMonitor =
/** @class */
function (_super) {
  tslib.__extends(VisibilityMonitor, _super);

  function VisibilityMonitor() {
    var _this = _super.call(this, ['visible']) || this;

    var hidden;
    var visibilityChange;

    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {
      if (typeof document['hidden'] !== 'undefined') {
        // Opera 12.10 and Firefox 18 and later support
        visibilityChange = 'visibilitychange';
        hidden = 'hidden';
      } else if (typeof document['mozHidden'] !== 'undefined') {
        visibilityChange = 'mozvisibilitychange';
        hidden = 'mozHidden';
      } else if (typeof document['msHidden'] !== 'undefined') {
        visibilityChange = 'msvisibilitychange';
        hidden = 'msHidden';
      } else if (typeof document['webkitHidden'] !== 'undefined') {
        visibilityChange = 'webkitvisibilitychange';
        hidden = 'webkitHidden';
      }
    } // Initially, we always assume we are visible. This ensures that in browsers
    // without page visibility support or in cases where we are never visible
    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
    // reconnects


    _this.visible_ = true;

    if (visibilityChange) {
      document.addEventListener(visibilityChange, function () {
        var visible = !document[hidden];

        if (visible !== _this.visible_) {
          _this.visible_ = visible;

          _this.trigger('visible', visible);
        }
      }, false);
    }

    return _this;
  }

  VisibilityMonitor.getInstance = function () {
    return new VisibilityMonitor();
  };
  /**
   * @param {!string} eventType
   * @return {Array.<boolean>}
   */


  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
    return [this.visible_];
  };

  return VisibilityMonitor;
}(EventEmitter);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 *
 * @extends {EventEmitter}
 */


var OnlineMonitor =
/** @class */
function (_super) {
  tslib.__extends(OnlineMonitor, _super);

  function OnlineMonitor() {
    var _this = _super.call(this, ['online']) || this;

    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
    // It would seem that the 'online' event does not always fire consistently. So we disable it
    // for Cordova.

    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {
      window.addEventListener('online', function () {
        if (!_this.online_) {
          _this.online_ = true;

          _this.trigger('online', true);
        }
      }, false);
      window.addEventListener('offline', function () {
        if (_this.online_) {
          _this.online_ = false;

          _this.trigger('online', false);
        }
      }, false);
    }

    return _this;
  }

  OnlineMonitor.getInstance = function () {
    return new OnlineMonitor();
  };
  /**
   * @param {!string} eventType
   * @return {Array.<boolean>}
   */


  OnlineMonitor.prototype.getInitialEvent = function (eventType) {
    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);
    return [this.online_];
  };
  /**
   * @return {boolean}
   */


  OnlineMonitor.prototype.currentlyOnline = function () {
    return this.online_;
  };

  return OnlineMonitor;
}(EventEmitter);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 * @constructor
 */


var PacketReceiver =
/** @class */
function () {
  /**
   * @param onMessage_
   */
  function PacketReceiver(onMessage_) {
    this.onMessage_ = onMessage_;
    this.pendingResponses = [];
    this.currentResponseNum = 0;
    this.closeAfterResponse = -1;
    this.onClose = null;
  }

  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
    this.closeAfterResponse = responseNum;
    this.onClose = callback;

    if (this.closeAfterResponse < this.currentResponseNum) {
      this.onClose();
      this.onClose = null;
    }
  };
  /**
   * Each message from the server comes with a response number, and an array of data. The responseNumber
   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
   * browsers will respond in the same order as the requests we sent
   * @param {number} requestNum
   * @param {Array} data
   */


  PacketReceiver.prototype.handleResponse = function (requestNum, data) {
    var _this = this;

    this.pendingResponses[requestNum] = data;

    var _loop_1 = function () {
      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
      delete this_1.pendingResponses[this_1.currentResponseNum];

      var _loop_2 = function (i) {
        if (toProcess[i]) {
          exceptionGuard(function () {
            _this.onMessage_(toProcess[i]);
          });
        }
      };

      for (var i = 0; i < toProcess.length; ++i) {
        _loop_2(i);
      }

      if (this_1.currentResponseNum === this_1.closeAfterResponse) {
        if (this_1.onClose) {
          this_1.onClose();
          this_1.onClose = null;
        }

        return "break";
      }

      this_1.currentResponseNum++;
    };

    var this_1 = this;

    while (this.pendingResponses[this.currentResponseNum]) {
      var state_1 = _loop_1();

      if (state_1 === "break") break;
    }
  };

  return PacketReceiver;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// URL query parameters associated with longpolling


var FIREBASE_LONGPOLL_START_PARAM = 'start';
var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
var FIREBASE_LONGPOLL_ID_PARAM = 'id';
var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.

var MAX_URL_DATA_SIZE = 1870;
var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=

var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 * @const
 * @type {number}
 */

var KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 * @const
 * @type {number}
 */

var LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 *
 * @constructor
 * @implements {Transport}
 */

var BrowserPollConnection =
/** @class */
function () {
  /**
   * @param connId An identifier for this connection, used for logging
   * @param repoInfo The info for the endpoint to send data to.
   * @param applicationId The Firebase App ID for this project.
   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
   *                                         transport session
   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
   *                                     connection previously
   */
  function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
    this.connId = connId;
    this.repoInfo = repoInfo;
    this.applicationId = applicationId;
    this.transportSessionId = transportSessionId;
    this.lastSessionId = lastSessionId;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.everConnected_ = false;
    this.log_ = logWrapper(connId);
    this.stats_ = StatsManager.getCollection(repoInfo);

    this.urlFn = function (params) {
      return repoInfo.connectionURL(LONG_POLLING, params);
    };
  }
  /**
   *
   * @param {function(Object)} onMessage Callback when messages arrive
   * @param {function()} onDisconnect Callback with connection lost.
   */


  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
    var _this = this;

    this.curSegmentNum = 0;
    this.onDisconnect_ = onDisconnect;
    this.myPacketOrderer = new PacketReceiver(onMessage);
    this.isClosed_ = false;
    this.connectTimeoutTimer_ = setTimeout(function () {
      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache


      _this.onClosed_();

      _this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.

    executeWhenDOMReady(function () {
      if (_this.isClosed_) {
        return;
      } //Set up a callback that gets triggered once a connection is set up.


      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        var _a = tslib.__read(args, 5),
            command = _a[0],
            arg1 = _a[1],
            arg2 = _a[2],
            arg3 = _a[3],
            arg4 = _a[4];

        _this.incrementIncomingBytes_(args);

        if (!_this.scriptTagHolder) {
          return; // we closed the connection.
        }

        if (_this.connectTimeoutTimer_) {
          clearTimeout(_this.connectTimeoutTimer_);
          _this.connectTimeoutTimer_ = null;
        }

        _this.everConnected_ = true;

        if (command === FIREBASE_LONGPOLL_START_PARAM) {
          _this.id = arg1;
          _this.password = arg2;
        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
          // Don't clear the host cache. We got a response from the server, so we know it's reachable
          if (arg1) {
            // We aren't expecting any more data (other than what the server's already in the process of sending us
            // through our already open polls), so don't send any more.
            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive
            // all of the responses up to this one before closing

            _this.myPacketOrderer.closeAfter(arg1, function () {
              _this.onClosed_();
            });
          } else {
            _this.onClosed_();
          }
        } else {
          throw new Error('Unrecognized command received: ' + command);
        }
      }, function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        var _a = tslib.__read(args, 2),
            pN = _a[0],
            data = _a[1];

        _this.incrementIncomingBytes_(args);

        _this.myPacketOrderer.handleResponse(pN, data);
      }, function () {
        _this.onClosed_();
      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
      //from cache.

      var urlParams = {};
      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);

      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
      }

      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;

      if (_this.transportSessionId) {
        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
      }

      if (_this.lastSessionId) {
        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
      }

      if (_this.applicationId) {
        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
      }

      if (typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {
        urlParams[REFERER_PARAM] = FORGE_REF;
      }

      var connectURL = _this.urlFn(urlParams);

      _this.log_('Connecting via long-poll to ' + connectURL);

      _this.scriptTagHolder.addTag(connectURL, function () {
        /* do nothing */
      });
    });
  };
  /**
   * Call this when a handshake has completed successfully and we want to consider the connection established
   */


  BrowserPollConnection.prototype.start = function () {
    this.scriptTagHolder.startLongPoll(this.id, this.password);
    this.addDisconnectPingFrame(this.id, this.password);
  };
  /**
   * Forces long polling to be considered as a potential transport
   */


  BrowserPollConnection.forceAllow = function () {
    BrowserPollConnection.forceAllow_ = true;
  };
  /**
   * Forces longpolling to not be considered as a potential transport
   */


  BrowserPollConnection.forceDisallow = function () {
    BrowserPollConnection.forceDisallow_ = true;
  }; // Static method, use string literal so it can be accessed in a generic way


  BrowserPollConnection.isAvailable = function () {
    if (util.isNodeSdk()) {
      return false;
    } else if (BrowserPollConnection.forceAllow_) {
      return true;
    } else {
      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
    }
  };
  /**
   * No-op for polling
   */


  BrowserPollConnection.prototype.markConnectionHealthy = function () {};
  /**
   * Stops polling and cleans up the iframe
   * @private
   */


  BrowserPollConnection.prototype.shutdown_ = function () {
    this.isClosed_ = true;

    if (this.scriptTagHolder) {
      this.scriptTagHolder.close();
      this.scriptTagHolder = null;
    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.


    if (this.myDisconnFrame) {
      document.body.removeChild(this.myDisconnFrame);
      this.myDisconnFrame = null;
    }

    if (this.connectTimeoutTimer_) {
      clearTimeout(this.connectTimeoutTimer_);
      this.connectTimeoutTimer_ = null;
    }
  };
  /**
   * Triggered when this transport is closed
   * @private
   */


  BrowserPollConnection.prototype.onClosed_ = function () {
    if (!this.isClosed_) {
      this.log_('Longpoll is closing itself');
      this.shutdown_();

      if (this.onDisconnect_) {
        this.onDisconnect_(this.everConnected_);
        this.onDisconnect_ = null;
      }
    }
  };
  /**
   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
   * that we've left.
   */


  BrowserPollConnection.prototype.close = function () {
    if (!this.isClosed_) {
      this.log_('Longpoll is being closed.');
      this.shutdown_();
    }
  };
  /**
   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
   * broken into chunks (since URLs have a small maximum length).
   * @param {!Object} data The JSON data to transmit.
   */


  BrowserPollConnection.prototype.send = function (data) {
    var dataStr = util.stringify(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data

    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request
    //up into multiple pieces if it doesn't fit in one request.

    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
    //of segments so that we can reassemble the packet on the server.

    for (var i = 0; i < dataSegs.length; i++) {
      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
      this.curSegmentNum++;
    }
  };
  /**
   * This is how we notify the server that we're leaving.
   * We aren't able to send requests with DHTML on a window close event, but we can
   * trigger XHR requests in some browsers (everything but Opera basically).
   * @param {!string} id
   * @param {!string} pw
   */


  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
    if (util.isNodeSdk()) {
      return;
    }

    this.myDisconnFrame = document.createElement('iframe');
    var urlParams = {};
    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
    this.myDisconnFrame.src = this.urlFn(urlParams);
    this.myDisconnFrame.style.display = 'none';
    document.body.appendChild(this.myDisconnFrame);
  };
  /**
   * Used to track the bytes received by this client
   * @param {*} args
   * @private
   */


  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
    var bytesReceived = util.stringify(args).length;
    this.bytesReceived += bytesReceived;
    this.stats_.incrementCounter('bytes_received', bytesReceived);
  };

  return BrowserPollConnection;
}();
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 * @constructor
 *********************************************************************************************/


var FirebaseIFrameScriptHolder =
/** @class */
function () {
  /**
   * @param commandCB - The callback to be called when control commands are recevied from the server.
   * @param onMessageCB - The callback to be triggered when responses arrive from the server.
   * @param onDisconnect - The callback to be triggered when this tag holder is closed
   * @param urlFn - A function that provides the URL of the endpoint to send data to.
   */
  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
    this.onDisconnect = onDisconnect;
    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
    //problems in some browsers.

    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.

    this.pendingSegs = []; //A serial number. We use this for two things:
    // 1) A way to ensure the browser doesn't cache responses to polls
    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
    //    JSONP code in the order it was added to the iframe.

    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
    // incoming data from the server that we're waiting for).

    this.sendNewPolls = true;

    if (!util.isNodeSdk()) {
      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
      //iframes where we put the long-polling script tags. We have two callbacks:
      //   1) Command Callback - Triggered for control issues, like starting a connection.
      //   2) Message Callback - Triggered when new data arrives.
      this.uniqueCallbackIdentifier = LUIDGenerator();
      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.

      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.

      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
      // for ie9, but ie8 needs to do it again in the document itself.

      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
        var currentDomain = document.domain;
        script = '<script>document.domain="' + currentDomain + '";</script>';
      }

      var iframeContents = '<html><body>' + script + '</body></html>';

      try {
        this.myIFrame.doc.open();
        this.myIFrame.doc.write(iframeContents);
        this.myIFrame.doc.close();
      } catch (e) {
        log('frame writing exception');

        if (e.stack) {
          log(e.stack);
        }

        log(e);
      }
    } else {
      this.commandCB = commandCB;
      this.onMessageCB = onMessageCB;
    }
  }
  /**
   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
   * actually use.
   * @private
   * @return {Element}
   */


  FirebaseIFrameScriptHolder.createIFrame_ = function () {
    var iframe = document.createElement('iframe');
    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe

    if (document.body) {
      document.body.appendChild(iframe);

      try {
        // If document.domain has been modified in IE, this will throw an error, and we need to set the
        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
        var a = iframe.contentWindow.document;

        if (!a) {
          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
          log('No IE domain setting required');
        }
      } catch (e) {
        var domain = document.domain;
        iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
      }
    } else {
      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
      // never gets hit.
      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
    } // Get the document of the iframe in a browser-specific way.


    if (iframe.contentDocument) {
      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
    } else if (iframe.contentWindow) {
      iframe.doc = iframe.contentWindow.document; // Internet Explorer
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } else if (iframe.document) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      iframe.doc = iframe.document; //others?
    }

    return iframe;
  };
  /**
   * Cancel all outstanding queries and remove the frame.
   */


  FirebaseIFrameScriptHolder.prototype.close = function () {
    var _this = this; //Mark this iframe as dead, so no new requests are sent.


    this.alive = false;

    if (this.myIFrame) {
      //We have to actually remove all of the html inside this iframe before removing it from the
      //window, or IE will continue loading and executing the script tags we've already added, which
      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
      this.myIFrame.doc.body.innerHTML = '';
      setTimeout(function () {
        if (_this.myIFrame !== null) {
          document.body.removeChild(_this.myIFrame);
          _this.myIFrame = null;
        }
      }, Math.floor(0));
    } // Protect from being called recursively.


    var onDisconnect = this.onDisconnect;

    if (onDisconnect) {
      this.onDisconnect = null;
      onDisconnect();
    }
  };
  /**
   * Actually start the long-polling session by adding the first script tag(s) to the iframe.
   * @param {!string} id - The ID of this connection
   * @param {!string} pw - The password for this connection
   */


  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
    this.myID = id;
    this.myPW = pw;
    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.

    while (this.newRequest_()) {}
  };
  /**
   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
   * too many outstanding requests and we are still alive.
   *
   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
   * needed.
   */


  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
    // We keep one outstanding request open all the time to receive data, but if we need to send data
    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
    // close the old request.
    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
      //construct our url
      this.currentSerial++;
      var urlParams = {};
      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
      var theURL = this.urlFn(urlParams); //Now add as much data as we can.

      var curDataString = '';
      var i = 0;

      while (this.pendingSegs.length > 0) {
        //first, lets see if the next segment will fit.
        var nextSeg = this.pendingSegs[0];

        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
          //great, the segment will fit. Lets append it.
          var theSeg = this.pendingSegs.shift();
          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;
          i++;
        } else {
          break;
        }
      }

      theURL = theURL + curDataString;
      this.addLongPollTag_(theURL, this.currentSerial);
      return true;
    } else {
      return false;
    }
  };
  /**
   * Queue a packet for transmission to the server.
   * @param segnum - A sequential id for this packet segment used for reassembly
   * @param totalsegs - The total number of segments in this packet
   * @param data - The data for this segment.
   */


  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
    //add this to the queue of segments to send.
    this.pendingSegs.push({
      seg: segnum,
      ts: totalsegs,
      d: data
    }); //send the data immediately if there isn't already data being transmitted, unless
    //startLongPoll hasn't been called yet.

    if (this.alive) {
      this.newRequest_();
    }
  };
  /**
   * Add a script tag for a regular long-poll request.
   * @param {!string} url - The URL of the script tag.
   * @param {!number} serial - The serial number of the request.
   * @private
   */


  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
    var _this = this; //remember that we sent this request.


    this.outstandingRequests.add(serial);

    var doNewRequest = function () {
      _this.outstandingRequests.delete(serial);

      _this.newRequest_();
    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll
    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.


    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));

    var readyStateCB = function () {
      // Request completed.  Cancel the keepalive.
      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.

      doNewRequest();
    };

    this.addTag(url, readyStateCB);
  };
  /**
   * Add an arbitrary script tag to the iframe.
   * @param {!string} url - The URL for the script tag source.
   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
   */


  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
    var _this = this;

    if (util.isNodeSdk()) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      this.doNodeLongPoll(url, loadCB);
    } else {
      setTimeout(function () {
        try {
          // if we're already closed, don't add this poll
          if (!_this.sendNewPolls) {
            return;
          }

          var newScript_1 = _this.myIFrame.doc.createElement('script');

          newScript_1.type = 'text/javascript';
          newScript_1.async = true;
          newScript_1.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any

          newScript_1.onload = newScript_1.onreadystatechange = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var rstate = newScript_1.readyState;

            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              newScript_1.onload = newScript_1.onreadystatechange = null;

              if (newScript_1.parentNode) {
                newScript_1.parentNode.removeChild(newScript_1);
              }

              loadCB();
            }
          };

          newScript_1.onerror = function () {
            log('Long-poll script failed to load: ' + url);
            _this.sendNewPolls = false;

            _this.close();
          };

          _this.myIFrame.doc.body.appendChild(newScript_1);
        } catch (e) {// TODO: we should make this error visible somehow
        }
      }, Math.floor(1));
    }
  };

  return FirebaseIFrameScriptHolder;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The semver (www.semver.org) version of the SDK. */


var SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created

function setSDKVersion(version) {
  SDK_VERSION = version;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var WEBSOCKET_MAX_FRAME_SIZE = 16384;
var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
var WebSocketImpl = null;

if (typeof MozWebSocket !== 'undefined') {
  WebSocketImpl = MozWebSocket;
} else if (typeof WebSocket !== 'undefined') {
  WebSocketImpl = WebSocket;
}
/**
 * Create a new websocket connection with the given callbacks.
 * @constructor
 * @implements {Transport}
 */


var WebSocketConnection =
/** @class */
function () {
  /**
   * @param connId identifier for this transport
   * @param repoInfo The info for the websocket endpoint.
   * @param applicationId The Firebase App ID for this project.
   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
   *                                         session
   * @param lastSessionId Optional lastSessionId if there was a previous connection
   */
  function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
    this.connId = connId;
    this.applicationId = applicationId;
    this.keepaliveTimer = null;
    this.frames = null;
    this.totalFrames = 0;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.log_ = logWrapper(this.connId);
    this.stats_ = StatsManager.getCollection(repoInfo);
    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
  }
  /**
   * @param {RepoInfo} repoInfo The info for the websocket endpoint.
   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
   *                                         session
   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
   * @return {string} connection url
   * @private
   */


  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
    var urlParams = {};
    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;

    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {
      urlParams[REFERER_PARAM] = FORGE_REF;
    }

    if (transportSessionId) {
      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
    }

    if (lastSessionId) {
      urlParams[LAST_SESSION_PARAM] = lastSessionId;
    }

    return repoInfo.connectionURL(WEBSOCKET, urlParams);
  };
  /**
   *
   * @param onMessage Callback when messages arrive
   * @param onDisconnect Callback with connection lost.
   */


  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
    var _this = this;

    this.onDisconnect = onDisconnect;
    this.onMessage = onMessage;
    this.log_('Websocket connecting to ' + this.connURL);
    this.everConnected_ = false; // Assume failure until proven otherwise.

    PersistentStorage.set('previous_websocket_failure', true);

    try {
      if (util.isNodeSdk()) {
        var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>

        var options = {
          headers: {
            'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
            'X-Firebase-GMPID': this.applicationId || ''
          }
        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.

        var env = process['env'];
        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];

        if (proxy) {
          options['proxy'] = {
            origin: proxy
          };
        }

        this.mySock = new WebSocketImpl(this.connURL, [], options);
      } else {
        var options = {
          headers: {
            'X-Firebase-GMPID': this.applicationId || ''
          }
        };
        this.mySock = new WebSocketImpl(this.connURL, [], options);
      }
    } catch (e) {
      this.log_('Error instantiating WebSocket.');
      var error = e.message || e.data;

      if (error) {
        this.log_(error);
      }

      this.onClosed_();
      return;
    }

    this.mySock.onopen = function () {
      _this.log_('Websocket connected.');

      _this.everConnected_ = true;
    };

    this.mySock.onclose = function () {
      _this.log_('Websocket connection was disconnected.');

      _this.mySock = null;

      _this.onClosed_();
    };

    this.mySock.onmessage = function (m) {
      _this.handleIncomingFrame(m);
    };

    this.mySock.onerror = function (e) {
      _this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any


      var error = e.message || e.data;

      if (error) {
        _this.log_(error);
      }

      _this.onClosed_();
    };
  };
  /**
   * No-op for websockets, we don't need to do anything once the connection is confirmed as open
   */


  WebSocketConnection.prototype.start = function () {};

  WebSocketConnection.forceDisallow = function () {
    WebSocketConnection.forceDisallow_ = true;
  };

  WebSocketConnection.isAvailable = function () {
    var isOldAndroid = false;

    if (typeof navigator !== 'undefined' && navigator.userAgent) {
      var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);

      if (oldAndroidMatch && oldAndroidMatch.length > 1) {
        if (parseFloat(oldAndroidMatch[1]) < 4.4) {
          isOldAndroid = true;
        }
      }
    }

    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;
  };
  /**
   * Returns true if we previously failed to connect with this transport.
   * @return {boolean}
   */


  WebSocketConnection.previouslyFailed = function () {
    // If our persistent storage is actually only in-memory storage,
    // we default to assuming that it previously failed to be safe.
    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;
  };

  WebSocketConnection.prototype.markConnectionHealthy = function () {
    PersistentStorage.remove('previous_websocket_failure');
  };

  WebSocketConnection.prototype.appendFrame_ = function (data) {
    this.frames.push(data);

    if (this.frames.length === this.totalFrames) {
      var fullMess = this.frames.join('');
      this.frames = null;
      var jsonMess = util.jsonEval(fullMess); //handle the message

      this.onMessage(jsonMess);
    }
  };
  /**
   * @param {number} frameCount The number of frames we are expecting from the server
   * @private
   */


  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
    this.totalFrames = frameCount;
    this.frames = [];
  };
  /**
   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
   * @param {!String} data
   * @return {?String} Any remaining data to be process, or null if there is none
   * @private
   */


  WebSocketConnection.prototype.extractFrameCount_ = function (data) {
    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508

    if (data.length <= 6) {
      var frameCount = Number(data);

      if (!isNaN(frameCount)) {
        this.handleNewFrameCount_(frameCount);
        return null;
      }
    }

    this.handleNewFrameCount_(1);
    return data;
  };
  /**
   * Process a websocket frame that has arrived from the server.
   * @param mess The frame data
   */


  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
    if (this.mySock === null) {
      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
    }

    var data = mess['data'];
    this.bytesReceived += data.length;
    this.stats_.incrementCounter('bytes_received', data.length);
    this.resetKeepAlive();

    if (this.frames !== null) {
      // we're buffering
      this.appendFrame_(data);
    } else {
      // try to parse out a frame count, otherwise, assume 1 and process it
      var remainingData = this.extractFrameCount_(data);

      if (remainingData !== null) {
        this.appendFrame_(remainingData);
      }
    }
  };
  /**
   * Send a message to the server
   * @param {Object} data The JSON object to transmit
   */


  WebSocketConnection.prototype.send = function (data) {
    this.resetKeepAlive();
    var dataStr = util.stringify(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request
    //up into multiple pieces if it doesn't fit in one request.

    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header

    if (dataSegs.length > 1) {
      this.sendString_(String(dataSegs.length));
    } //Send the actual data in segments.


    for (var i = 0; i < dataSegs.length; i++) {
      this.sendString_(dataSegs[i]);
    }
  };

  WebSocketConnection.prototype.shutdown_ = function () {
    this.isClosed_ = true;

    if (this.keepaliveTimer) {
      clearInterval(this.keepaliveTimer);
      this.keepaliveTimer = null;
    }

    if (this.mySock) {
      this.mySock.close();
      this.mySock = null;
    }
  };

  WebSocketConnection.prototype.onClosed_ = function () {
    if (!this.isClosed_) {
      this.log_('WebSocket is closing itself');
      this.shutdown_(); // since this is an internal close, trigger the close listener

      if (this.onDisconnect) {
        this.onDisconnect(this.everConnected_);
        this.onDisconnect = null;
      }
    }
  };
  /**
   * External-facing close handler.
   * Close the websocket and kill the connection.
   */


  WebSocketConnection.prototype.close = function () {
    if (!this.isClosed_) {
      this.log_('WebSocket is being closed');
      this.shutdown_();
    }
  };
  /**
   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
   * the last activity.
   */


  WebSocketConnection.prototype.resetKeepAlive = function () {
    var _this = this;

    clearInterval(this.keepaliveTimer);
    this.keepaliveTimer = setInterval(function () {
      //If there has been no websocket activity for a while, send a no-op
      if (_this.mySock) {
        _this.sendString_('0');
      }

      _this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any

    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
  };
  /**
   * Send a string over the websocket.
   *
   * @param {string} str String to send.
   * @private
   */


  WebSocketConnection.prototype.sendString_ = function (str) {
    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
    // calls for some unknown reason.  We treat these as an error and disconnect.
    // See https://app.asana.com/0/58926111402292/68021340250410
    try {
      this.mySock.send(str);
    } catch (e) {
      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
      setTimeout(this.onClosed_.bind(this), 0);
    }
  };
  /**
   * Number of response before we consider the connection "healthy."
   * @type {number}
   */


  WebSocketConnection.responsesRequiredToBeHealthy = 2;
  /**
   * Time to wait for the connection te become healthy before giving up.
   * @type {number}
   */

  WebSocketConnection.healthyTimeout = 30000;
  return WebSocketConnection;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 * @constructor
 */


var TransportManager =
/** @class */
function () {
  /**
   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
   */
  function TransportManager(repoInfo) {
    this.initTransports_(repoInfo);
  }

  Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
    /**
     * @const
     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
     */
    get: function () {
      return [BrowserPollConnection, WebSocketConnection];
    },
    enumerable: false,
    configurable: true
  });
  /**
   * @param {!RepoInfo} repoInfo
   * @private
   */

  TransportManager.prototype.initTransports_ = function (repoInfo) {
    var e_1, _a;

    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();

    if (repoInfo.webSocketOnly) {
      if (!isWebSocketsAvailable) {
        warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
      }

      isSkipPollConnection = true;
    }

    if (isSkipPollConnection) {
      this.transports_ = [WebSocketConnection];
    } else {
      var transports = this.transports_ = [];

      try {
        for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
          var transport = _c.value;

          if (transport && transport['isAvailable']()) {
            transports.push(transport);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
  };
  /**
   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
   * initial transport to use
   */


  TransportManager.prototype.initialTransport = function () {
    if (this.transports_.length > 0) {
      return this.transports_[0];
    } else {
      throw new Error('No transports available');
    }
  };
  /**
   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
   * transport, or null
   */


  TransportManager.prototype.upgradeTransport = function () {
    if (this.transports_.length > 1) {
      return this.transports_[1];
    } else {
      return null;
    }
  };

  return TransportManager;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Abort upgrade attempt if it takes longer than 60s.


var UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.

var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.

var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
var MESSAGE_TYPE = 't';
var MESSAGE_DATA = 'd';
var CONTROL_SHUTDOWN = 's';
var CONTROL_RESET = 'r';
var CONTROL_ERROR = 'e';
var CONTROL_PONG = 'o';
var SWITCH_ACK = 'a';
var END_TRANSMISSION = 'n';
var PING = 'p';
var SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 *
 * @constructor
 */

var Connection =
/** @class */
function () {
  /**
   * @param id - an id for this connection
   * @param repoInfo_ - the info for the endpoint to connect to
   * @param applicationId_ - the Firebase App ID for this project
   * @param onMessage_ - the callback to be triggered when a server-push message arrives
   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
   * @param onDisconnect_ - the callback to be triggered when a connection was lost
   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
   */
  function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
    this.id = id;
    this.repoInfo_ = repoInfo_;
    this.applicationId_ = applicationId_;
    this.onMessage_ = onMessage_;
    this.onReady_ = onReady_;
    this.onDisconnect_ = onDisconnect_;
    this.onKill_ = onKill_;
    this.lastSessionId = lastSessionId;
    this.connectionCount = 0;
    this.pendingDataMessages = [];
    this.state_ = 0
    /* CONNECTING */
    ;
    this.log_ = logWrapper('c:' + this.id + ':');
    this.transportManager_ = new TransportManager(repoInfo_);
    this.log_('Connection created');
    this.start_();
  }
  /**
   * Starts a connection attempt
   * @private
   */


  Connection.prototype.start_ = function () {
    var _this = this;

    var conn = this.transportManager_.initialTransport();
    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
    // can consider the transport healthy.

    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
    var onMessageReceived = this.connReceiver_(this.conn_);
    var onConnectionLost = this.disconnReceiver_(this.conn_);
    this.tx_ = this.conn_;
    this.rx_ = this.conn_;
    this.secondaryConn_ = null;
    this.isHealthy_ = false;
    /*
     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
     * still have the context of your originating frame.
     */

    setTimeout(function () {
      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
    }, Math.floor(0));
    var healthyTimeoutMS = conn['healthyTimeout'] || 0;

    if (healthyTimeoutMS > 0) {
      this.healthyTimeout_ = setTimeoutNonBlocking(function () {
        _this.healthyTimeout_ = null;

        if (!_this.isHealthy_) {
          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');

            _this.isHealthy_ = true;

            _this.conn_.markConnectionHealthy();
          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
            // the server.

          } else {
            _this.log_('Closing unhealthy connection after timeout.');

            _this.close();
          }
        } // eslint-disable-next-line @typescript-eslint/no-explicit-any

      }, Math.floor(healthyTimeoutMS));
    }
  };
  /**
   * @return {!string}
   * @private
   */


  Connection.prototype.nextTransportId_ = function () {
    return 'c:' + this.id + ':' + this.connectionCount++;
  };

  Connection.prototype.disconnReceiver_ = function (conn) {
    var _this = this;

    return function (everConnected) {
      if (conn === _this.conn_) {
        _this.onConnectionLost_(everConnected);
      } else if (conn === _this.secondaryConn_) {
        _this.log_('Secondary connection lost.');

        _this.onSecondaryConnectionLost_();
      } else {
        _this.log_('closing an old connection');
      }
    };
  };

  Connection.prototype.connReceiver_ = function (conn) {
    var _this = this;

    return function (message) {
      if (_this.state_ !== 2
      /* DISCONNECTED */
      ) {
          if (conn === _this.rx_) {
            _this.onPrimaryMessageReceived_(message);
          } else if (conn === _this.secondaryConn_) {
            _this.onSecondaryMessageReceived_(message);
          } else {
            _this.log_('message on old connection');
          }
        }
    };
  };
  /**
   *
   * @param {Object} dataMsg An arbitrary data message to be sent to the server
   */


  Connection.prototype.sendRequest = function (dataMsg) {
    // wrap in a data message envelope and send it on
    var msg = {
      t: 'd',
      d: dataMsg
    };
    this.sendData_(msg);
  };

  Connection.prototype.tryCleanupConnection = function () {
    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
      this.conn_ = this.secondaryConn_;
      this.secondaryConn_ = null; // the server will shutdown the old connection
    }
  };

  Connection.prototype.onSecondaryControl_ = function (controlData) {
    if (MESSAGE_TYPE in controlData) {
      var cmd = controlData[MESSAGE_TYPE];

      if (cmd === SWITCH_ACK) {
        this.upgradeIfSecondaryHealthy_();
      } else if (cmd === CONTROL_RESET) {
        // Most likely the session wasn't valid. Abandon the switch attempt
        this.log_('Got a reset on secondary, closing it');
        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close

        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
          this.close();
        }
      } else if (cmd === CONTROL_PONG) {
        this.log_('got pong on secondary.');
        this.secondaryResponsesRequired_--;
        this.upgradeIfSecondaryHealthy_();
      }
    }
  };

  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
    var layer = requireKey('t', parsedData);
    var data = requireKey('d', parsedData);

    if (layer === 'c') {
      this.onSecondaryControl_(data);
    } else if (layer === 'd') {
      // got a data message, but we're still second connection. Need to buffer it up
      this.pendingDataMessages.push(data);
    } else {
      throw new Error('Unknown protocol layer: ' + layer);
    }
  };

  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
    if (this.secondaryResponsesRequired_ <= 0) {
      this.log_('Secondary connection is healthy.');
      this.isHealthy_ = true;
      this.secondaryConn_.markConnectionHealthy();
      this.proceedWithUpgrade_();
    } else {
      // Send a ping to make sure the connection is healthy.
      this.log_('sending ping on secondary.');
      this.secondaryConn_.send({
        t: 'c',
        d: {
          t: PING,
          d: {}
        }
      });
    }
  };

  Connection.prototype.proceedWithUpgrade_ = function () {
    // tell this connection to consider itself open
    this.secondaryConn_.start(); // send ack

    this.log_('sending client ack on secondary');
    this.secondaryConn_.send({
      t: 'c',
      d: {
        t: SWITCH_ACK,
        d: {}
      }
    }); // send end packet on primary transport, switch to sending on this one
    // can receive on this one, buffer responses until end received on primary transport

    this.log_('Ending transmission on primary');
    this.conn_.send({
      t: 'c',
      d: {
        t: END_TRANSMISSION,
        d: {}
      }
    });
    this.tx_ = this.secondaryConn_;
    this.tryCleanupConnection();
  };

  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
    // Must refer to parsedData properties in quotes, so closure doesn't touch them.
    var layer = requireKey('t', parsedData);
    var data = requireKey('d', parsedData);

    if (layer === 'c') {
      this.onControl_(data);
    } else if (layer === 'd') {
      this.onDataMessage_(data);
    }
  };

  Connection.prototype.onDataMessage_ = function (message) {
    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level

    this.onMessage_(message);
  };

  Connection.prototype.onPrimaryResponse_ = function () {
    if (!this.isHealthy_) {
      this.primaryResponsesRequired_--;

      if (this.primaryResponsesRequired_ <= 0) {
        this.log_('Primary connection is healthy.');
        this.isHealthy_ = true;
        this.conn_.markConnectionHealthy();
      }
    }
  };

  Connection.prototype.onControl_ = function (controlData) {
    var cmd = requireKey(MESSAGE_TYPE, controlData);

    if (MESSAGE_DATA in controlData) {
      var payload = controlData[MESSAGE_DATA];

      if (cmd === SERVER_HELLO) {
        this.onHandshake_(payload);
      } else if (cmd === END_TRANSMISSION) {
        this.log_('recvd end transmission on primary');
        this.rx_ = this.secondaryConn_;

        for (var i = 0; i < this.pendingDataMessages.length; ++i) {
          this.onDataMessage_(this.pendingDataMessages[i]);
        }

        this.pendingDataMessages = [];
        this.tryCleanupConnection();
      } else if (cmd === CONTROL_SHUTDOWN) {
        // This was previously the 'onKill' callback passed to the lower-level connection
        // payload in this case is the reason for the shutdown. Generally a human-readable error
        this.onConnectionShutdown_(payload);
      } else if (cmd === CONTROL_RESET) {
        // payload in this case is the host we should contact
        this.onReset_(payload);
      } else if (cmd === CONTROL_ERROR) {
        error('Server Error: ' + payload);
      } else if (cmd === CONTROL_PONG) {
        this.log_('got pong on primary.');
        this.onPrimaryResponse_();
        this.sendPingOnPrimaryIfNecessary_();
      } else {
        error('Unknown control packet command: ' + cmd);
      }
    }
  };
  /**
   *
   * @param {Object} handshake The handshake data returned from the server
   * @private
   */


  Connection.prototype.onHandshake_ = function (handshake) {
    var timestamp = handshake.ts;
    var version = handshake.v;
    var host = handshake.h;
    this.sessionId = handshake.s;
    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further

    if (this.state_ === 0
    /* CONNECTING */
    ) {
        this.conn_.start();
        this.onConnectionEstablished_(this.conn_, timestamp);

        if (PROTOCOL_VERSION !== version) {
          warn('Protocol version mismatch detected');
        } // TODO: do we want to upgrade? when? maybe a delay?


        this.tryStartUpgrade_();
      }
  };

  Connection.prototype.tryStartUpgrade_ = function () {
    var conn = this.transportManager_.upgradeTransport();

    if (conn) {
      this.startUpgrade_(conn);
    }
  };

  Connection.prototype.startUpgrade_ = function (conn) {
    var _this = this;

    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
    // can consider the transport healthy.

    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
    var onMessage = this.connReceiver_(this.secondaryConn_);
    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.

    setTimeoutNonBlocking(function () {
      if (_this.secondaryConn_) {
        _this.log_('Timed out trying to upgrade.');

        _this.secondaryConn_.close();
      }
    }, Math.floor(UPGRADE_TIMEOUT));
  };

  Connection.prototype.onReset_ = function (host) {
    this.log_('Reset packet received.  New host: ' + host);
    this.repoInfo_.updateHost(host); // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
    // We don't currently support resets after the connection has already been established

    if (this.state_ === 1
    /* CONNECTED */
    ) {
        this.close();
      } else {
      // Close whatever connections we have open and start again.
      this.closeConnections_();
      this.start_();
    }
  };

  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
    var _this = this;

    this.log_('Realtime connection established.');
    this.conn_ = conn;
    this.state_ = 1
    /* CONNECTED */
    ;

    if (this.onReady_) {
      this.onReady_(timestamp, this.sessionId);
      this.onReady_ = null;
    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
    // send some pings.


    if (this.primaryResponsesRequired_ === 0) {
      this.log_('Primary connection is healthy.');
      this.isHealthy_ = true;
    } else {
      setTimeoutNonBlocking(function () {
        _this.sendPingOnPrimaryIfNecessary_();
      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
    }
  };

  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
    if (!this.isHealthy_ && this.state_ === 1
    /* CONNECTED */
    ) {
        this.log_('sending ping on primary.');
        this.sendData_({
          t: 'c',
          d: {
            t: PING,
            d: {}
          }
        });
      }
  };

  Connection.prototype.onSecondaryConnectionLost_ = function () {
    var conn = this.secondaryConn_;
    this.secondaryConn_ = null;

    if (this.tx_ === conn || this.rx_ === conn) {
      // we are relying on this connection already in some capacity. Therefore, a failure is real
      this.close();
    }
  };
  /**
   *
   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
   * we should flush the host cache
   * @private
   */


  Connection.prototype.onConnectionLost_ = function (everConnected) {
    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.

    if (!everConnected && this.state_ === 0
    /* CONNECTING */
    ) {
        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away

        if (this.repoInfo_.isCacheableHost()) {
          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com

          this.repoInfo_.internalHost = this.repoInfo_.host;
        }
      } else if (this.state_ === 1
    /* CONNECTED */
    ) {
        this.log_('Realtime connection lost.');
      }

    this.close();
  };
  /**
   *
   * @param {string} reason
   * @private
   */


  Connection.prototype.onConnectionShutdown_ = function (reason) {
    this.log_('Connection shutdown command received. Shutting down...');

    if (this.onKill_) {
      this.onKill_(reason);
      this.onKill_ = null;
    } // We intentionally don't want to fire onDisconnect (kill is a different case),
    // so clear the callback.


    this.onDisconnect_ = null;
    this.close();
  };

  Connection.prototype.sendData_ = function (data) {
    if (this.state_ !== 1
    /* CONNECTED */
    ) {
        throw 'Connection is not connected';
      } else {
      this.tx_.send(data);
    }
  };
  /**
   * Cleans up this connection, calling the appropriate callbacks
   */


  Connection.prototype.close = function () {
    if (this.state_ !== 2
    /* DISCONNECTED */
    ) {
        this.log_('Closing realtime connection.');
        this.state_ = 2
        /* DISCONNECTED */
        ;
        this.closeConnections_();

        if (this.onDisconnect_) {
          this.onDisconnect_();
          this.onDisconnect_ = null;
        }
      }
  };
  /**
   *
   * @private
   */


  Connection.prototype.closeConnections_ = function () {
    this.log_('Shutting down all connections');

    if (this.conn_) {
      this.conn_.close();
      this.conn_ = null;
    }

    if (this.secondaryConn_) {
      this.secondaryConn_.close();
      this.secondaryConn_ = null;
    }

    if (this.healthyTimeout_) {
      clearTimeout(this.healthyTimeout_);
      this.healthyTimeout_ = null;
    }
  };

  return Connection;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */


var ServerActions =
/** @class */
function () {
  function ServerActions() {}
  /**
   * @param {string} pathString
   * @param {*} data
   * @param {function(string, string)=} onComplete
   * @param {string=} hash
   */


  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};
  /**
   * @param {string} pathString
   * @param {*} data
   * @param {function(string, ?string)} onComplete
   * @param {string=} hash
   */


  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};
  /**
   * Refreshes the auth token for the current connection.
   * @param {string} token The authentication token
   */


  ServerActions.prototype.refreshAuthToken = function (token) {};
  /**
   * @param {string} pathString
   * @param {*} data
   * @param {function(string, string)=} onComplete
   */


  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};
  /**
   * @param {string} pathString
   * @param {*} data
   * @param {function(string, string)=} onComplete
   */


  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};
  /**
   * @param {string} pathString
   * @param {function(string, string)=} onComplete
   */


  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};
  /**
   * @param {Object.<string, *>} stats
   */


  ServerActions.prototype.reportStats = function (stats) {};

  return ServerActions;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var RECONNECT_MIN_DELAY = 1000;
var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)

var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)

var RECONNECT_DELAY_MULTIPLIER = 1.3;
var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.

var SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.

var INVALID_AUTH_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */

var PersistentConnection =
/** @class */
function (_super) {
  tslib.__extends(PersistentConnection, _super);
  /**
   * @implements {ServerActions}
   * @param repoInfo_ Data about the namespace we are connecting to
   * @param applicationId_ The Firebase App ID for this project
   * @param onDataUpdate_ A callback for new data from the server
   */


  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
    var _this = _super.call(this) || this;

    _this.repoInfo_ = repoInfo_;
    _this.applicationId_ = applicationId_;
    _this.onDataUpdate_ = onDataUpdate_;
    _this.onConnectStatus_ = onConnectStatus_;
    _this.onServerInfoUpdate_ = onServerInfoUpdate_;
    _this.authTokenProvider_ = authTokenProvider_;
    _this.authOverride_ = authOverride_; // Used for diagnostic logging.

    _this.id = PersistentConnection.nextPersistentConnectionId_++;
    _this.log_ = logWrapper('p:' + _this.id + ':');
    _this.interruptReasons_ = {};
    /** Map<path, Map<queryId, ListenSpec>> */

    _this.listens = new Map();
    _this.outstandingPuts_ = [];
    _this.outstandingPutCount_ = 0;
    _this.onDisconnectRequestQueue_ = [];
    _this.connected_ = false;
    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
    _this.securityDebugCallback_ = null;
    _this.lastSessionId = null;
    _this.establishConnectionTimer_ = null;
    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.

    _this.requestCBHash_ = {};
    _this.requestNumber_ = 0;
    _this.realtime_ = null;
    _this.authToken_ = null;
    _this.forceTokenRefresh_ = false;
    _this.invalidAuthTokenCount_ = 0;
    _this.firstConnection_ = true;
    _this.lastConnectionAttemptTime_ = null;
    _this.lastConnectionEstablishedTime_ = null;

    if (authOverride_ && !util.isNodeSdk()) {
      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
    }

    _this.scheduleConnect_(0);

    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);

    if (repoInfo_.host.indexOf('fblocal') === -1) {
      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
    }

    return _this;
  }

  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
    var curReqNum = ++this.requestNumber_;
    var msg = {
      r: curReqNum,
      a: action,
      b: body
    };
    this.log_(util.stringify(msg));
    util.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
    this.realtime_.sendRequest(msg);

    if (onResponse) {
      this.requestCBHash_[curReqNum] = onResponse;
    }
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
    var queryId = query.queryIdentifier();
    var pathString = query.path.toString();
    this.log_('Listen called for ' + pathString + ' ' + queryId);

    if (!this.listens.has(pathString)) {
      this.listens.set(pathString, new Map());
    }

    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
    util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
    var listenSpec = {
      onComplete: onComplete,
      hashFn: currentHashFn,
      query: query,
      tag: tag
    };
    this.listens.get(pathString).set(queryId, listenSpec);

    if (this.connected_) {
      this.sendListen_(listenSpec);
    }
  };

  PersistentConnection.prototype.sendListen_ = function (listenSpec) {
    var _this = this;

    var query = listenSpec.query;
    var pathString = query.path.toString();
    var queryId = query.queryIdentifier();
    this.log_('Listen on ' + pathString + ' for ' + queryId);
    var req = {
      /*path*/
      p: pathString
    };
    var action = 'q'; // Only bother to send query if it's non-default.

    if (listenSpec.tag) {
      req['q'] = query.queryObject();
      req['t'] = listenSpec.tag;
    }

    req[
    /*hash*/
    'h'] = listenSpec.hashFn();
    this.sendRequest(action, req, function (message) {
      var payload = message[
      /*data*/
      'd'];
      var status = message[
      /*status*/
      's']; // print warnings in any case...

      PersistentConnection.warnOnListenWarnings_(payload, query);

      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded


      if (currentListenSpec === listenSpec) {
        _this.log_('listen response', message);

        if (status !== 'ok') {
          _this.removeListen_(pathString, queryId);
        }

        if (listenSpec.onComplete) {
          listenSpec.onComplete(status, payload);
        }
      }
    });
  };

  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var warnings = util.safeGet(payload, 'w');

      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
        var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
        var indexPath = query.path.toString();
        warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
      }
    }
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.refreshAuthToken = function (token) {
    this.authToken_ = token;
    this.log_('Auth token refreshed');

    if (this.authToken_) {
      this.tryAuth();
    } else {
      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
      //the credential so we dont become authenticated next time we connect.
      if (this.connected_) {
        this.sendRequest('unauth', {}, function () {});
      }
    }

    this.reduceReconnectDelayIfAdminCredential_(token);
  };

  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
    var isFirebaseSecret = credential && credential.length === 40;

    if (isFirebaseSecret || util.isAdmin(credential)) {
      this.log_('Admin auth credential detected.  Reducing max reconnect time.');
      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
    }
  };
  /**
   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
   * a auth revoked (the connection is closed).
   */


  PersistentConnection.prototype.tryAuth = function () {
    var _this = this;

    if (this.connected_ && this.authToken_) {
      var token_1 = this.authToken_;
      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';
      var requestData = {
        cred: token_1
      };

      if (this.authOverride_ === null) {
        requestData['noauth'] = true;
      } else if (typeof this.authOverride_ === 'object') {
        requestData['authvar'] = this.authOverride_;
      }

      this.sendRequest(authMethod, requestData, function (res) {
        var status = res[
        /*status*/
        's'];
        var data = res[
        /*data*/
        'd'] || 'error';

        if (_this.authToken_ === token_1) {
          if (status === 'ok') {
            _this.invalidAuthTokenCount_ = 0;
          } else {
            // Triggers reconnect and force refresh for auth token
            _this.onAuthRevoked_(status, data);
          }
        }
      });
    }
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.unlisten = function (query, tag) {
    var pathString = query.path.toString();
    var queryId = query.queryIdentifier();
    this.log_('Unlisten called for ' + pathString + ' ' + queryId);
    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
    var listen = this.removeListen_(pathString, queryId);

    if (listen && this.connected_) {
      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
    }
  };

  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
    this.log_('Unlisten on ' + pathString + ' for ' + queryId);
    var req = {
      /*path*/
      p: pathString
    };
    var action = 'n'; // Only bother sending queryId if it's non-default.

    if (tag) {
      req['q'] = queryObj;
      req['t'] = tag;
    }

    this.sendRequest(action, req);
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
    if (this.connected_) {
      this.sendOnDisconnect_('o', pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString: pathString,
        action: 'o',
        data: data,
        onComplete: onComplete
      });
    }
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
    if (this.connected_) {
      this.sendOnDisconnect_('om', pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString: pathString,
        action: 'om',
        data: data,
        onComplete: onComplete
      });
    }
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
    if (this.connected_) {
      this.sendOnDisconnect_('oc', pathString, null, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString: pathString,
        action: 'oc',
        data: null,
        onComplete: onComplete
      });
    }
  };

  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
    var request = {
      /*path*/
      p: pathString,

      /*data*/
      d: data
    };
    this.log_('onDisconnect ' + action, request);
    this.sendRequest(action, request, function (response) {
      if (onComplete) {
        setTimeout(function () {
          onComplete(response[
          /*status*/
          's'], response[
          /* data */
          'd']);
        }, Math.floor(0));
      }
    });
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
    this.putInternal('p', pathString, data, onComplete, hash);
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
    this.putInternal('m', pathString, data, onComplete, hash);
  };

  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
    var request = {
      /*path*/
      p: pathString,

      /*data*/
      d: data
    };

    if (hash !== undefined) {
      request[
      /*hash*/
      'h'] = hash;
    } // TODO: Only keep track of the most recent put for a given path?


    this.outstandingPuts_.push({
      action: action,
      request: request,
      onComplete: onComplete
    });
    this.outstandingPutCount_++;
    var index = this.outstandingPuts_.length - 1;

    if (this.connected_) {
      this.sendPut_(index);
    } else {
      this.log_('Buffering put: ' + pathString);
    }
  };

  PersistentConnection.prototype.sendPut_ = function (index) {
    var _this = this;

    var action = this.outstandingPuts_[index].action;
    var request = this.outstandingPuts_[index].request;
    var onComplete = this.outstandingPuts_[index].onComplete;
    this.outstandingPuts_[index].queued = this.connected_;
    this.sendRequest(action, request, function (message) {
      _this.log_(action + ' response', message);

      delete _this.outstandingPuts_[index];
      _this.outstandingPutCount_--; // Clean up array occasionally.

      if (_this.outstandingPutCount_ === 0) {
        _this.outstandingPuts_ = [];
      }

      if (onComplete) {
        onComplete(message[
        /*status*/
        's'], message[
        /* data */
        'd']);
      }
    });
  };
  /**
   * @inheritDoc
   */


  PersistentConnection.prototype.reportStats = function (stats) {
    var _this = this; // If we're not connected, we just drop the stats.


    if (this.connected_) {
      var request = {
        /*counters*/
        c: stats
      };
      this.log_('reportStats', request);
      this.sendRequest(
      /*stats*/
      's', request, function (result) {
        var status = result[
        /*status*/
        's'];

        if (status !== 'ok') {
          var errorReason = result[
          /* data */
          'd'];

          _this.log_('reportStats', 'Error sending stats: ' + errorReason);
        }
      });
    }
  };

  PersistentConnection.prototype.onDataMessage_ = function (message) {
    if ('r' in message) {
      // this is a response
      this.log_('from server: ' + util.stringify(message));
      var reqNum = message['r'];
      var onResponse = this.requestCBHash_[reqNum];

      if (onResponse) {
        delete this.requestCBHash_[reqNum];
        onResponse(message[
        /*body*/
        'b']);
      }
    } else if ('error' in message) {
      throw 'A server-side error has occurred: ' + message['error'];
    } else if ('a' in message) {
      // a and b are action and body, respectively
      this.onDataPush_(message['a'], message['b']);
    }
  };

  PersistentConnection.prototype.onDataPush_ = function (action, body) {
    this.log_('handleServerMessage', action, body);

    if (action === 'd') {
      this.onDataUpdate_(body[
      /*path*/
      'p'], body[
      /*data*/
      'd'],
      /*isMerge*/
      false, body['t']);
    } else if (action === 'm') {
      this.onDataUpdate_(body[
      /*path*/
      'p'], body[
      /*data*/
      'd'],
      /*isMerge=*/
      true, body['t']);
    } else if (action === 'c') {
      this.onListenRevoked_(body[
      /*path*/
      'p'], body[
      /*query*/
      'q']);
    } else if (action === 'ac') {
      this.onAuthRevoked_(body[
      /*status code*/
      's'], body[
      /* explanation */
      'd']);
    } else if (action === 'sd') {
      this.onSecurityDebugPacket_(body);
    } else {
      error('Unrecognized action received from server: ' + util.stringify(action) + '\nAre you using the latest client?');
    }
  };

  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
    this.log_('connection ready');
    this.connected_ = true;
    this.lastConnectionEstablishedTime_ = new Date().getTime();
    this.handleTimestamp_(timestamp);
    this.lastSessionId = sessionId;

    if (this.firstConnection_) {
      this.sendConnectStats_();
    }

    this.restoreState_();
    this.firstConnection_ = false;
    this.onConnectStatus_(true);
  };

  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
    var _this = this;

    util.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");

    if (this.establishConnectionTimer_) {
      clearTimeout(this.establishConnectionTimer_);
    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).


    this.establishConnectionTimer_ = setTimeout(function () {
      _this.establishConnectionTimer_ = null;

      _this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any

    }, Math.floor(timeout));
  };

  PersistentConnection.prototype.onVisible_ = function (visible) {
    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
      this.log_('Window became visible.  Reducing delay.');
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }

    this.visible_ = visible;
  };

  PersistentConnection.prototype.onOnline_ = function (online) {
    if (online) {
      this.log_('Browser went online.');
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    } else {
      this.log_('Browser went offline.  Killing connection.');

      if (this.realtime_) {
        this.realtime_.close();
      }
    }
  };

  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
    this.log_('data client disconnected');
    this.connected_ = false;
    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.

    this.cancelSentTransactions_(); // Clear out the pending requests.

    this.requestCBHash_ = {};

    if (this.shouldReconnect_()) {
      if (!this.visible_) {
        this.log_("Window isn't visible.  Delaying reconnect.");
        this.reconnectDelay_ = this.maxReconnectDelay_;
        this.lastConnectionAttemptTime_ = new Date().getTime();
      } else if (this.lastConnectionEstablishedTime_) {
        // If we've been connected long enough, reset reconnect delay to minimum.
        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;

        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        }

        this.lastConnectionEstablishedTime_ = null;
      }

      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
      reconnectDelay = Math.random() * reconnectDelay;
      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.

      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
    }

    this.onConnectStatus_(false);
  };

  PersistentConnection.prototype.establishConnection_ = function () {
    if (this.shouldReconnect_()) {
      this.log_('Making a connection attempt');
      this.lastConnectionAttemptTime_ = new Date().getTime();
      this.lastConnectionEstablishedTime_ = null;
      var onDataMessage_1 = this.onDataMessage_.bind(this);
      var onReady_1 = this.onReady_.bind(this);
      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
      var self_1 = this;
      var lastSessionId_1 = this.lastSessionId;
      var canceled_1 = false;
      var connection_1 = null;

      var closeFn_1 = function () {
        if (connection_1) {
          connection_1.close();
        } else {
          canceled_1 = true;
          onDisconnect_1();
        }
      };

      var sendRequestFn = function (msg) {
        util.assert(connection_1, "sendRequest call when we're not connected not allowed.");
        connection_1.sendRequest(msg);
      };

      this.realtime_ = {
        close: closeFn_1,
        sendRequest: sendRequestFn
      };
      var forceRefresh = this.forceTokenRefresh_;
      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful

      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {
        if (!canceled_1) {
          log('getToken() completed. Creating connection.');
          self_1.authToken_ = result && result.accessToken;
          connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1,
          /* onKill= */
          function (reason) {
            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
          }, lastSessionId_1);
        } else {
          log('getToken() completed but was canceled');
        }
      }).then(null, function (error) {
        self_1.log_('Failed to get token: ' + error);

        if (!canceled_1) {
          if (util.CONSTANTS.NODE_ADMIN) {
            // This may be a critical error for the Admin Node.js SDK, so log a warning.
            // But getToken() may also just have temporarily failed, so we still want to
            // continue retrying.
            warn(error);
          }

          closeFn_1();
        }
      });
    }
  };

  PersistentConnection.prototype.interrupt = function (reason) {
    log('Interrupting connection for reason: ' + reason);
    this.interruptReasons_[reason] = true;

    if (this.realtime_) {
      this.realtime_.close();
    } else {
      if (this.establishConnectionTimer_) {
        clearTimeout(this.establishConnectionTimer_);
        this.establishConnectionTimer_ = null;
      }

      if (this.connected_) {
        this.onRealtimeDisconnect_();
      }
    }
  };

  PersistentConnection.prototype.resume = function (reason) {
    log('Resuming connection for reason: ' + reason);
    delete this.interruptReasons_[reason];

    if (util.isEmpty(this.interruptReasons_)) {
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;

      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }
  };

  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
    var delta = timestamp - new Date().getTime();
    this.onServerInfoUpdate_({
      serverTimeOffset: delta
    });
  };

  PersistentConnection.prototype.cancelSentTransactions_ = function () {
    for (var i = 0; i < this.outstandingPuts_.length; i++) {
      var put = this.outstandingPuts_[i];

      if (put &&
      /*hash*/
      'h' in put.request && put.queued) {
        if (put.onComplete) {
          put.onComplete('disconnect');
        }

        delete this.outstandingPuts_[i];
        this.outstandingPutCount_--;
      }
    } // Clean up array occasionally.


    if (this.outstandingPutCount_ === 0) {
      this.outstandingPuts_ = [];
    }
  };

  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
    // Remove the listen and manufacture a "permission_denied" error for the failed listen.
    var queryId;

    if (!query) {
      queryId = 'default';
    } else {
      queryId = query.map(function (q) {
        return ObjectToUniqueKey(q);
      }).join('$');
    }

    var listen = this.removeListen_(pathString, queryId);

    if (listen && listen.onComplete) {
      listen.onComplete('permission_denied');
    }
  };

  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
    var normalizedPathString = new Path(pathString).toString(); // normalize path.

    var listen;

    if (this.listens.has(normalizedPathString)) {
      var map = this.listens.get(normalizedPathString);
      listen = map.get(queryId);
      map.delete(queryId);

      if (map.size === 0) {
        this.listens.delete(normalizedPathString);
      }
    } else {
      // all listens for this path has already been removed
      listen = undefined;
    }

    return listen;
  };

  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
    log('Auth token revoked: ' + statusCode + '/' + explanation);
    this.authToken_ = null;
    this.forceTokenRefresh_ = true;
    this.realtime_.close();

    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
      // We'll wait a couple times before logging the warning / increasing the
      // retry period since oauth tokens will report as "invalid" if they're
      // just expired. Plus there may be transient issues that resolve themselves.
      this.invalidAuthTokenCount_++;

      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
        // Set a long reconnect delay because recovery is unlikely
        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log
        // a warning

        this.authTokenProvider_.notifyForInvalidToken();
      }
    }
  };

  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
    if (this.securityDebugCallback_) {
      this.securityDebugCallback_(body);
    } else {
      if ('msg' in body) {
        console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
      }
    }
  };

  PersistentConnection.prototype.restoreState_ = function () {
    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.


    this.tryAuth();

    try {
      // Puts depend on having received the corresponding data update from the server before they complete, so we must
      // make sure to send listens before puts.
      for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
        var queries = _d.value;

        try {
          for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
            var listenSpec = _f.value;
            this.sendListen_(listenSpec);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    for (var i = 0; i < this.outstandingPuts_.length; i++) {
      if (this.outstandingPuts_[i]) {
        this.sendPut_(i);
      }
    }

    while (this.onDisconnectRequestQueue_.length) {
      var request = this.onDisconnectRequestQueue_.shift();
      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
    }
  };
  /**
   * Sends client stats for first connection
   */


  PersistentConnection.prototype.sendConnectStats_ = function () {
    var stats = {};
    var clientName = 'js';

    if (util.CONSTANTS.NODE_ADMIN) {
      clientName = 'admin_node';
    } else if (util.CONSTANTS.NODE_CLIENT) {
      clientName = 'node';
    }

    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;

    if (util.isMobileCordova()) {
      stats['framework.cordova'] = 1;
    } else if (util.isReactNative()) {
      stats['framework.reactnative'] = 1;
    }

    this.reportStats(stats);
  };

  PersistentConnection.prototype.shouldReconnect_ = function () {
    var online = OnlineMonitor.getInstance().currentlyOnline();
    return util.isEmpty(this.interruptReasons_) && online;
  };

  PersistentConnection.nextPersistentConnectionId_ = 0;
  /**
   * Counter for number of connections created. Mainly used for tagging in the logs
   */

  PersistentConnection.nextConnectionId_ = 0;
  return PersistentConnection;
}(ServerActions);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */


var ReadonlyRestClient =
/** @class */
function (_super) {
  tslib.__extends(ReadonlyRestClient, _super);
  /**
   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
   * @param {AuthTokenProvider} authTokenProvider_
   * @implements {ServerActions}
   */


  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
    var _this = _super.call(this) || this;

    _this.repoInfo_ = repoInfo_;
    _this.onDataUpdate_ = onDataUpdate_;
    _this.authTokenProvider_ = authTokenProvider_;
    /** @private {function(...[*])} */

    _this.log_ = logWrapper('p:rest:');
    /**
     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
     * that's been removed. :-/
     *
     * @private {!Object.<string, !Object>}
     */

    _this.listens_ = {};
    return _this;
  }

  ReadonlyRestClient.prototype.reportStats = function (stats) {
    throw new Error('Method not implemented.');
  };
  /**
   * @param {!Query} query
   * @param {?number=} tag
   * @return {string}
   * @private
   */


  ReadonlyRestClient.getListenId_ = function (query, tag) {
    if (tag !== undefined) {
      return 'tag$' + tag;
    } else {
      util.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
      return query.path.toString();
    }
  };
  /** @inheritDoc */


  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
    var _this = this;

    var pathString = query.path.toString();
    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.

    var listenId = ReadonlyRestClient.getListenId_(query, tag);
    var thisListen = {};
    this.listens_[listenId] = thisListen;
    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();
    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
      var data = result;

      if (error === 404) {
        data = null;
        error = null;
      }

      if (error === null) {
        _this.onDataUpdate_(pathString, data,
        /*isMerge=*/
        false, tag);
      }

      if (util.safeGet(_this.listens_, listenId) === thisListen) {
        var status_1;

        if (!error) {
          status_1 = 'ok';
        } else if (error === 401) {
          status_1 = 'permission_denied';
        } else {
          status_1 = 'rest_error:' + error;
        }

        onComplete(status_1, null);
      }
    });
  };
  /** @inheritDoc */


  ReadonlyRestClient.prototype.unlisten = function (query, tag) {
    var listenId = ReadonlyRestClient.getListenId_(query, tag);
    delete this.listens_[listenId];
  };
  /** @inheritDoc */


  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.
  };
  /**
   * Performs a REST request to the given path, with the provided query string parameters,
   * and any auth credentials we have.
   *
   * @param {!string} pathString
   * @param {!Object.<string, *>} queryStringParameters
   * @param {?function(?number, *=)} callback
   * @private
   */


  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
    var _this = this;

    if (queryStringParameters === void 0) {
      queryStringParameters = {};
    }

    queryStringParameters['format'] = 'export';
    this.authTokenProvider_.getToken(
    /*forceRefresh=*/
    false).then(function (authTokenData) {
      var authToken = authTokenData && authTokenData.accessToken;

      if (authToken) {
        queryStringParameters['auth'] = authToken;
      }

      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + util.querystring(queryStringParameters);

      _this.log_('Sending REST request for ' + url);

      var xhr = new XMLHttpRequest();

      xhr.onreadystatechange = function () {
        if (callback && xhr.readyState === 4) {
          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);

          var res = null;

          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              res = util.jsonEval(xhr.responseText);
            } catch (e) {
              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);
            }

            callback(null, res);
          } else {
            // 401 and 404 are expected.
            if (xhr.status !== 401 && xhr.status !== 404) {
              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);
            }

            callback(xhr.status);
          }

          callback = null;
        }
      };

      xhr.open('GET', url,
      /*asynchronous=*/
      true);
      xhr.send();
    });
  };

  return ReadonlyRestClient;
}(ServerActions);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var INTERRUPT_REASON = 'repo_interrupt';
/**
 * A connection to a single data repository.
 */

var Repo =
/** @class */
function () {
  function Repo(repoInfo_, forceRestClient, app, authTokenProvider) {
    var _this = this;

    this.repoInfo_ = repoInfo_;
    this.app = app;
    this.dataUpdateCount = 0;
    this.statsListener_ = null;
    this.eventQueue_ = new EventQueue();
    this.nextWriteId_ = 1;
    this.interceptServerDataCallback_ = null;
    /** A list of data pieces and paths to be set when this client disconnects. */

    this.onDisconnect_ = new SparseSnapshotTree(); // TODO: This should be @private but it's used by test_access.js and internal.js

    this.persistentConnection_ = null;
    this.stats_ = StatsManager.getCollection(repoInfo_);

    if (forceRestClient || beingCrawled()) {
      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.

      setTimeout(this.onConnectStatus_.bind(this, true), 0);
    } else {
      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride

      if (typeof authOverride !== 'undefined' && authOverride !== null) {
        if (typeof authOverride !== 'object') {
          throw new Error('Only objects are supported for option databaseAuthVariableOverride');
        }

        try {
          util.stringify(authOverride);
        } catch (e) {
          throw new Error('Invalid authOverride provided: ' + e);
        }
      }

      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
      this.server_ = this.persistentConnection_;
    }

    authTokenProvider.addTokenChangeListener(function (token) {
      _this.server_.refreshAuthToken(token);
    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.

    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {
      return new StatsReporter(_this.stats_, _this.server_);
    });
    this.transactionsInit_(); // Used for .info.

    this.infoData_ = new SnapshotHolder();
    this.infoSyncTree_ = new SyncTree({
      startListening: function (query, tag, currentHashFn, onComplete) {
        var infoEvents = [];

        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
        // on initial data...


        if (!node.isEmpty()) {
          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
          setTimeout(function () {
            onComplete('ok');
          }, 0);
        }

        return infoEvents;
      },
      stopListening: function () {}
    });
    this.updateInfo_('connected', false);
    this.serverSyncTree_ = new SyncTree({
      startListening: function (query, tag, currentHashFn, onComplete) {
        _this.server_.listen(query, currentHashFn, tag, function (status, data) {
          var events = onComplete(status, data);

          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
        }); // No synchronous events for network-backed sync trees


        return [];
      },
      stopListening: function (query, tag) {
        _this.server_.unlisten(query, tag);
      }
    });
  }
  /**
   * @return The URL corresponding to the root of this Firebase.
   */


  Repo.prototype.toString = function () {
    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;
  };
  /**
   * @return The namespace represented by the repo.
   */


  Repo.prototype.name = function () {
    return this.repoInfo_.namespace;
  };
  /**
   * @return The time in milliseconds, taking the server offset into account if we have one.
   */


  Repo.prototype.serverTime = function () {
    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
    var offset = offsetNode.val() || 0;
    return new Date().getTime() + offset;
  };
  /**
   * Generate ServerValues using some variables from the repo object.
   */


  Repo.prototype.generateServerValues = function () {
    return generateWithValues({
      timestamp: this.serverTime()
    });
  };
  /**
   * Called by realtime when we get new messages from the server.
   */


  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
    // For testing.
    this.dataUpdateCount++;
    var path = new Path(pathString);
    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;
    var events = [];

    if (tag) {
      if (isMerge) {
        var taggedChildren = util.map(data, function (raw) {
          return nodeFromJSON$1(raw);
        });
        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
      } else {
        var taggedSnap = nodeFromJSON$1(data);
        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
      }
    } else if (isMerge) {
      var changedChildren = util.map(data, function (raw) {
        return nodeFromJSON$1(raw);
      });
      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
    } else {
      var snap = nodeFromJSON$1(data);
      events = this.serverSyncTree_.applyServerOverwrite(path, snap);
    }

    var affectedPath = path;

    if (events.length > 0) {
      // Since we have a listener outstanding for each transaction, receiving any events
      // is a proxy for some change having occurred.
      affectedPath = this.rerunTransactions_(path);
    }

    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
  }; // TODO: This should be @private but it's used by test_access.js and internal.js


  Repo.prototype.interceptServerData_ = function (callback) {
    this.interceptServerDataCallback_ = callback;
  };

  Repo.prototype.onConnectStatus_ = function (connectStatus) {
    this.updateInfo_('connected', connectStatus);

    if (connectStatus === false) {
      this.runOnDisconnectEvents_();
    }
  };

  Repo.prototype.onServerInfoUpdate_ = function (updates) {
    var _this = this;

    each(updates, function (key, value) {
      _this.updateInfo_(key, value);
    });
  };

  Repo.prototype.updateInfo_ = function (pathString, value) {
    var path = new Path('/.info/' + pathString);
    var newNode = nodeFromJSON$1(value);
    this.infoData_.updateSnapshot(path, newNode);
    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
    this.eventQueue_.raiseEventsForChangedPath(path, events);
  };

  Repo.prototype.getNextWriteId_ = function () {
    return this.nextWriteId_++;
  };

  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
    var _this = this;

    this.log_('set', {
      path: path.toString(),
      value: newVal,
      priority: newPriority
    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
    // (b) store unresolved paths on JSON parse

    var serverValues = this.generateServerValues();
    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
    var existing = this.serverSyncTree_.calcCompleteEventCache(path);
    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
    var writeId = this.getNextWriteId_();
    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
    this.eventQueue_.queueEvents(events);
    this.server_.put(path.toString(), newNodeUnresolved.val(
    /*export=*/
    true), function (status, errorReason) {
      var success = status === 'ok';

      if (!success) {
        warn('set at ' + path + ' failed: ' + status);
      }

      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);

      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);

      _this.callOnCompleteCallback(onComplete, status, errorReason);
    });
    var affectedPath = this.abortTransactions_(path);
    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here

    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
  };

  Repo.prototype.update = function (path, childrenToMerge, onComplete) {
    var _this = this;

    this.log_('update', {
      path: path.toString(),
      value: childrenToMerge
    }); // Start with our existing data and merge each child into it.

    var empty = true;
    var serverValues = this.generateServerValues();
    var changedChildren = {};
    each(childrenToMerge, function (changedKey, changedValue) {
      empty = false;
      changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);
    });

    if (!empty) {
      var writeId_1 = this.getNextWriteId_();
      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
      this.eventQueue_.queueEvents(events);
      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
        var success = status === 'ok';

        if (!success) {
          warn('update at ' + path + ' failed: ' + status);
        }

        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);

        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;

        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);

        _this.callOnCompleteCallback(onComplete, status, errorReason);
      });
      each(childrenToMerge, function (changedPath) {
        var affectedPath = _this.abortTransactions_(path.child(changedPath));

        _this.rerunTransactions_(affectedPath);
      }); // We queued the events above, so just flush the queue here

      this.eventQueue_.raiseEventsForChangedPath(path, []);
    } else {
      log("update() called with empty data.  Don't do anything.");
      this.callOnCompleteCallback(onComplete, 'ok');
    }
  };
  /**
   * Applies all of the changes stored up in the onDisconnect_ tree.
   */


  Repo.prototype.runOnDisconnectEvents_ = function () {
    var _this = this;

    this.log_('onDisconnectEvents');
    var serverValues = this.generateServerValues();
    var resolvedOnDisconnectTree = new SparseSnapshotTree();
    this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {
      var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);
      resolvedOnDisconnectTree.remember(path, resolved);
    });
    var events = [];
    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));

      var affectedPath = _this.abortTransactions_(path);

      _this.rerunTransactions_(affectedPath);
    });
    this.onDisconnect_ = new SparseSnapshotTree();
    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
  };

  Repo.prototype.onDisconnectCancel = function (path, onComplete) {
    var _this = this;

    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
      if (status === 'ok') {
        _this.onDisconnect_.forget(path);
      }

      _this.callOnCompleteCallback(onComplete, status, errorReason);
    });
  };

  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
    var _this = this;

    var newNode = nodeFromJSON$1(value);
    this.server_.onDisconnectPut(path.toString(), newNode.val(
    /*export=*/
    true), function (status, errorReason) {
      if (status === 'ok') {
        _this.onDisconnect_.remember(path, newNode);
      }

      _this.callOnCompleteCallback(onComplete, status, errorReason);
    });
  };

  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
    var _this = this;

    var newNode = nodeFromJSON$1(value, priority);
    this.server_.onDisconnectPut(path.toString(), newNode.val(
    /*export=*/
    true), function (status, errorReason) {
      if (status === 'ok') {
        _this.onDisconnect_.remember(path, newNode);
      }

      _this.callOnCompleteCallback(onComplete, status, errorReason);
    });
  };

  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
    var _this = this;

    if (util.isEmpty(childrenToMerge)) {
      log("onDisconnect().update() called with empty data.  Don't do anything.");
      this.callOnCompleteCallback(onComplete, 'ok');
      return;
    }

    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
      if (status === 'ok') {
        each(childrenToMerge, function (childName, childNode) {
          var newChildNode = nodeFromJSON$1(childNode);

          _this.onDisconnect_.remember(path.child(childName), newChildNode);
        });
      }

      _this.callOnCompleteCallback(onComplete, status, errorReason);
    });
  };

  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
    var events;

    if (query.path.getFront() === '.info') {
      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
    } else {
      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
    }

    this.eventQueue_.raiseEventsAtPath(query.path, events);
  };

  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
    // a little bit by handling the return values anyways.
    var events;

    if (query.path.getFront() === '.info') {
      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
    } else {
      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
    }

    this.eventQueue_.raiseEventsAtPath(query.path, events);
  };

  Repo.prototype.interrupt = function () {
    if (this.persistentConnection_) {
      this.persistentConnection_.interrupt(INTERRUPT_REASON);
    }
  };

  Repo.prototype.resume = function () {
    if (this.persistentConnection_) {
      this.persistentConnection_.resume(INTERRUPT_REASON);
    }
  };

  Repo.prototype.stats = function (showDelta) {
    if (showDelta === void 0) {
      showDelta = false;
    }

    if (typeof console === 'undefined') {
      return;
    }

    var stats;

    if (showDelta) {
      if (!this.statsListener_) {
        this.statsListener_ = new StatsListener(this.stats_);
      }

      stats = this.statsListener_.get();
    } else {
      stats = this.stats_.get();
    }

    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
      return Math.max(currentValue.length, previousValue);
    }, 0);
    each(stats, function (stat, value) {
      var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).

      for (var i = stat.length; i < longestName + 2; i++) {
        paddedStat += ' ';
      }

      console.log(paddedStat + value);
    });
  };

  Repo.prototype.statsIncrementCounter = function (metric) {
    this.stats_.incrementCounter(metric);
    this.statsReporter_.includeStat(metric);
  };

  Repo.prototype.log_ = function () {
    var varArgs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }

    var prefix = '';

    if (this.persistentConnection_) {
      prefix = this.persistentConnection_.id + ':';
    }

    log.apply(void 0, tslib.__spread([prefix], varArgs));
  };

  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
    if (callback) {
      exceptionGuard(function () {
        if (status === 'ok') {
          callback(null);
        } else {
          var code = (status || 'error').toUpperCase();
          var message = code;

          if (errorReason) {
            message += ': ' + errorReason;
          }

          var error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any

          error.code = code;
          callback(error);
        }
      });
    }
  };

  Object.defineProperty(Repo.prototype, "database", {
    get: function () {
      return this.__database || (this.__database = new Database(this));
    },
    enumerable: false,
    configurable: true
  });
  return Repo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 *
 * @constructor
 * @implements {NodeFilter}
 */


var RangedFilter =
/** @class */
function () {
  /**
   * @param {!QueryParams} params
   */
  function RangedFilter(params) {
    this.indexedFilter_ = new IndexedFilter(params.getIndex());
    this.index_ = params.getIndex();
    this.startPost_ = RangedFilter.getStartPost_(params);
    this.endPost_ = RangedFilter.getEndPost_(params);
  }
  /**
   * @return {!NamedNode}
   */


  RangedFilter.prototype.getStartPost = function () {
    return this.startPost_;
  };
  /**
   * @return {!NamedNode}
   */


  RangedFilter.prototype.getEndPost = function () {
    return this.endPost_;
  };
  /**
   * @param {!NamedNode} node
   * @return {boolean}
   */


  RangedFilter.prototype.matches = function (node) {
    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }

    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
    if (newSnap.isLeafNode()) {
      // Make sure we have a children node with the correct index, not a leaf node;
      newSnap = ChildrenNode.EMPTY_NODE;
    }

    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries

    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
    var self = this;
    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
      if (!self.matches(new NamedNode(key, childNode))) {
        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
      }
    });
    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
    // Don't support priorities on queries
    return oldSnap;
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.filtersNodes = function () {
    return true;
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.getIndexedFilter = function () {
    return this.indexedFilter_;
  };
  /**
   * @inheritDoc
   */


  RangedFilter.prototype.getIndex = function () {
    return this.index_;
  };
  /**
   * @param {!QueryParams} params
   * @return {!NamedNode}
   * @private
   */


  RangedFilter.getStartPost_ = function (params) {
    if (params.hasStart()) {
      var startName = params.getIndexStartName();
      return params.getIndex().makePost(params.getIndexStartValue(), startName);
    } else {
      return params.getIndex().minPost();
    }
  };
  /**
   * @param {!QueryParams} params
   * @return {!NamedNode}
   * @private
   */


  RangedFilter.getEndPost_ = function (params) {
    if (params.hasEnd()) {
      var endName = params.getIndexEndName();
      return params.getIndex().makePost(params.getIndexEndValue(), endName);
    } else {
      return params.getIndex().maxPost();
    }
  };

  return RangedFilter;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements {NodeFilter}
 */


var LimitedFilter =
/** @class */
function () {
  /**
   * @param {!QueryParams} params
   */
  function LimitedFilter(params) {
    this.rangedFilter_ = new RangedFilter(params);
    this.index_ = params.getIndex();
    this.limit_ = params.getLimit();
    this.reverse_ = !params.isViewFromLeft();
  }
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }

    if (snap.getImmediateChild(key).equals(newChild)) {
      // No change
      return snap;
    } else if (snap.numChildren() < this.limit_) {
      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    } else {
      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
    }
  };
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
    var filtered;

    if (newSnap.isLeafNode() || newSnap.isEmpty()) {
      // Make sure we have a children node with the correct index, not a leaf node;
      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
    } else {
      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
        // Easier to build up a snapshot, since what we're given has more than twice the elements we want
        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate

        var iterator = void 0;

        if (this.reverse_) {
          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
        } else {
          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
        }

        var count = 0;

        while (iterator.hasNext() && count < this.limit_) {
          var next = iterator.getNext();
          var inRange = void 0;

          if (this.reverse_) {
            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
          } else {
            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
          }

          if (inRange) {
            filtered = filtered.updateImmediateChild(next.name, next.node);
            count++;
          } else {
            // if we have reached the end post, we cannot keep adding elemments
            break;
          }
        }
      } else {
        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries

        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
        var startPost = void 0;
        var endPost = void 0;
        var cmp = void 0;
        var iterator = void 0;

        if (this.reverse_) {
          iterator = filtered.getReverseIterator(this.index_);
          startPost = this.rangedFilter_.getEndPost();
          endPost = this.rangedFilter_.getStartPost();
          var indexCompare_1 = this.index_.getCompare();

          cmp = function (a, b) {
            return indexCompare_1(b, a);
          };
        } else {
          iterator = filtered.getIterator(this.index_);
          startPost = this.rangedFilter_.getStartPost();
          endPost = this.rangedFilter_.getEndPost();
          cmp = this.index_.getCompare();
        }

        var count = 0;
        var foundStartPost = false;

        while (iterator.hasNext()) {
          var next = iterator.getNext();

          if (!foundStartPost && cmp(startPost, next) <= 0) {
            // start adding
            foundStartPost = true;
          }

          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;

          if (inRange) {
            count++;
          } else {
            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
          }
        }
      }
    }

    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
  };
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
    // Don't support priorities on queries
    return oldSnap;
  };
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.filtersNodes = function () {
    return true;
  };
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.getIndexedFilter = function () {
    return this.rangedFilter_.getIndexedFilter();
  };
  /**
   * @inheritDoc
   */


  LimitedFilter.prototype.getIndex = function () {
    return this.index_;
  };
  /**
   * @param {!Node} snap
   * @param {string} childKey
   * @param {!Node} childSnap
   * @param {!CompleteChildSource} source
   * @param {?ChildChangeAccumulator} changeAccumulator
   * @return {!Node}
   * @private
   */


  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
    // TODO: rename all cache stuff etc to general snap terminology
    var cmp;

    if (this.reverse_) {
      var indexCmp_1 = this.index_.getCompare();

      cmp = function (a, b) {
        return indexCmp_1(b, a);
      };
    } else {
      cmp = this.index_.getCompare();
    }

    var oldEventCache = snap;
    util.assert(oldEventCache.numChildren() === this.limit_, '');
    var newChildNamedNode = new NamedNode(childKey, childSnap);
    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
    var inRange = this.rangedFilter_.matches(newChildNamedNode);

    if (oldEventCache.hasChild(childKey)) {
      var oldChildSnap = oldEventCache.getImmediateChild(childKey);
      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);

      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
        // been applied to the limited filter yet. Ignore this next child which will be updated later in
        // the limited filter...
        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
      }

      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;

      if (remainsInWindow) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
        }

        return oldEventCache.updateImmediateChild(childKey, childSnap);
      } else {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
        }

        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);

        if (nextChildInRange) {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
          }

          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
        } else {
          return newEventCache;
        }
      }
    } else if (childSnap.isEmpty()) {
      // we're deleting a node, but it was not in the window, so ignore it
      return snap;
    } else if (inRange) {
      if (cmp(windowBoundary, newChildNamedNode) >= 0) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
        }

        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
      } else {
        return snap;
      }
    } else {
      return snap;
    }
  };

  return LimitedFilter;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */


var QueryParams =
/** @class */
function () {
  function QueryParams() {
    this.limitSet_ = false;
    this.startSet_ = false;
    this.startNameSet_ = false;
    this.endSet_ = false;
    this.endNameSet_ = false;
    this.limit_ = 0;
    this.viewFrom_ = '';
    this.indexStartValue_ = null;
    this.indexStartName_ = '';
    this.indexEndValue_ = null;
    this.indexEndName_ = '';
    this.index_ = PRIORITY_INDEX;
  }
  /**
   * @return {boolean}
   */


  QueryParams.prototype.hasStart = function () {
    return this.startSet_;
  };
  /**
   * @return {boolean} True if it would return from left.
   */


  QueryParams.prototype.isViewFromLeft = function () {
    if (this.viewFrom_ === '') {
      // limit(), rather than limitToFirst or limitToLast was called.
      // This means that only one of startSet_ and endSet_ is true. Use them
      // to calculate which side of the view to anchor to. If neither is set,
      // anchor to the end.
      return this.startSet_;
    } else {
      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
    }
  };
  /**
   * Only valid to call if hasStart() returns true
   * @return {*}
   */


  QueryParams.prototype.getIndexStartValue = function () {
    util.assert(this.startSet_, 'Only valid if start has been set');
    return this.indexStartValue_;
  };
  /**
   * Only valid to call if hasStart() returns true.
   * Returns the starting key name for the range defined by these query parameters
   * @return {!string}
   */


  QueryParams.prototype.getIndexStartName = function () {
    util.assert(this.startSet_, 'Only valid if start has been set');

    if (this.startNameSet_) {
      return this.indexStartName_;
    } else {
      return MIN_NAME;
    }
  };
  /**
   * @return {boolean}
   */


  QueryParams.prototype.hasEnd = function () {
    return this.endSet_;
  };
  /**
   * Only valid to call if hasEnd() returns true.
   * @return {*}
   */


  QueryParams.prototype.getIndexEndValue = function () {
    util.assert(this.endSet_, 'Only valid if end has been set');
    return this.indexEndValue_;
  };
  /**
   * Only valid to call if hasEnd() returns true.
   * Returns the end key name for the range defined by these query parameters
   * @return {!string}
   */


  QueryParams.prototype.getIndexEndName = function () {
    util.assert(this.endSet_, 'Only valid if end has been set');

    if (this.endNameSet_) {
      return this.indexEndName_;
    } else {
      return MAX_NAME;
    }
  };
  /**
   * @return {boolean}
   */


  QueryParams.prototype.hasLimit = function () {
    return this.limitSet_;
  };
  /**
   * @return {boolean} True if a limit has been set and it has been explicitly anchored
   */


  QueryParams.prototype.hasAnchoredLimit = function () {
    return this.limitSet_ && this.viewFrom_ !== '';
  };
  /**
   * Only valid to call if hasLimit() returns true
   * @return {!number}
   */


  QueryParams.prototype.getLimit = function () {
    util.assert(this.limitSet_, 'Only valid if limit has been set');
    return this.limit_;
  };
  /**
   * @return {!Index}
   */


  QueryParams.prototype.getIndex = function () {
    return this.index_;
  };
  /**
   * @return {!QueryParams}
   * @private
   */


  QueryParams.prototype.copy_ = function () {
    var copy = new QueryParams();
    copy.limitSet_ = this.limitSet_;
    copy.limit_ = this.limit_;
    copy.startSet_ = this.startSet_;
    copy.indexStartValue_ = this.indexStartValue_;
    copy.startNameSet_ = this.startNameSet_;
    copy.indexStartName_ = this.indexStartName_;
    copy.endSet_ = this.endSet_;
    copy.indexEndValue_ = this.indexEndValue_;
    copy.endNameSet_ = this.endNameSet_;
    copy.indexEndName_ = this.indexEndName_;
    copy.index_ = this.index_;
    copy.viewFrom_ = this.viewFrom_;
    return copy;
  };
  /**
   * @param {!number} newLimit
   * @return {!QueryParams}
   */


  QueryParams.prototype.limit = function (newLimit) {
    var newParams = this.copy_();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = '';
    return newParams;
  };
  /**
   * @param {!number} newLimit
   * @return {!QueryParams}
   */


  QueryParams.prototype.limitToFirst = function (newLimit) {
    var newParams = this.copy_();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
    return newParams;
  };
  /**
   * @param {!number} newLimit
   * @return {!QueryParams}
   */


  QueryParams.prototype.limitToLast = function (newLimit) {
    var newParams = this.copy_();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
    return newParams;
  };
  /**
   * @param {*} indexValue
   * @param {?string=} key
   * @return {!QueryParams}
   */


  QueryParams.prototype.startAt = function (indexValue, key) {
    var newParams = this.copy_();
    newParams.startSet_ = true;

    if (indexValue === undefined) {
      indexValue = null;
    }

    newParams.indexStartValue_ = indexValue;

    if (key != null) {
      newParams.startNameSet_ = true;
      newParams.indexStartName_ = key;
    } else {
      newParams.startNameSet_ = false;
      newParams.indexStartName_ = '';
    }

    return newParams;
  };
  /**
   * @param {*} indexValue
   * @param {?string=} key
   * @return {!QueryParams}
   */


  QueryParams.prototype.endAt = function (indexValue, key) {
    var newParams = this.copy_();
    newParams.endSet_ = true;

    if (indexValue === undefined) {
      indexValue = null;
    }

    newParams.indexEndValue_ = indexValue;

    if (key !== undefined) {
      newParams.endNameSet_ = true;
      newParams.indexEndName_ = key;
    } else {
      newParams.endNameSet_ = false;
      newParams.indexEndName_ = '';
    }

    return newParams;
  };
  /**
   * @param {!Index} index
   * @return {!QueryParams}
   */


  QueryParams.prototype.orderBy = function (index) {
    var newParams = this.copy_();
    newParams.index_ = index;
    return newParams;
  };
  /**
   * @return {!Object}
   */


  QueryParams.prototype.getQueryObject = function () {
    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
    var obj = {};

    if (this.startSet_) {
      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;

      if (this.startNameSet_) {
        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
      }
    }

    if (this.endSet_) {
      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;

      if (this.endNameSet_) {
        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
      }
    }

    if (this.limitSet_) {
      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
      var viewFrom = this.viewFrom_;

      if (viewFrom === '') {
        if (this.isViewFromLeft()) {
          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
        } else {
          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
        }
      }

      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
    } // For now, priority index is the default, so we only specify if it's some other index


    if (this.index_ !== PRIORITY_INDEX) {
      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
    }

    return obj;
  };
  /**
   * @return {boolean}
   */


  QueryParams.prototype.loadsAllData = function () {
    return !(this.startSet_ || this.endSet_ || this.limitSet_);
  };
  /**
   * @return {boolean}
   */


  QueryParams.prototype.isDefault = function () {
    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
  };
  /**
   * @return {!NodeFilter}
   */


  QueryParams.prototype.getNodeFilter = function () {
    if (this.loadsAllData()) {
      return new IndexedFilter(this.getIndex());
    } else if (this.hasLimit()) {
      return new LimitedFilter(this);
    } else {
      return new RangedFilter(this);
    }
  };
  /**
   * Returns a set of REST query string parameters representing this query.
   *
   * @return {!Object.<string,*>} query string parameters
   */


  QueryParams.prototype.toRestQueryStringParameters = function () {
    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
    var qs = {};

    if (this.isDefault()) {
      return qs;
    }

    var orderBy;

    if (this.index_ === PRIORITY_INDEX) {
      orderBy = REST_CONSTANTS.PRIORITY_INDEX;
    } else if (this.index_ === VALUE_INDEX) {
      orderBy = REST_CONSTANTS.VALUE_INDEX;
    } else if (this.index_ === KEY_INDEX) {
      orderBy = REST_CONSTANTS.KEY_INDEX;
    } else {
      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');
      orderBy = this.index_.toString();
    }

    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);

    if (this.startSet_) {
      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);

      if (this.startNameSet_) {
        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);
      }
    }

    if (this.endSet_) {
      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);

      if (this.endNameSet_) {
        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);
      }
    }

    if (this.limitSet_) {
      if (this.isViewFromLeft()) {
        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
      } else {
        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
      }
    }

    return qs;
  };
  /**
   * Wire Protocol Constants
   * @const
   * @enum {string}
   * @private
   */


  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
    INDEX_START_VALUE: 'sp',
    INDEX_START_NAME: 'sn',
    INDEX_END_VALUE: 'ep',
    INDEX_END_NAME: 'en',
    LIMIT: 'l',
    VIEW_FROM: 'vf',
    VIEW_FROM_LEFT: 'l',
    VIEW_FROM_RIGHT: 'r',
    INDEX: 'i'
  };
  /**
   * REST Query Constants
   * @const
   * @enum {string}
   * @private
   */

  QueryParams.REST_QUERY_CONSTANTS_ = {
    ORDER_BY: 'orderBy',
    PRIORITY_INDEX: '$priority',
    VALUE_INDEX: '$value',
    KEY_INDEX: '$key',
    START_AT: 'startAt',
    END_AT: 'endAt',
    LIMIT_TO_FIRST: 'limitToFirst',
    LIMIT_TO_LAST: 'limitToLast'
  };
  /**
   * Default, empty query parameters
   * @type {!QueryParams}
   * @const
   */

  QueryParams.DEFAULT = new QueryParams();
  return QueryParams;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Reference =
/** @class */
function (_super) {
  tslib.__extends(Reference, _super);
  /**
   * Call options:
   *   new Reference(Repo, Path) or
   *   new Reference(url: string, string|RepoManager)
   *
   * Externally - this is the firebase.database.Reference type.
   *
   * @param {!Repo} repo
   * @param {(!Path)} path
   * @extends {Query}
   */


  function Reference(repo, path) {
    var _this = this;

    if (!(repo instanceof Repo)) {
      throw new Error('new Reference() no longer supported - use app.database().');
    } // call Query's constructor, passing in the repo and path.


    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
    return _this;
  }
  /** @return {?string} */


  Reference.prototype.getKey = function () {
    util.validateArgCount('Reference.key', 0, 0, arguments.length);

    if (this.path.isEmpty()) {
      return null;
    } else {
      return this.path.getBack();
    }
  };
  /**
   * @param {!(string|Path)} pathString
   * @return {!Reference}
   */


  Reference.prototype.child = function (pathString) {
    util.validateArgCount('Reference.child', 1, 1, arguments.length);

    if (typeof pathString === 'number') {
      pathString = String(pathString);
    } else if (!(pathString instanceof Path)) {
      if (this.path.getFront() === null) {
        validateRootPathString('Reference.child', 1, pathString, false);
      } else {
        validatePathString('Reference.child', 1, pathString, false);
      }
    }

    return new Reference(this.repo, this.path.child(pathString));
  };
  /** @return {?Reference} */


  Reference.prototype.getParent = function () {
    util.validateArgCount('Reference.parent', 0, 0, arguments.length);
    var parentPath = this.path.parent();
    return parentPath === null ? null : new Reference(this.repo, parentPath);
  };
  /** @return {!Reference} */


  Reference.prototype.getRoot = function () {
    util.validateArgCount('Reference.root', 0, 0, arguments.length);
    var ref = this;

    while (ref.getParent() !== null) {
      ref = ref.getParent();
    }

    return ref;
  };
  /** @return {!Database} */


  Reference.prototype.databaseProp = function () {
    return this.repo.database;
  };
  /**
   * @param {*} newVal
   * @param {function(?Error)=} onComplete
   * @return {!Promise}
   */


  Reference.prototype.set = function (newVal, onComplete) {
    util.validateArgCount('Reference.set', 1, 2, arguments.length);
    validateWritablePath('Reference.set', this.path);
    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
    util.validateCallback('Reference.set', 2, onComplete, true);
    var deferred = new util.Deferred();
    this.repo.setWithPriority(this.path, newVal,
    /*priority=*/
    null, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {!Object} objectToMerge
   * @param {function(?Error)=} onComplete
   * @return {!Promise}
   */


  Reference.prototype.update = function (objectToMerge, onComplete) {
    util.validateArgCount('Reference.update', 1, 2, arguments.length);
    validateWritablePath('Reference.update', this.path);

    if (Array.isArray(objectToMerge)) {
      var newObjectToMerge = {};

      for (var i = 0; i < objectToMerge.length; ++i) {
        newObjectToMerge['' + i] = objectToMerge[i];
      }

      objectToMerge = newObjectToMerge;
      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');
    }

    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
    util.validateCallback('Reference.update', 2, onComplete, true);
    var deferred = new util.Deferred();
    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {*} newVal
   * @param {string|number|null} newPriority
   * @param {function(?Error)=} onComplete
   * @return {!Promise}
   */


  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
    validateWritablePath('Reference.setWithPriority', this.path);
    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
    validatePriority('Reference.setWithPriority', 2, newPriority, false);
    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);

    if (this.getKey() === '.length' || this.getKey() === '.keys') {
      throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';
    }

    var deferred = new util.Deferred();
    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {function(?Error)=} onComplete
   * @return {!Promise}
   */


  Reference.prototype.remove = function (onComplete) {
    util.validateArgCount('Reference.remove', 0, 1, arguments.length);
    validateWritablePath('Reference.remove', this.path);
    util.validateCallback('Reference.remove', 1, onComplete, true);
    return this.set(null, onComplete);
  };
  /**
   * @param {function(*):*} transactionUpdate
   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
   * @param {boolean=} applyLocally
   * @return {!Promise}
   */


  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);
    validateWritablePath('Reference.transaction', this.path);
    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);
    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
    // to expose it.

    validateBoolean('Reference.transaction', 3, applyLocally, true);

    if (this.getKey() === '.length' || this.getKey() === '.keys') {
      throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';
    }

    if (applyLocally === undefined) {
      applyLocally = true;
    }

    var deferred = new util.Deferred();

    if (typeof onComplete === 'function') {
      deferred.promise.catch(function () {});
    }

    var promiseComplete = function (error, committed, snapshot) {
      if (error) {
        deferred.reject(error);
      } else {
        deferred.resolve(new TransactionResult(committed, snapshot));
      }

      if (typeof onComplete === 'function') {
        onComplete(error, committed, snapshot);
      }
    };

    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
    return deferred.promise;
  };
  /**
   * @param {string|number|null} priority
   * @param {function(?Error)=} onComplete
   * @return {!Promise}
   */


  Reference.prototype.setPriority = function (priority, onComplete) {
    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
    validateWritablePath('Reference.setPriority', this.path);
    validatePriority('Reference.setPriority', 1, priority, false);
    util.validateCallback('Reference.setPriority', 2, onComplete, true);
    var deferred = new util.Deferred();
    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
    return deferred.promise;
  };
  /**
   * @param {*=} value
   * @param {function(?Error)=} onComplete
   * @return {!Reference}
   */


  Reference.prototype.push = function (value, onComplete) {
    util.validateArgCount('Reference.push', 0, 2, arguments.length);
    validateWritablePath('Reference.push', this.path);
    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
    util.validateCallback('Reference.push', 2, onComplete, true);
    var now = this.repo.serverTime();
    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
    // We use child() to create handles to two different references. The first is turned into a
    // ThennableReference below by adding then() and catch() methods and is used as the
    // return value of push(). The second remains a regular Reference and is used as the fulfilled
    // value of the first ThennableReference.

    var thennablePushRef = this.child(name);
    var pushRef = this.child(name);
    var promise;

    if (value != null) {
      promise = thennablePushRef.set(value, onComplete).then(function () {
        return pushRef;
      });
    } else {
      promise = Promise.resolve(pushRef);
    }

    thennablePushRef.then = promise.then.bind(promise);
    thennablePushRef.catch = promise.then.bind(promise, undefined);

    if (typeof onComplete === 'function') {
      promise.catch(function () {});
    }

    return thennablePushRef;
  };
  /**
   * @return {!OnDisconnect}
   */


  Reference.prototype.onDisconnect = function () {
    validateWritablePath('Reference.onDisconnect', this.path);
    return new OnDisconnect(this.repo, this.path);
  };

  Object.defineProperty(Reference.prototype, "database", {
    get: function () {
      return this.databaseProp();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "key", {
    get: function () {
      return this.getKey();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "parent", {
    get: function () {
      return this.getParent();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "root", {
    get: function () {
      return this.getRoot();
    },
    enumerable: false,
    configurable: true
  });
  return Reference;
}(Query);
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */


Query.__referenceConstructor = Reference;
SyncPoint.__referenceConstructor = Reference;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Node in a Tree.
 */

var TreeNode =
/** @class */
function () {
  function TreeNode() {
    // TODO: Consider making accessors that create children and value lazily or
    // separate Internal / Leaf 'types'.
    this.children = {};
    this.childCount = 0;
    this.value = null;
  }

  return TreeNode;
}();
/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */


var Tree =
/** @class */
function () {
  /**
   * @template T
   * @param {string=} name_ Optional name of the node.
   * @param {Tree=} parent_ Optional parent node.
   * @param {TreeNode=} node_ Optional node to wrap.
   */
  function Tree(name_, parent_, node_) {
    if (name_ === void 0) {
      name_ = '';
    }

    if (parent_ === void 0) {
      parent_ = null;
    }

    if (node_ === void 0) {
      node_ = new TreeNode();
    }

    this.name_ = name_;
    this.parent_ = parent_;
    this.node_ = node_;
  }
  /**
   * Returns a sub-Tree for the given path.
   *
   * @param {!(string|Path)} pathObj Path to look up.
   * @return {!Tree.<T>} Tree for path.
   */


  Tree.prototype.subTree = function (pathObj) {
    // TODO: Require pathObj to be Path?
    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
    var child = this,
        next = path.getFront();

    while (next !== null) {
      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();
      child = new Tree(next, child, childNode);
      path = path.popFront();
      next = path.getFront();
    }

    return child;
  };
  /**
   * Returns the data associated with this tree node.
   *
   * @return {?T} The data or null if no data exists.
   */


  Tree.prototype.getValue = function () {
    return this.node_.value;
  };
  /**
   * Sets data to this tree node.
   *
   * @param {!T} value Value to set.
   */


  Tree.prototype.setValue = function (value) {
    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
    this.node_.value = value;
    this.updateParents_();
  };
  /**
   * Clears the contents of the tree node (its value and all children).
   */


  Tree.prototype.clear = function () {
    this.node_.value = null;
    this.node_.children = {};
    this.node_.childCount = 0;
    this.updateParents_();
  };
  /**
   * @return {boolean} Whether the tree has any children.
   */


  Tree.prototype.hasChildren = function () {
    return this.node_.childCount > 0;
  };
  /**
   * @return {boolean} Whether the tree is empty (no value or children).
   */


  Tree.prototype.isEmpty = function () {
    return this.getValue() === null && !this.hasChildren();
  };
  /**
   * Calls action for each child of this tree node.
   *
   * @param {function(!Tree.<T>)} action Action to be called for each child.
   */


  Tree.prototype.forEachChild = function (action) {
    var _this = this;

    each(this.node_.children, function (child, childTree) {
      action(new Tree(child, _this, childTree));
    });
  };
  /**
   * Does a depth-first traversal of this node's descendants, calling action for each one.
   *
   * @param {function(!Tree.<T>)} action Action to be called for each child.
   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
   *   false.
   * @param {boolean=} childrenFirst Whether to call action on children before calling it on
   *   parent.
   */


  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
    if (includeSelf && !childrenFirst) {
      action(this);
    }

    this.forEachChild(function (child) {
      child.forEachDescendant(action,
      /*includeSelf=*/
      true, childrenFirst);
    });

    if (includeSelf && childrenFirst) {
      action(this);
    }
  };
  /**
   * Calls action on each ancestor node.
   *
   * @param {function(!Tree.<T>)} action Action to be called on each parent; return
   *   true to abort.
   * @param {boolean=} includeSelf Whether to call action on this node as well.
   * @return {boolean} true if the action callback returned true.
   */


  Tree.prototype.forEachAncestor = function (action, includeSelf) {
    var node = includeSelf ? this : this.parent();

    while (node !== null) {
      if (action(node)) {
        return true;
      }

      node = node.parent();
    }

    return false;
  };
  /**
   * Does a depth-first traversal of this node's descendants.  When a descendant with a value
   * is found, action is called on it and traversal does not continue inside the node.
   * Action is *not* called on this node.
   *
   * @param {function(!Tree.<T>)} action Action to be called for each child.
   */


  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
    this.forEachChild(function (child) {
      if (child.getValue() !== null) {
        action(child);
      } else {
        child.forEachImmediateDescendantWithValue(action);
      }
    });
  };
  /**
   * @return {!Path} The path of this tree node, as a Path.
   */


  Tree.prototype.path = function () {
    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);
  };
  /**
   * @return {string} The name of the tree node.
   */


  Tree.prototype.name = function () {
    return this.name_;
  };
  /**
   * @return {?Tree} The parent tree node, or null if this is the root of the tree.
   */


  Tree.prototype.parent = function () {
    return this.parent_;
  };
  /**
   * Adds or removes this child from its parent based on whether it's empty or not.
   *
   * @private
   */


  Tree.prototype.updateParents_ = function () {
    if (this.parent_ !== null) {
      this.parent_.updateChild_(this.name_, this);
    }
  };
  /**
   * Adds or removes the passed child to this tree node, depending on whether it's empty.
   *
   * @param {string} childName The name of the child to update.
   * @param {!Tree.<T>} child The child to update.
   * @private
   */


  Tree.prototype.updateChild_ = function (childName, child) {
    var childEmpty = child.isEmpty();
    var childExists = util.contains(this.node_.children, childName);

    if (childEmpty && childExists) {
      delete this.node_.children[childName];
      this.node_.childCount--;
      this.updateParents_();
    } else if (!childEmpty && !childExists) {
      this.node_.children[childName] = child.node_;
      this.node_.childCount++;
      this.updateParents_();
    }
  };

  return Tree;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
// For now it's part of Repo, but in its own file.

/**
 * @enum {number}
 */


var TransactionStatus;

(function (TransactionStatus) {
  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
  // mismatched hash.
  TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
  // or rejected yet).

  TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
  // removed when we get a chance to prune completed ones.

  TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
  // If it comes back as unsuccessful, we'll abort it.

  TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT"; // Temporary state used to mark transactions that need to be aborted.

  TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
})(TransactionStatus || (TransactionStatus = {}));
/**
 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
 * @type {number}
 * @const
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.MAX_TRANSACTION_RETRIES_ = 25;
/**
 * Setup the transaction data structures
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

Repo.prototype.transactionsInit_ = function () {
  /**
   * Stores queues of outstanding transactions for Firebase locations.
   *
   * @type {!Tree.<Array.<!Transaction>>}
   * @private
   */
  this.transactionQueueTree_ = new Tree();
};
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
 *
 * @param {!Path} path Path at which to do transaction.
 * @param {function(*):*} transactionUpdate Update callback.
 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
 * @param {boolean} applyLocally Whether or not to make intermediate results visible
 */


Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.

  var valueCallback = function () {};

  var watchRef = new Reference(this, path);
  watchRef.on('value', valueCallback);

  var unwatcher = function () {
    watchRef.off('value', valueCallback);
  }; // Initialize transaction.


  var transaction = {
    path: path,
    update: transactionUpdate,
    onComplete: onComplete,
    // One of TransactionStatus enums.
    status: null,
    // Used when combining transactions at different locations to figure out which one goes first.
    order: LUIDGenerator(),
    // Whether to raise local events for this transaction.
    applyLocally: applyLocally,
    // Count of how many times we've retried the transaction.
    retryCount: 0,
    // Function to call to clean up our .on() listener.
    unwatcher: unwatcher,
    // Stores why a transaction was aborted.
    abortReason: null,
    currentWriteId: null,
    currentInputSnapshot: null,
    currentOutputSnapshotRaw: null,
    currentOutputSnapshotResolved: null
  }; // Run transaction initially.

  var currentState = this.getLatestState_(path);
  transaction.currentInputSnapshot = currentState;
  var newVal = transaction.update(currentState.val());

  if (newVal === undefined) {
    // Abort transaction.
    transaction.unwatcher();
    transaction.currentOutputSnapshotRaw = null;
    transaction.currentOutputSnapshotResolved = null;

    if (transaction.onComplete) {
      // We just set the input snapshot, so this cast should be safe
      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
      transaction.onComplete(null, false, snapshot);
    }
  } else {
    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.

    transaction.status = TransactionStatus.RUN;
    var queueNode = this.transactionQueueTree_.subTree(path);
    var nodeQueue = queueNode.getValue() || [];
    nodeQueue.push(transaction);
    queueNode.setValue(nodeQueue); // Update visibleData and raise events
    // Note: We intentionally raise events after updating all of our transaction state, since the user could
    // start new transactions from the event callbacks.

    var priorityForNode = void 0;

    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      priorityForNode = util.safeGet(newVal, '.priority');
      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');
    } else {
      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;
      priorityForNode = currentNode.getPriority().val();
    }

    priorityForNode
    /** @type {null|number|string} */
    = priorityForNode;
    var serverValues = this.generateServerValues();
    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
    transaction.currentOutputSnapshotRaw = newNodeUnresolved;
    transaction.currentOutputSnapshotResolved = newNode;
    transaction.currentWriteId = this.getNextWriteId_();
    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
    this.eventQueue_.raiseEventsForChangedPath(path, events);
    this.sendReadyTransactions_();
  }
};
/**
 * @param {!Path} path
 * @param {Array.<number>=} excludeSets A specific set to exclude
 * @return {Node}
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.getLatestState_ = function (path, excludeSets) {
  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;
};
/**
 * Sends any already-run transactions that aren't waiting for outstanding transactions to
 * complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively with a particular
 * transactionQueueTree node to recurse through the tree.
 *
 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.sendReadyTransactions_ = function (node) {
  var _this = this;

  if (node === void 0) {
    node = this.transactionQueueTree_;
  } // Before recursing, make sure any completed transactions are removed.


  if (!node) {
    this.pruneCompletedTransactionsBelowNode_(node);
  }

  if (node.getValue() !== null) {
    var queue = this.buildTransactionQueue_(node);
    util.assert(queue.length > 0, 'Sending zero length transaction queue');
    var allRun = queue.every(function (transaction) {
      return transaction.status === TransactionStatus.RUN;
    }); // If they're all run (and not sent), we can send them.  Else, we must wait.

    if (allRun) {
      this.sendTransactionQueue_(node.path(), queue);
    }
  } else if (node.hasChildren()) {
    node.forEachChild(function (childNode) {
      _this.sendReadyTransactions_(childNode);
    });
  }
};
/**
 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
 *
 * @param {!Path} path The location of the queue.
 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.sendTransactionQueue_ = function (path, queue) {
  var _this = this; // Mark transactions as sent and increment retry count!


  var setsToIgnore = queue.map(function (txn) {
    return txn.currentWriteId;
  });
  var latestState = this.getLatestState_(path, setsToIgnore);
  var snapToSend = latestState;
  var latestHash = latestState.hash();

  for (var i = 0; i < queue.length; i++) {
    var txn = queue[i];
    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
    txn.status = TransactionStatus.SENT;
    txn.retryCount++;
    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.

    snapToSend = snapToSend.updateChild(relativePath
    /** @type {!Node} */
    , txn.currentOutputSnapshotRaw);
  }

  var dataToSend = snapToSend.val(true);
  var pathToSend = path; // Send the put.

  this.server_.put(pathToSend.toString(), dataToSend, function (status) {
    _this.log_('transaction put response', {
      path: pathToSend.toString(),
      status: status
    });

    var events = [];

    if (status === 'ok') {
      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
      // the callback could trigger more transactions or sets.
      var callbacks = [];

      for (var i = 0; i < queue.length; i++) {
        queue[i].status = TransactionStatus.COMPLETED;
        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));

        if (queue[i].onComplete) {
          // We never unset the output snapshot, and given that this transaction is complete, it should be set
          var node = queue[i].currentOutputSnapshotResolved;
          var ref = new Reference(_this, queue[i].path);
          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
        }

        queue[i].unwatcher();
      } // Now remove the completed transactions.


      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.


      _this.sendReadyTransactions_();

      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.


      for (var i = 0; i < callbacks.length; i++) {
        exceptionGuard(callbacks[i]);
      }
    } else {
      // transactions are no longer sent.  Update their status appropriately.
      if (status === 'datastale') {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
            queue[i].status = TransactionStatus.NEEDS_ABORT;
          } else {
            queue[i].status = TransactionStatus.RUN;
          }
        }
      } else {
        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);

        for (var i = 0; i < queue.length; i++) {
          queue[i].status = TransactionStatus.NEEDS_ABORT;
          queue[i].abortReason = status;
        }
      }

      _this.rerunTransactions_(path);
    }
  }, latestHash);
};
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
 * be raised for.
 *
 * @param {!Path} changedPath The path in mergedData that changed.
 * @return {!Path} The rootmost path that was affected by rerunning transactions.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.rerunTransactions_ = function (changedPath) {
  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
  var path = rootMostTransactionNode.path();
  var queue = this.buildTransactionQueue_(rootMostTransactionNode);
  this.rerunTransactionQueue_(queue, path);
  return path;
};
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
 *
 * @param {Array.<Transaction>} queue The queue of transactions to run.
 * @param {!Path} path The path the queue is for.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
  if (queue.length === 0) {
    return; // Nothing to do!
  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
  // the callback could trigger more transactions or sets.


  var callbacks = [];
  var events = []; // Ignore all of the sets we're going to re-run.

  var txnsToRerun = queue.filter(function (q) {
    return q.status === TransactionStatus.RUN;
  });
  var setsToIgnore = txnsToRerun.map(function (q) {
    return q.currentWriteId;
  });

  for (var i = 0; i < queue.length; i++) {
    var transaction = queue[i];
    var relativePath = Path.relativePath(path, transaction.path);
    var abortTransaction = false,
        abortReason = void 0;
    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');

    if (transaction.status === TransactionStatus.NEEDS_ABORT) {
      abortTransaction = true;
      abortReason = transaction.abortReason;
      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
    } else if (transaction.status === TransactionStatus.RUN) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
        abortTransaction = true;
        abortReason = 'maxretry';
        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
      } else {
        // This code reruns a transaction
        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
        transaction.currentInputSnapshot = currentNode;
        var newData = queue[i].update(currentNode.val());

        if (newData !== undefined) {
          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
          var newDataNode = nodeFromJSON$1(newData);
          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');

          if (!hasExplicitPriority) {
            // Keep the old priority if there wasn't a priority explicitly specified.
            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
          }

          var oldWriteId = transaction.currentWriteId;
          var serverValues = this.generateServerValues();
          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
          transaction.currentOutputSnapshotRaw = newDataNode;
          transaction.currentOutputSnapshotResolved = newNodeResolved;
          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place

          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
        } else {
          abortTransaction = true;
          abortReason = 'nodata';
          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
        }
      }
    }

    this.eventQueue_.raiseEventsForChangedPath(path, events);
    events = [];

    if (abortTransaction) {
      // Abort.
      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
      // So defer the unwatcher until we're done.

      (function (unwatcher) {
        setTimeout(unwatcher, Math.floor(0));
      })(queue[i].unwatcher);

      if (queue[i].onComplete) {
        if (abortReason === 'nodata') {
          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot

          var lastInput
          /** @type {!Node} */
          = queue[i].currentInputSnapshot;
          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
        } else {
          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
        }
      }
    }
  } // Clean up completed transactions.


  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.

  for (var i = 0; i < callbacks.length; i++) {
    exceptionGuard(callbacks[i]);
  } // Try to send the transaction result to the server.


  this.sendReadyTransactions_();
};
/**
 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
 * the node for the given path if there are no pending transactions on any ancestor.
 *
 * @param {!Path} path The location to start at.
 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.getAncestorTransactionNode_ = function (path) {
  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.

  var transactionNode = this.transactionQueueTree_;
  front = path.getFront();

  while (front !== null && transactionNode.getValue() === null) {
    transactionNode = transactionNode.subTree(front);
    path = path.popFront();
    front = path.getFront();
  }

  return transactionNode;
};
/**
 * Builds the queue of all transactions at or below the specified transactionNode.
 *
 * @param {!Tree.<Array.<Transaction>>} transactionNode
 * @return {Array.<Transaction>} The generated queue.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
  // Walk any child transaction queues and aggregate them into a single queue.
  var transactionQueue = [];
  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.

  transactionQueue.sort(function (a, b) {
    return a.order - b.order;
  });
  return transactionQueue;
};
/**
 * @param {!Tree.<Array.<Transaction>>} node
 * @param {Array.<Transaction>} queue
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
  var _this = this;

  var nodeQueue = node.getValue();

  if (nodeQueue !== null) {
    for (var i = 0; i < nodeQueue.length; i++) {
      queue.push(nodeQueue[i]);
    }
  }

  node.forEachChild(function (child) {
    _this.aggregateTransactionQueuesForNode_(child, queue);
  });
};
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 *
 * @param {!Tree.<Array.<!Transaction>>} node
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
  var _this = this;

  var queue = node.getValue();

  if (queue) {
    var to = 0;

    for (var from = 0; from < queue.length; from++) {
      if (queue[from].status !== TransactionStatus.COMPLETED) {
        queue[to] = queue[from];
        to++;
      }
    }

    queue.length = to;
    node.setValue(queue.length > 0 ? queue : null);
  }

  node.forEachChild(function (childNode) {
    _this.pruneCompletedTransactionsBelowNode_(childNode);
  });
};
/**
 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
 * since we consider them incompatible with transactions.
 *
 * @param {!Path} path Path for which we want to abort related transactions.
 * @return {!Path}
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.abortTransactions_ = function (path) {
  var _this = this;

  var affectedPath = this.getAncestorTransactionNode_(path).path();
  var transactionNode = this.transactionQueueTree_.subTree(path);
  transactionNode.forEachAncestor(function (node) {
    _this.abortTransactionsOnNode_(node);
  });
  this.abortTransactionsOnNode_(transactionNode);
  transactionNode.forEachDescendant(function (node) {
    _this.abortTransactionsOnNode_(node);
  });
  return affectedPath;
};
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


Repo.prototype.abortTransactionsOnNode_ = function (node) {
  var queue = node.getValue();

  if (queue !== null) {
    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
    // the callback could trigger more transactions or sets.
    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
    // can be immediately aborted and removed.

    var events = [];
    var lastSent = -1;

    for (var i = 0; i < queue.length; i++) {
      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {
        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
        lastSent = i; // Mark transaction for abort when it comes back.

        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
        queue[i].abortReason = 'set';
      } else {
        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.

        queue[i].unwatcher();
        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));

        if (queue[i].onComplete) {
          var snapshot = null;
          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
        }
      }
    }

    if (lastSent === -1) {
      // We're not waiting for any sent transactions.  We can clear the queue.
      node.setValue(null);
    } else {
      // Remove the transactions we aborted.
      queue.length = lastSent + 1;
    } // Now fire the callbacks.


    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);

    for (var i = 0; i < callbacks.length; i++) {
      exceptionGuard(callbacks[i]);
    }
  }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */


var FirebaseAuthTokenProvider =
/** @class */
function () {
  function FirebaseAuthTokenProvider(app_, authProvider_) {
    var _this = this;

    this.app_ = app_;
    this.authProvider_ = authProvider_;
    this.auth_ = null;
    this.auth_ = authProvider_.getImmediate({
      optional: true
    });

    if (!this.auth_) {
      authProvider_.get().then(function (auth) {
        return _this.auth_ = auth;
      });
    }
  }
  /**
   * @param {boolean} forceRefresh
   * @return {!Promise<FirebaseAuthTokenData>}
   */


  FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {
    if (!this.auth_) {
      return Promise.resolve(null);
    }

    return this.auth_.getToken(forceRefresh).catch(function (error) {
      // TODO: Need to figure out all the cases this is raised and whether
      // this makes sense.
      if (error && error.code === 'auth/token-not-initialized') {
        log('Got auth/token-not-initialized error.  Treating as null token.');
        return null;
      } else {
        return Promise.reject(error);
      }
    });
  };

  FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
    // TODO: We might want to wrap the listener and call it with no args to
    // avoid a leaky abstraction, but that makes removing the listener harder.
    if (this.auth_) {
      this.auth_.addAuthTokenListener(listener);
    } else {
      setTimeout(function () {
        return listener(null);
      }, 0);
      this.authProvider_.get().then(function (auth) {
        return auth.addAuthTokenListener(listener);
      });
    }
  };

  FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
    this.authProvider_.get().then(function (auth) {
      return auth.removeAuthTokenListener(listener);
    });
  };

  FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {
    var errorMessage = 'Provided authentication credentials for the app named "' + this.app_.name + '" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';

    if ('credential' in this.app_.options) {
      errorMessage += 'Make sure the "credential" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
    } else if ('serviceAccount' in this.app_.options) {
      errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
    } else {
      errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';
    }

    warn(errorMessage);
  };

  return FirebaseAuthTokenProvider;
}();
/* Auth token provider that the Admin SDK uses to connect to the Emulator. */


var EmulatorAdminTokenProvider =
/** @class */
function () {
  function EmulatorAdminTokenProvider() {}

  EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {
    return Promise.resolve({
      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN
    });
  };

  EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {
    // Invoke the listener immediately to match the behavior in Firebase Auth
    // (see packages/auth/src/auth.js#L1807)
    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);
  };

  EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) {};

  EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () {};

  EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';
  return EmulatorAdminTokenProvider;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @const {string} */


var DATABASE_URL_OPTION = 'databaseURL';
/**
 * This variable is also defined in the firebase node.js admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */

var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';

var _staticInstance;
/**
 * Creates and caches Repo instances.
 */


var RepoManager =
/** @class */
function () {
  function RepoManager() {
    /**
     * @private {!Object.<string, Object<string, !fb.core.Repo>>}
     */
    this.repos_ = {};
    /**
     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
     * @private {boolean}
     */

    this.useRestClient_ = false;
  }

  RepoManager.getInstance = function () {
    if (!_staticInstance) {
      _staticInstance = new RepoManager();
    }

    return _staticInstance;
  }; // TODO(koss): Remove these functions unless used in tests?


  RepoManager.prototype.interrupt = function () {
    var e_1, _a, e_2, _b;

    try {
      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
        var appName = _d.value;

        try {
          for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
            var dbUrl = _f.value;
            this.repos_[appName][dbUrl].interrupt();
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  RepoManager.prototype.resume = function () {
    var e_3, _a, e_4, _b;

    try {
      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
        var appName = _d.value;

        try {
          for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
            var dbUrl = _f.value;
            this.repos_[appName][dbUrl].resume();
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
  };
  /**
   * This function should only ever be called to CREATE a new database instance.
   *
   * @param {!FirebaseApp} app
   * @return {!Database}
   */


  RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {
    var dbUrl = url || app.options[DATABASE_URL_OPTION];

    if (dbUrl === undefined) {
      fatal("Can't determine Firebase Database URL.  Be sure to include " + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');
    }

    var parsedUrl = parseRepoInfo(dbUrl);
    var repoInfo = parsedUrl.repoInfo;
    var isEmulator;
    var dbEmulatorHost = undefined;

    if (typeof process !== 'undefined') {
      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
    }

    if (dbEmulatorHost) {
      isEmulator = true;
      dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
      parsedUrl = parseRepoInfo(dbUrl);
      repoInfo = parsedUrl.repoInfo;
    } else {
      isEmulator = !parsedUrl.repoInfo.secure;
    }

    var authTokenProvider = util.CONSTANTS.NODE_ADMIN && isEmulator ? new EmulatorAdminTokenProvider() : new FirebaseAuthTokenProvider(app, authProvider);
    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);

    if (!parsedUrl.path.isEmpty()) {
      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');
    }

    var repo = this.createRepo(repoInfo, app, authTokenProvider);
    return repo.database;
  };
  /**
   * Remove the repo and make sure it is disconnected.
   *
   * @param {!Repo} repo
   */


  RepoManager.prototype.deleteRepo = function (repo) {
    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...

    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
      fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
    }

    repo.interrupt();
    delete appRepos[repo.repoInfo_.toURLString()];
  };
  /**
   * Ensures a repo doesn't already exist and then creates one using the
   * provided app.
   *
   * @param {!RepoInfo} repoInfo The metadata about the Repo
   * @param {!FirebaseApp} app
   * @return {!Repo} The Repo object for the specified server / repoName.
   */


  RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {
    var appRepos = util.safeGet(this.repos_, app.name);

    if (!appRepos) {
      appRepos = {};
      this.repos_[app.name] = appRepos;
    }

    var repo = util.safeGet(appRepos, repoInfo.toURLString());

    if (repo) {
      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
    }

    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);
    appRepos[repoInfo.toURLString()] = repo;
    return repo;
  };
  /**
   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
   * @param {boolean} forceRestClient
   */


  RepoManager.prototype.forceRestClient = function (forceRestClient) {
    this.useRestClient_ = forceRestClient;
  };

  return RepoManager;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class representing a firebase database.
 * @implements {FirebaseService}
 */


var Database =
/** @class */
function () {
  /**
   * The constructor should not be called by users of our public API.
   * @param {!Repo} repo_
   */
  function Database(repo_) {
    this.repo_ = repo_;

    if (!(repo_ instanceof Repo)) {
      fatal("Don't call new Database() directly - please use firebase.database().");
    }
    /** @type {Reference} */


    this.root_ = new Reference(repo_, Path.Empty);
    this.INTERNAL = new DatabaseInternals(this);
  }

  Object.defineProperty(Database.prototype, "app", {
    get: function () {
      return this.repo_.app;
    },
    enumerable: false,
    configurable: true
  });

  Database.prototype.ref = function (path) {
    this.checkDeleted_('ref');
    util.validateArgCount('database.ref', 0, 1, arguments.length);

    if (path instanceof Reference) {
      return this.refFromURL(path.toString());
    }

    return path !== undefined ? this.root_.child(path) : this.root_;
  };
  /**
   * Returns a reference to the root or the path specified in url.
   * We throw a exception if the url is not in the same domain as the
   * current repo.
   * @param {string} url
   * @return {!Reference} Firebase reference.
   */


  Database.prototype.refFromURL = function (url) {
    /** @const {string} */
    var apiName = 'database.refFromURL';
    this.checkDeleted_(apiName);
    util.validateArgCount(apiName, 1, 1, arguments.length);
    var parsedURL = parseRepoInfo(url);
    validateUrl(apiName, 1, parsedURL);
    var repoInfo = parsedURL.repoInfo;

    if (repoInfo.host !== this.repo_.repoInfo_.host) {
      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');
    }

    return this.ref(parsedURL.path.toString());
  };
  /**
   * @param {string} apiName
   */


  Database.prototype.checkDeleted_ = function (apiName) {
    if (this.repo_ === null) {
      fatal('Cannot call ' + apiName + ' on a deleted database.');
    }
  }; // Make individual repo go offline.


  Database.prototype.goOffline = function () {
    util.validateArgCount('database.goOffline', 0, 0, arguments.length);
    this.checkDeleted_('goOffline');
    this.repo_.interrupt();
  };

  Database.prototype.goOnline = function () {
    util.validateArgCount('database.goOnline', 0, 0, arguments.length);
    this.checkDeleted_('goOnline');
    this.repo_.resume();
  };

  Database.ServerValue = {
    TIMESTAMP: {
      '.sv': 'timestamp'
    },
    increment: function (delta) {
      return {
        '.sv': {
          'increment': delta
        }
      };
    }
  };
  return Database;
}();

var DatabaseInternals =
/** @class */
function () {
  /** @param {!Database} database */
  function DatabaseInternals(database) {
    this.database = database;
  }
  /** @return {Promise<void>} */


  DatabaseInternals.prototype.delete = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.database.checkDeleted_('delete'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

        RepoManager.getInstance().deleteRepo(this.database.repo_); // eslint-disable-next-line @typescript-eslint/no-explicit-any

        this.database.repo_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any

        this.database.root_ = null;
        this.database.INTERNAL = null;
        this.database = null;
        return [2
        /*return*/
        ];
      });
    });
  };

  return DatabaseInternals;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 *
 * @const
 */


var forceLongPolling = function () {
  WebSocketConnection.forceDisallow();
  BrowserPollConnection.forceAllow();
};

var forceWebSockets = function () {
  BrowserPollConnection.forceDisallow();
};
/* Used by App Manager */


var isWebSocketsAvailable = function () {
  return WebSocketConnection['isAvailable']();
};

var setSecurityDebugCallback = function (ref, callback) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  ref.repo.persistentConnection_.securityDebugCallback_ = callback;
};

var stats = function (ref, showDelta) {
  ref.repo.stats(showDelta);
};

var statsIncrementCounter = function (ref, metric) {
  ref.repo.statsIncrementCounter(metric);
};

var dataUpdateCount = function (ref) {
  return ref.repo.dataUpdateCount;
};

var interceptServerData = function (ref, callback) {
  return ref.repo.interceptServerData_(callback);
};

var INTERNAL = /*#__PURE__*/Object.freeze({
  __proto__: null,
  forceLongPolling: forceLongPolling,
  forceWebSockets: forceWebSockets,
  isWebSocketsAvailable: isWebSocketsAvailable,
  setSecurityDebugCallback: setSecurityDebugCallback,
  stats: stats,
  statsIncrementCounter: statsIncrementCounter,
  dataUpdateCount: dataUpdateCount,
  interceptServerData: interceptServerData
});
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DataConnection = PersistentConnection;
/**
 * @param {!string} pathString
 * @param {function(*)} onComplete
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
  this.sendRequest('q', {
    p: pathString
  }, onComplete);
};
/**
 * @param {*} data
 * @param {function(*)} onEcho
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


PersistentConnection.prototype.echo = function (data, onEcho) {
  this.sendRequest('echo', {
    d: data
  }, onEcho);
}; // RealTimeConnection properties that we use in tests.


var RealTimeConnection = Connection;
/**
 * @param {function(): string} newHash
 * @return {function()}
 */

var hijackHash = function (newHash) {
  var oldPut = PersistentConnection.prototype.put;

  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
    if (hash !== undefined) {
      hash = newHash();
    }

    oldPut.call(this, pathString, data, onComplete, hash);
  };

  return function () {
    PersistentConnection.prototype.put = oldPut;
  };
};
/**
 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
 */


var ConnectionTarget = RepoInfo;
/**
 * @param {!Query} query
 * @return {!string}
 */

var queryIdentifier = function (query) {
  return query.queryIdentifier();
};
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 *
 * @param {boolean} forceRestClient
 */


var forceRestClient = function (forceRestClient) {
  RepoManager.getInstance().forceRestClient(forceRestClient);
};

var TEST_ACCESS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  DataConnection: DataConnection,
  RealTimeConnection: RealTimeConnection,
  hijackHash: hijackHash,
  ConnectionTarget: ConnectionTarget,
  queryIdentifier: queryIdentifier,
  forceRestClient: forceRestClient
});
var name = "@firebase/database";
var version = "0.6.9";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ServerValue = Database.ServerValue;

function registerDatabase(instance) {
  // set SDK_VERSION
  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.

  var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {
    /* Dependencies */
    // getImmediate for FirebaseApp will always succeed
    var app = container.getProvider('app').getImmediate();
    var authProvider = container.getProvider('auth-internal');
    return RepoManager.getInstance().databaseFromApp(app, authProvider, url);
  }, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps( // firebase.database namespace properties
  {
    Reference: Reference,
    Query: Query,
    Database: Database,
    DataSnapshot: DataSnapshot,
    enableLogging: enableLogging,
    INTERNAL: INTERNAL,
    ServerValue: ServerValue,
    TEST_ACCESS: TEST_ACCESS
  }).setMultipleInstances(true));
  instance.registerVersion(name, version);

  if (util.isNodeSdk()) {
    module.exports = namespace;
  }
}

registerDatabase(firebase);
exports.DataSnapshot = DataSnapshot;
exports.Database = Database;
exports.OnDisconnect = OnDisconnect;
exports.Query = Query;
exports.Reference = Reference;
exports.ServerValue = ServerValue;
exports.enableLogging = enableLogging;
exports.registerDatabase = registerDatabase; //# sourceMappingURL=index.cjs.js.map
},{"process":"5c67a338692e43521550fae6ba10bde5","@firebase/app":"0cfff882ee3888779c3bf30fe1e08d98","tslib":"a212b5bd40bedbc434eaed1b3a2942b1","@firebase/util":"05ebe87642faf12e3e6a5d8e2606f105","@firebase/logger":"3a15e19ab036c3aaea02d8f124f3414e","@firebase/component":"801a7b364998ef33b32e280aac4fea1a"}],"5c67a338692e43521550fae6ba10bde5":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"f13df1fcdf468d455bc8026f71881581":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spiritImage = _interopRequireDefault(require("url:../../images/spirit-image-1.jpg"));

var _spiritImage2 = _interopRequireDefault(require("url:../../images/spirit-image-2.jpg"));

var _spiritImage3 = _interopRequireDefault(require("url:../../images/spirit-image-3.jpg"));

var _spiritImage4 = _interopRequireDefault(require("url:../../images/spirit-image-4.jpg"));

var _spiritImage5 = _interopRequireDefault(require("url:../../images/spirit-image-5.jpg"));

var _spiritImage6 = _interopRequireDefault(require("url:../../images/spirit-image-6.jpg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FLASH_CLASS = 'screen--flash';
const ACTIVE_CLASS = 'screen--visible';
const BACKGROUND_ID = 'background';
const animalImages = {
  image1: _spiritImage.default,
  image2: _spiritImage2.default,
  image3: _spiritImage3.default,
  image4: _spiritImage4.default,
  image5: _spiritImage5.default,
  image6: _spiritImage6.default
};

class Visuals {
  constructor(elem, color) {
    this.elem = elem;
    this.backgroundElem = document.getElementById(BACKGROUND_ID);
    this.timeout = null;
  }

  setToColor(color) {
    this.elem.style.backgroundColor = 'rgb(' + color.join(',') + ')';
  }

  resetColor() {
    this.elem.style.backgroundColor = null;
  }

  setAnimal(animalName) {
    this.elem.classList.add(ACTIVE_CLASS);
    this.backgroundElem.style.backgroundImage = `url(${animalImages[animalName]})`;
  }

  flash(duration = 200) {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }

    this.elem.classList.add(FLASH_CLASS);
    this.timeout = setTimeout(() => {
      this.elem.classList.remove(FLASH_CLASS);
    }, duration);
  }

}

exports.default = Visuals;
},{"url:../../images/spirit-image-1.jpg":"69f5ac3d08ae70ce5a7261a19e10a261","url:../../images/spirit-image-2.jpg":"21ff8c2bf380f542d34bdbb1d95973dd","url:../../images/spirit-image-3.jpg":"b913f2f4c15852376de0a4130658dd05","url:../../images/spirit-image-4.jpg":"c9866899c3aa31b5c79342cc1046aa89","url:../../images/spirit-image-5.jpg":"31ada76f8e0c0dcd0b6cb855888c820a","url:../../images/spirit-image-6.jpg":"a339bfb7fd7188e9e786f6980b061057"}],"69f5ac3d08ae70ce5a7261a19e10a261":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "01d5d156abfbe213");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"21ff8c2bf380f542d34bdbb1d95973dd":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "82fdf87582ab1115");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"b913f2f4c15852376de0a4130658dd05":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "9ab0e0b5b5dd2a70");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"c9866899c3aa31b5c79342cc1046aa89":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "29418713793e1c66");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"31ada76f8e0c0dcd0b6cb855888c820a":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "dbf3751bbf8da6f0");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"a339bfb7fd7188e9e786f6980b061057":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')("a6f0be86b872c13c", "16b51a3ab3f9eb21");
},{"./bundle-url":"2146da1905b95151ed14d455c784e7b7","./relative-path":"1b9943ef25c7bbdf0dd1b9fa91880a6c"}],"d3815e857d32889aef5b29f3ae04f688":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const UPDATE_RATE = 10;
const HP_FREQUENCY = 300;
const LP_FREQUENCY = 4000;

class Audio {
  setup(useMic) {
    const Tone = require('tone');

    this.agents = []; // Start our runtime

    this.startTime = Date.now(); // this.analyser = new Tone.Waveform(256)

    this.gain = new Tone.Volume(); // Create audio nodes

    if (useMic) {
      console.log("Getting mic");
      this.mic = new Tone.UserMedia();
      console.log("Got mic"); // Make the frequency band a little bit more narrow

      const highpass = new Tone.Filter({
        frequency: HP_FREQUENCY,
        type: 'highpass',
        rolloff: -12,
        Q: 0.5
      });
      const lowpass = new Tone.Filter({
        frequency: LP_FREQUENCY,
        type: 'lowpass',
        rolloff: -12,
        Q: 0.5
      }); // Use gain to control volume of microphone

      this.mic.connect(highpass);
      highpass.connect(lowpass);
      lowpass.connect(this.gain); // this.gain.connect(this.analyser)
      // Listen ...

      this.mic.open();
      console.log("Opened mic!", this.gain);
    } // Start a frequent check by calling the agents update function


    this.update();
    return true;
  }

  close() {
    this.mic.close();
  }

  addAgents(addedAgents) {
    addedAgents.forEach(newAgent => {
      this.agents.push(newAgent);
      newAgent.start();
    });
  }

  removeAgents(removedAgents) {
    const agentNames = removedAgents.map(agent => agent.name);
    this.agents = this.agents.reduce((acc, existingAgent) => {
      if (agentNames.includes(existingAgent.name)) {
        existingAgent.stop();
      } else {
        acc.push(existingAgent);
      }

      return acc;
    }, []);
  }

  update() {
    setTimeout(() => {
      // console.log("Update");
      if (!this.agents) {
        this.update();
        return;
      } // const values = this.analyser.getValue()


      this.agents.forEach(agent => {
        agent.update();
      });
      this.update();
    }, UPDATE_RATE);
  }

}

exports.default = Audio;
},{"tone":"b8906ac01d5dae3b93be7106dc3620c6"}],"b8906ac01d5dae3b93be7106dc3620c6":[function(require,module,exports) {
var define;
!function (t, e) {
  "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.Tone = e() : t.Tone = e();
}("undefined" != typeof self ? self : this, function () {
  return function (t) {
    var e = {};

    function n(s) {
      if (e[s]) return e[s].exports;
      var i = e[s] = {
        i: s,
        l: !1,
        exports: {}
      };
      return t[s].call(i.exports, i, i.exports, n), i.l = !0, i.exports;
    }

    return n.m = t, n.c = e, n.d = function (t, e, s) {
      n.o(t, e) || Object.defineProperty(t, e, {
        enumerable: !0,
        get: s
      });
    }, n.r = function (t) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }, n.t = function (t, e) {
      if (1 & e && (t = n(t)), 8 & e) return t;
      if (4 & e && "object" == typeof t && t && t.__esModule) return t;
      var s = Object.create(null);
      if (n.r(s), Object.defineProperty(s, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var i in t) n.d(s, i, function (e) {
        return t[e];
      }.bind(null, i));
      return s;
    }, n.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };
      return n.d(e, "a", e), e;
    }, n.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, n.p = "", n(n.s = 684);
  }([function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    }), n.d(e, "b", function () {
      return i;
    }), n.d(e, "c", function () {
      return o;
    }), n.d(e, "d", function () {
      return r;
    }), n.d(e, "e", function () {
      return a;
    }), n.d(e, "f", function () {
      return c;
    }), n.d(e, "g", function () {
      return u;
    }), n.d(e, "i", function () {
      return h;
    }), n.d(e, "h", function () {
      return l;
    }), n.d(e, "j", function () {
      return d;
    }), n.d(e, "k", function () {
      return p;
    });
    const s = new WeakSet(),
          i = new WeakMap(),
          o = new WeakMap(),
          r = new WeakMap(),
          a = new WeakMap(),
          c = new WeakMap(),
          u = new WeakMap(),
          h = new WeakMap(),
          l = new WeakMap(),
          d = new WeakMap(),
          p = new WeakMap();
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(4);

    const i = (t, e) => {
      Object(s.a)(t, e, "channelCount"), Object(s.a)(t, e, "channelCountMode"), Object(s.a)(t, e, "channelInterpretation");
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    }), n.d(e, "b", function () {
      return i;
    });
    const s = -34028234663852886e22,
          i = -s;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => t.context === e;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => {
      const s = e[n];
      void 0 !== s && s !== t[n] && (t[n] = s);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => {
      const s = e[n];
      void 0 !== s && s !== t[n].value && (t[n].value = s);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(9);

    const o = t => Object(i.a)(s.c, t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "InvalidStateError");
      } catch (t) {
        return t.code = 11, t.name = "InvalidStateError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(9);

    const o = t => Object(i.a)(s.b, t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => {
      const n = t.get(e);
      if (void 0 === n) throw new Error("A value with the given key could not be found.");
      return n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "NotSupportedError");
      } catch (t) {
        return t.code = 9, t.name = "NotSupportedError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (t.connect = e.connect.bind(e), t.disconnect = e.disconnect.bind(e), t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => "inputs" in t;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "AudioContext", function () {
      return Oi;
    }), n.d(e, "AudioWorkletNode", function () {
      return qi;
    }), n.d(e, "OfflineAudioContext", function () {
      return Vi;
    }), n.d(e, "isAnyAudioContext", function () {
      return Ni;
    }), n.d(e, "isAnyAudioNode", function () {
      return Pi;
    }), n.d(e, "isAnyAudioParam", function () {
      return Li;
    }), n.d(e, "isAnyOfflineAudioContext", function () {
      return zi;
    }), n.d(e, "isSupported", function () {
      return Bi;
    });

    var s = n(18),
        i = n(516),
        o = n(517),
        r = n(518),
        a = n(667),
        c = n(519),
        u = n(520),
        h = n(521),
        l = n(522),
        d = n(523),
        p = n(524),
        f = n(525),
        _ = n(526),
        m = n(527),
        g = n(528),
        v = n(529),
        y = n(665),
        b = n(530),
        x = n(531),
        w = n(532),
        T = n(670),
        O = n(533),
        S = n(534),
        C = n(535),
        k = n(536),
        A = n(537),
        D = n(538),
        M = n(539),
        j = n(540),
        E = n(541),
        R = n(542),
        q = n(543),
        I = n(544),
        F = n(545),
        V = n(546),
        N = n(547),
        P = n(548),
        L = n(549),
        z = n(550),
        B = n(671),
        W = n(551),
        U = n(552),
        G = n(553),
        Y = n(554),
        Q = n(672),
        Z = n(555),
        X = n(556),
        H = n(557),
        $ = n(558),
        J = n(559),
        K = n(560),
        tt = n(561),
        et = n(562),
        nt = n(563),
        st = n(564),
        it = n(565),
        ot = n(566),
        rt = n(567),
        at = n(568),
        ct = n(569),
        ut = n(673),
        ht = n(570),
        lt = n(571),
        dt = n(15),
        pt = n(37),
        ft = n(7),
        _t = n(572),
        mt = n(573),
        gt = n(574),
        vt = n(575),
        yt = n(576),
        bt = n(577),
        xt = n(578),
        wt = n(579),
        Tt = n(580),
        Ot = n(581),
        St = n(582),
        Ct = n(583),
        kt = n(584),
        At = n(585),
        Dt = n(586),
        Mt = n(587),
        jt = n(588),
        Et = n(589),
        Rt = n(590),
        qt = n(668),
        It = n(591),
        Ft = n(669),
        Vt = n(592),
        Nt = n(593),
        Pt = n(594),
        Lt = n(595),
        zt = n(674),
        Bt = n(666),
        Wt = n(596),
        Ut = n(597),
        Gt = n(675),
        Yt = n(598),
        Qt = n(599),
        Zt = n(600),
        Xt = n(601),
        Ht = n(602),
        $t = n(603),
        Jt = n(604),
        Kt = n(605),
        te = n(606),
        ee = n(607),
        ne = n(608),
        se = n(609),
        ie = n(610),
        oe = n(611),
        re = n(612),
        ae = n(613),
        ce = n(614),
        ue = n(615),
        he = n(616),
        le = n(617),
        de = n(618),
        pe = n(619),
        fe = n(620),
        _e = n(10),
        me = n(621),
        ge = n(622),
        ve = n(623),
        ye = n(624),
        be = n(625),
        xe = n(626),
        we = n(627),
        Te = n(628),
        Oe = n(629),
        Se = n(630),
        Ce = n(631),
        ke = n(632),
        Ae = n(633),
        De = n(634),
        Me = n(635),
        je = n(636),
        Ee = n(637),
        Re = n(638),
        qe = n(639),
        Ie = n(640),
        Fe = n(641),
        Ve = n(642),
        Ne = n(643),
        Pe = n(644),
        Le = n(645),
        ze = n(646),
        Be = n(647),
        We = n(648),
        Ue = n(649),
        Ge = n(650),
        Ye = n(651),
        Qe = n(652),
        Ze = n(653),
        Xe = n(654),
        He = n(44),
        $e = n(655),
        Je = n(656),
        Ke = n(657),
        tn = n(658),
        en = n(659),
        nn = n(660),
        sn = n(661),
        on = n(662),
        rn = n(0),
        an = n(33),
        cn = n(34),
        un = n(8),
        hn = n(26),
        ln = n(6),
        dn = n(27),
        pn = n(9),
        fn = n(16),
        _n = n(23),
        mn = n(45),
        gn = n(19),
        vn = n(38),
        yn = n(32),
        bn = n(14),
        xn = n(663),
        wn = n(664),
        Tn = n(28);

    n(46), n(130);

    const On = Object(k.a)(new Map(), new WeakMap()),
          Sn = Object(Ke.a)(),
          Cn = Object(oe.a)(Sn),
          kn = Object(Tt.a)(Cn),
          An = Object(Vt.a)(Sn),
          Dn = Object(rt.a)(kn, An, Cn),
          Mn = Object(Pt.a)(Dn),
          jn = Object(qt.a)(On, dt.a, Mn),
          En = Object(it.a)(un.a),
          Rn = Object(Te.a)(un.a, En, gn.a),
          qn = Object(l.a)(jn, ln.a, Rn),
          In = new WeakMap(),
          Fn = Object(at.a)(rn.g),
          Vn = new WeakMap(),
          Nn = Object(K.a)(Tn.a),
          Pn = Object(yt.a)(An),
          Ln = Object(bt.a)(Sn),
          zn = Object(xt.a)(Sn),
          Bn = Object(y.a)(Object(o.a)(rn.b), In, On, Object(lt.a)(rn.h, cn.a, un.a, ln.a, dn.a, _n.a), dt.a, pt.a, _e.a, Object(W.a)(an.a, rn.h, un.a, ln.a, dn.a, Fn, _n.a, kn), Object(Q.a)(Vn, un.a, pn.a), Nn, Fn, Pn, Ln, zn, kn),
          Wn = Object(h.a)(Bn, qn, dt.a, jn, Fn, kn),
          Un = new WeakSet(),
          Gn = Object(It.a)(Sn),
          Yn = Object(V.a)(new Uint32Array(1)),
          Qn = Object(tn.a)(Yn, dt.a),
          Zn = Object(en.a)(Yn),
          Xn = Object(d.a)(Un, On, _e.a, Gn, Cn, Object(De.a)(Gn), Qn, Zn),
          Hn = Object(Jt.a)(Mn),
          $n = Object(c.a)(Hn),
          Jn = Object(Pe.a)(Mn),
          Kn = Object(Le.a)(Mn),
          ts = Object(ze.a)(Mn),
          es = Object(sn.a)(Mn),
          ns = Object(Oe.a)(En, hn.a, gn.a),
          ss = Object(E.a)(ns),
          is = Object(Ft.a)($n, On, Mn, Object(je.a)(Mn), Object(Ee.a)(Cn), Object(Re.a)(Mn), Object(qe.a)(Mn), Jn, Kn, ts, wn.a, Object(nn.a)(vn.a), es),
          os = Object(we.a)(Object(ot.a)(hn.a), ns),
          rs = Object(f.a)(ss, is, ln.a, os, Rn),
          as = Object(b.a)(Object(r.a)(rn.d), Vn, rn.e, x.a, s.createCancelAndHoldAutomationEvent, s.createCancelScheduledValuesAutomationEvent, s.createExponentialRampToValueAutomationEvent, s.createLinearRampToValueAutomationEvent, s.createSetTargetAutomationEvent, s.createSetValueAutomationEvent, s.createSetValueCurveAutomationEvent, An),
          cs = Object(p.a)(Bn, rs, as, ft.a, is, Fn, kn, Tn.a),
          us = Object(m.a)(Bn, g.a, dt.a, ft.a, Object(Nt.a)(Hn, vn.a), Fn, kn, Rn),
          hs = Object(Wt.a)(Mn),
          ls = Object(C.a)(ss, hs, ln.a, os, Rn),
          ds = Object(S.a)(Bn, as, ls, pt.a, hs, Fn, kn),
          ps = Object(Rt.a)(fn.a, Ln),
          fs = Object(on.a)(ft.a, Mn, ps),
          _s = Object(Ut.a)(Mn, fs),
          ms = Object(D.a)(_s, ln.a, Rn),
          gs = Object(A.a)(Bn, ms, _s, Fn, kn),
          vs = Object(Gt.a)(Mn),
          ys = Object(j.a)(vs, ln.a, Rn),
          bs = Object(M.a)(Bn, ys, vs, Fn, kn),
          xs = Object(Qt.a)($n, is, Hn, ps),
          ws = Object(Yt.a)($n, On, Mn, xs, Jn, ts),
          Ts = Object(F.a)(ss, ws, ln.a, os, Rn),
          Os = Object(I.a)(Bn, as, Ts, ws, Fn, kn, Tn.a),
          Ss = Object(Xt.a)(Mn, Hn, ps),
          Cs = Object(Zt.a)(Mn, Ss, _e.a, vn.a),
          ks = Object(P.a)(Cs, ln.a, Rn),
          As = Object(N.a)(Bn, ks, Cs, Fn, kn),
          Ds = Object(Ht.a)(Mn),
          Ms = Object(G.a)(ss, Ds, ln.a, os, Rn),
          js = Object(U.a)(Bn, as, Ms, Ds, Fn, kn),
          Es = Object($t.a)(Mn, _e.a),
          Rs = Object(H.a)(ss, Es, ln.a, os, Rn),
          qs = Object(X.a)(Bn, as, Rs, Es, _e.a, Fn, kn),
          Is = Object(st.a)(ss, Hn, ln.a, os, Rn),
          Fs = Object(nt.a)(Bn, as, Is, Hn, Fn, kn),
          Vs = Object(he.a)(Mn),
          Ns = Object(te.a)(pt.a, ft.a, Vs, _e.a),
          Ps = Object(Se.a)(On, Hn, Vs, Object(Ze.a)(Hn, Cn)),
          Ls = Object(ht.a)(is, Mn, ln.a, Cn, Rn, Ps),
          zs = Object(Kt.a)(Mn, Ns),
          Bs = Object(ut.a)(Bn, zs, Ls, Fn, kn),
          Ws = Object(v.a)(as, _s, ws, Vs, kn),
          Us = new WeakMap(),
          Gs = Object(jt.a)(us, Ws, Nn, kn, Us, Tn.a),
          Ys = Object(re.a)($n, On, Mn, Jn, Kn, ts, es),
          Qs = Object(ve.a)(ss, Ys, ln.a, os, Rn),
          Zs = Object(ge.a)(Bn, as, ft.a, Ys, Qs, Fn, kn, Tn.a),
          Xs = Object(q.a)(is),
          Hs = Object(fe.a)(Xs, ft.a, Mn, Hn, mn.a, ps),
          $s = Object(pe.a)(Xs, ft.a, Mn, Hs, mn.a, ps, vn.a),
          Js = Object(ce.a)(an.a, ft.a, Mn, _s, Hn, Vs, $s, _e.a, cn.a, ps),
          Ks = Object(ae.a)(Mn, Js),
          ti = Object(be.a)(ss, _s, ws, Hn, Ks, ln.a, Cn, os, Rn, Ps),
          ei = Object(ye.a)(Bn, as, Ks, ti, Fn, kn),
          ni = Object(ue.a)(Dn),
          si = Object(xe.a)(ni, Fn, new WeakSet()),
          ii = Object(de.a)(_s, vs, Hn, $s, _e.a, ps),
          oi = Object(le.a)(Mn, ii, _e.a),
          ri = Object(Ae.a)(ss, oi, ln.a, os, Rn),
          ai = Object(ke.a)(Bn, as, oi, ri, Fn, kn),
          ci = Object(Je.a)($s, ln.a, Rn),
          ui = Object($e.a)(Bn, ft.a, $s, ci, Fn, kn),
          hi = Object(Ot.a)(Sn),
          li = Object(tt.a)(Sn),
          di = hi ? Object(a.a)(_e.a, Object(J.a)(Sn), li, Object(et.a)(i.a), Dn, Fn, new WeakMap(), new WeakMap(), Sn) : void 0,
          pi = Object(wt.a)(Pn, kn),
          fi = Object(B.a)(Un, On, z.a, $.a, new WeakSet(), Fn, pi, kn, Cn, yn.a, bn.a, Qn, Zn),
          _i = Object(O.a)(di, Wn, Xn, cs, ds, gs, bs, Os, As, fi, js, qs, Fs, Bs, Gs, Zs, ei, si, ai, ui),
          mi = Object(ee.a)(Mn),
          gi = Object(Ct.a)(Bn, mi, Fn, kn),
          vi = Object(ne.a)(Mn, _e.a),
          yi = Object(kt.a)(Bn, vi, Fn, kn),
          bi = Object(se.a)(Mn),
          xi = Object(At.a)(Bn, bi, Fn, kn),
          wi = Object(ie.a)(ft.a, Mn, kn),
          Ti = Object(Dt.a)(Bn, wi, Fn),
          Oi = Object(_.a)(_i, ft.a, _e.a, He.a, gi, yi, xi, Ti, An),
          Si = Object(ct.a)(Us),
          Ci = Object(u.a)(Si),
          ki = Object(R.a)(dt.a),
          Ai = Object(Y.a)(Si),
          Di = Object(Z.a)(dt.a),
          Mi = Object(Bt.a)(In, ki, dt.a, ft.a, _s, vs, ws, Hn, Vs, _e.a, Di, li, ps),
          ji = Object(zt.a)(ft.a, Mn, Mi, Hn, _e.a, ps),
          Ei = Object(Lt.a)(Sn),
          Ri = Object(T.a)(ss, ki, is, _s, vs, ws, Hn, Ai, Di, li, ln.a, Ei, Cn, os, Rn, Ps),
          qi = hi ? Object(w.a)(Ci, Bn, as, Ri, ji, Fn, kn, Ei, Tn.a) : void 0,
          Ii = (Object(Mt.a)(ft.a, _e.a, He.a, Gs, An), Object(L.a)(_e.a, Cn)),
          Fi = Object(Ce.a)(Un, On, En, Si, Ps, yn.a, Qn, Zn),
          Vi = (Object(Et.a)(On, ft.a, Ii, Gs, Fi), Object(me.a)(_i, On, ft.a, Ii, Fi)),
          Ni = Object(_t.a)(rn.g, Pn),
          Pi = Object(mt.a)(rn.c, Ln),
          Li = Object(gt.a)(rn.e, zn),
          zi = Object(vt.a)(rn.g, kn),
          Bi = () => Object(St.a)(On, Object(Me.a)(Cn), Object(Ie.a)(An), Object(Fe.a)(Cn), Object(Ve.a)(An), Object(Ne.a)(Cn), Object(Be.a)(Ei, Cn), Object(We.a)(Mn, Cn), Object(Ue.a)(Mn, Cn), Object(Ge.a)(Cn), Object(Ye.a)(Sn), Object(Qe.a)(An), Object(Xe.a)(Cn), xn.a);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      const e = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);

      try {
        const n = t.decodeAudioData(e.buffer, () => {});
        return void 0 !== n && (n.catch(() => {}), !0);
      } catch {}

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "IndexSizeError");
      } catch (t) {
        return t.code = 1, t.name = "IndexSizeError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s) => {
      for (const e of t) if (n(e)) {
        if (s) return !1;
        throw Error("The set contains at least one similar element.");
      }

      return t.add(e), !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(20);

    const o = t => {
      if (s.a.has(t)) throw new Error("The AudioNode is already stored.");
      s.a.add(t), Object(i.a)(t).forEach(t => t(!0));
    };
  }, function (t, e, n) {
    !function (t, e, n, s) {
      "use strict";

      e = e && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e, n = n && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n, s = s && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;

      var i = function (t, e, n) {
        return {
          endTime: e,
          insertTime: n,
          type: "exponentialRampToValue",
          value: t
        };
      },
          o = function (t, e, n) {
        return {
          endTime: e,
          insertTime: n,
          type: "linearRampToValue",
          value: t
        };
      },
          r = function (t, e) {
        return {
          startTime: e,
          type: "setValue",
          value: t
        };
      },
          a = function (t, e, n) {
        return {
          duration: n,
          startTime: e,
          type: "setValueCurve",
          values: t
        };
      },
          c = function (t, e, n) {
        var s = n.startTime,
            i = n.target,
            o = n.timeConstant;
        return i + (e - i) * Math.exp((s - t) / o);
      },
          u = function (t) {
        return "exponentialRampToValue" === t.type;
      },
          h = function (t) {
        return "linearRampToValue" === t.type;
      },
          l = function (t) {
        return u(t) || h(t);
      },
          d = function (t) {
        return "setValue" === t.type;
      },
          p = function (t) {
        return "setValueCurve" === t.type;
      },
          f = function t(e, n, s, i) {
        var o = e[n];
        return void 0 === o ? i : l(o) || d(o) ? o.value : p(o) ? o.values[o.values.length - 1] : c(s, t(e, n - 1, o.startTime, i), o);
      },
          _ = function (t, e, n, s, i) {
        return void 0 === n ? [s.insertTime, i] : l(n) ? [n.endTime, n.value] : d(n) ? [n.startTime, n.value] : p(n) ? [n.startTime + n.duration, n.values[n.values.length - 1]] : [n.startTime, f(t, e - 1, n.startTime, i)];
      },
          m = function (t) {
        return "cancelAndHold" === t.type;
      },
          g = function (t) {
        return "cancelScheduledValues" === t.type;
      },
          v = function (t) {
        return m(t) || g(t) ? t.cancelTime : u(t) || h(t) ? t.endTime : t.startTime;
      },
          y = function (t, e, n, s) {
        var i = s.endTime,
            o = s.value;
        return n === o ? o : 0 < n && 0 < o || n < 0 && o < 0 ? n * Math.pow(o / n, (t - e) / (i - e)) : 0;
      },
          b = function (t, e, n, s) {
        return n + (t - e) / (s.endTime - e) * (s.value - n);
      },
          x = function (t, e) {
        var n = e.duration,
            s = e.startTime,
            i = e.values;
        return function (t, e) {
          var n = Math.floor(e),
              s = Math.ceil(e);
          return n === s ? t[n] : (1 - (e - n)) * t[n] + (1 - (s - e)) * t[s];
        }(i, (t - s) / n * (i.length - 1));
      },
          w = function (t) {
        return "setTarget" === t.type;
      },
          T = function () {
        function t(e) {
          n(this, t), this._automationEvents = [], this._currenTime = 0, this._defaultValue = e;
        }

        return s(t, [{
          key: Symbol.iterator,
          value: function () {
            return this._automationEvents[Symbol.iterator]();
          }
        }, {
          key: "add",
          value: function (t) {
            var e = v(t);

            if (m(t) || g(t)) {
              var n = this._automationEvents.findIndex(function (t) {
                return v(t) >= e;
              }),
                  s = this._automationEvents[n];

              if (-1 !== n && (this._automationEvents = this._automationEvents.slice(0, n)), m(t)) {
                var c = this._automationEvents[this._automationEvents.length - 1];

                if (void 0 !== s && l(s)) {
                  if (w(c)) throw new Error("The internal list is malformed.");

                  var d = p(c) ? c.startTime + c.duration : v(c),
                      f = p(c) ? c.values[c.values.length - 1] : c.value,
                      _ = u(s) ? y(e, d, f, s) : b(e, d, f, s),
                      x = u(s) ? i(_, e, this._currenTime) : o(_, e, this._currenTime);

                  this._automationEvents.push(x);
                }

                void 0 !== c && w(c) && this._automationEvents.push(r(this.getValue(e), e)), void 0 !== c && p(c) && c.startTime + c.duration > e && (this._automationEvents[this._automationEvents.length - 1] = a(new Float32Array([6, 7]), c.startTime, e - c.startTime));
              }
            } else {
              var T = this._automationEvents.findIndex(function (t) {
                return v(t) > e;
              }),
                  O = -1 === T ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[T - 1];

              if (void 0 !== O && p(O) && v(O) + O.duration > e) return !1;
              var S = u(t) ? i(t.value, t.endTime, this._currenTime) : h(t) ? o(t.value, e, this._currenTime) : t;
              if (-1 === T) this._automationEvents.push(S);else {
                if (p(t) && e + t.duration > v(this._automationEvents[T])) return !1;

                this._automationEvents.splice(T, 0, S);
              }
            }

            return !0;
          }
        }, {
          key: "flush",
          value: function (t) {
            var e = this._automationEvents.findIndex(function (e) {
              return v(e) > t;
            });

            if (e > 1) {
              var n = this._automationEvents.slice(e - 1),
                  s = n[0];

              w(s) && n.unshift(r(f(this._automationEvents, e - 2, s.startTime, this._defaultValue), s.startTime)), this._automationEvents = n;
            }
          }
        }, {
          key: "getValue",
          value: function (t) {
            if (0 === this._automationEvents.length) return this._defaultValue;

            var n = this._automationEvents[this._automationEvents.length - 1],
                s = this._automationEvents.findIndex(function (e) {
              return v(e) > t;
            }),
                i = this._automationEvents[s],
                o = v(n) <= t ? n : this._automationEvents[s - 1];

            if (void 0 !== o && w(o) && (void 0 === i || !l(i) || i.insertTime > t)) return c(t, f(this._automationEvents, s - 2, o.startTime, this._defaultValue), o);
            if (void 0 !== o && d(o) && (void 0 === i || !l(i))) return o.value;
            if (void 0 !== o && p(o) && (void 0 === i || !l(i) || o.startTime + o.duration > t)) return t < o.startTime + o.duration ? x(t, o) : o.values[o.values.length - 1];
            if (void 0 !== o && l(o) && (void 0 === i || !l(i))) return o.value;

            if (void 0 !== i && u(i)) {
              var r = _(this._automationEvents, s - 1, o, i, this._defaultValue),
                  a = e(r, 2),
                  m = a[0],
                  g = a[1];

              return y(t, m, g, i);
            }

            if (void 0 !== i && h(i)) {
              var T = _(this._automationEvents, s - 1, o, i, this._defaultValue),
                  O = e(T, 2),
                  S = O[0],
                  C = O[1];

              return b(t, S, C, i);
            }

            return this._defaultValue;
          }
        }]), t;
      }();

      t.AutomationEventList = T, t.createCancelAndHoldAutomationEvent = function (t) {
        return {
          cancelTime: t,
          type: "cancelAndHold"
        };
      }, t.createCancelScheduledValuesAutomationEvent = function (t) {
        return {
          cancelTime: t,
          type: "cancelScheduledValues"
        };
      }, t.createExponentialRampToValueAutomationEvent = function (t, e) {
        return {
          endTime: e,
          type: "exponentialRampToValue",
          value: t
        };
      }, t.createLinearRampToValueAutomationEvent = function (t, e) {
        return {
          endTime: e,
          type: "linearRampToValue",
          value: t
        };
      }, t.createSetTargetAutomationEvent = function (t, e, n) {
        return {
          startTime: e,
          target: t,
          timeConstant: n,
          type: "setTarget"
        };
      }, t.createSetValueAutomationEvent = r, t.createSetValueCurveAutomationEvent = a, Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }(e, n(676), n(682), n(683));
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(0);

    const i = t => s.h.has(t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(9);

    const o = t => Object(i.a)(s.i, t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(20);

    const o = t => {
      if (!s.a.has(t)) throw new Error("The AudioNode is not stored.");
      s.a.delete(t), Object(i.a)(t).forEach(t => t(!1));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(24);

    const i = t => Object(s.a)(t[0]);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(0);

    const i = t => s.a.has(t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => "context" in t;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => "context" in t;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(9);

    const o = t => Object(i.a)(s.d, t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(0),
        i = n(9);

    const o = t => Object(i.a)(s.e, t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => {
      const s = {
        value: t
      };
      return Object.defineProperties(n, {
        currentTarget: s,
        target: s
      }), "function" == typeof e ? e.call(t, n) : e.handleEvent.call(t, n);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(15);

    const i = t => {
      var e;
      t.getChannelData = (e = t.getChannelData, n => {
        try {
          return e.call(t, n);
        } catch (t) {
          if (12 === t.code) throw Object(s.a)();
          throw t;
        }
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      var e;
      t.start = (e = t.start, (n = 0, s = 0, i) => {
        if ("number" == typeof i && i < 0 || s < 0 || n < 0) throw new RangeError("The parameters can't be negative.");
        e.call(t, n, s, i);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      var e;
      t.stop = (e = t.stop, (n = 0) => {
        if (n < 0) throw new RangeError("The parameter can't be negative.");
        e.call(t, n);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      try {
        t.copyToChannel(new Float32Array(1), 0, -1);
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(12);

    const i = (t, e, n, i) => {
      if (Object(s.a)(e)) {
        const s = e.inputs[i];
        return t.connect(s, n, 0), [s, n, 0];
      }

      return t.connect(e, n, i), [e, n, i];
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(12);

    const i = (t, e, n, i) => {
      Object(s.a)(e) ? t.disconnect(e.inputs[i], n, 0) : t.disconnect(e, n, i);
    };
  }, function (t, e, n) {
    "use strict";

    function s(t, e, n, s, i) {
      if ("function" == typeof t.copyFromChannel) 0 === e[n].byteLength && (e[n] = new Float32Array(128)), t.copyFromChannel(e[n], s, i);else {
        const o = t.getChannelData(s);
        if (0 === e[n].byteLength) e[n] = o.slice(i, i + 128);else {
          const t = new Float32Array(o.buffer, i * Float32Array.BYTES_PER_ELEMENT, 128);
          e[n].set(t);
        }
      }
    }

    n.d(e, "a", function () {
      return s;
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => {
      const n = [];

      for (let s = 0; s < t; s += 1) {
        const t = [],
              i = "number" == typeof e ? e : e[s];

        for (let e = 0; e < i; e += 1) t.push(new Float32Array(128));

        n.push(t);
      }

      return n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "InvalidAccessError");
      } catch (t) {
        return t.code = 15, t.name = "InvalidAccessError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s) => {
      let i = Object.getPrototypeOf(t);

      for (; !i.hasOwnProperty(e);) i = Object.getPrototypeOf(i);

      const {
        get: o,
        set: r
      } = Object.getOwnPropertyDescriptor(i, e);
      Object.defineProperty(t, e, {
        get: n(o),
        set: s(r)
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => void 0 === t || "number" == typeof t || "string" == typeof t && ("balanced" === t || "interactive" === t || "playback" === t);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    class s {
      constructor(t) {
        this._map = new Map(t);
      }

      get size() {
        return this._map.size;
      }

      entries() {
        return this._map.entries();
      }

      forEach(t, e = null) {
        return this._map.forEach((n, s) => t.call(e, n, s, this));
      }

      get(t) {
        return this._map.get(t);
      }

      has(t) {
        return this._map.has(t);
      }

      keys() {
        return this._map.keys();
      }

      values() {
        return this._map.values();
      }

    }
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s, i) => {
      "function" == typeof t.copyToChannel ? 0 !== e[n].byteLength && t.copyToChannel(e[n], s, i) : 0 !== e[n].byteLength && t.getChannelData(s).set(e[n], i);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s, i, o, r, a, c, u, h) => {
      const l = u.length;
      let d = a;

      for (let a = 0; a < l; a += 1) {
        let l = n[0] * u[a];

        for (let e = 1; e < i; e += 1) {
          const s = d - e & c - 1;
          l += n[e] * o[s], l -= t[e] * r[s];
        }

        for (let t = i; t < s; t += 1) l += n[t] * o[d - t & c - 1];

        for (let n = i; n < e; n += 1) l -= t[n] * r[d - n & c - 1];

        o[d] = u[a], r[d] = l, d = d + 1 & c - 1, h[a] = l;
      }

      return d;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => null === t ? 512 : Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(t * e)))));
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "UnknownError");
      } catch (t) {
        return t.name = "UnknownError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      if (null === t) return !1;
      const e = t.length;
      return e % 2 != 0 ? 0 !== t[Math.floor(e / 2)] : t[e / 2 - 1] + t[e / 2] !== 0;
    };
  }, function (t, e, n) {
    "use strict";

    n(47), n(48), n(49), n(50), n(51), n(52), n(53), n(54), n(55), n(56), n(57), n(58), n(59), n(60), n(61), n(62), n(63), n(64), n(65), n(66), n(67), n(68), n(69), n(70), n(71), n(72), n(73), n(74), n(75), n(76), n(77), n(78), n(79), n(80), n(81), n(82), n(83), n(84), n(85), n(86), n(87), n(88), n(89), n(90), n(91), n(92), n(93), n(94), n(95), n(96), n(97), n(98), n(99), n(100), n(101), n(102), n(103), n(104), n(105), n(106), n(107), n(108), n(109), n(110), n(111), n(112), n(113), n(114), n(115), n(116), n(117), n(118), n(119), n(120), n(121), n(122), n(123), n(124), n(125), n(126), n(127), n(128), n(129);
  }, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e, n) {
    "use strict";

    n(131), n(132), n(133), n(134), n(135), n(136), n(137), n(138), n(139), n(140), n(141), n(142), n(143), n(144), n(145), n(146), n(147), n(148), n(149), n(150), n(151), n(152), n(153), n(154), n(155), n(156), n(157), n(158), n(159), n(160), n(161), n(162), n(163), n(164), n(165), n(166), n(167), n(168), n(169), n(170), n(171), n(172), n(173), n(174), n(175), n(176), n(177), n(178), n(179), n(180), n(181), n(182), n(183), n(184), n(185), n(186), n(187), n(188), n(189), n(190), n(191), n(192), n(193), n(194), n(195), n(196), n(197), n(198), n(199), n(200), n(201), n(202), n(203), n(204), n(205), n(206), n(207), n(208), n(209), n(210), n(211), n(212), n(213), n(214), n(215), n(216), n(217), n(218), n(219), n(220), n(221), n(222), n(223), n(224), n(225), n(226), n(227), n(228), n(229), n(230), n(231), n(232), n(233), n(234), n(235), n(236), n(237), n(238), n(239), n(240), n(241), n(242), n(243), n(244), n(245), n(246), n(247), n(248), n(249), n(250), n(251), n(252), n(253), n(254), n(255), n(256), n(257), n(258), n(259), n(260), n(261), n(262), n(263), n(264), n(265), n(266), n(267), n(268), n(269), n(270), n(271), n(272), n(273), n(274), n(275), n(276), n(277), n(278), n(279), n(280), n(281), n(282), n(283), n(284), n(285), n(286), n(287), n(288), n(289), n(290), n(291), n(292), n(293), n(294), n(295), n(296), n(297), n(298), n(299), n(300), n(301), n(302), n(303), n(304), n(305), n(306), n(307), n(308), n(309), n(310), n(311), n(312), n(313), n(314), n(315), n(316), n(317), n(318), n(319), n(320), n(321), n(322), n(323), n(324), n(325), n(326), n(327), n(328), n(329), n(330), n(331), n(332), n(333), n(334), n(335), n(336), n(337), n(338), n(339), n(340), n(341), n(342), n(343), n(344), n(345), n(346), n(347), n(348), n(349), n(350), n(351), n(352), n(353), n(354), n(355), n(356), n(357), n(358), n(359), n(360), n(361), n(362), n(363), n(364), n(365), n(366), n(367), n(368), n(369), n(370), n(371), n(372), n(373), n(374), n(375), n(376), n(377), n(378), n(379), n(380), n(381), n(382), n(383), n(384), n(385), n(386), n(387), n(388), n(389), n(390), n(391), n(392), n(393), n(394), n(395), n(396), n(397), n(398), n(399), n(400), n(401), n(402), n(403), n(404), n(405), n(406), n(407), n(408), n(409), n(410), n(411), n(412), n(413), n(414), n(415), n(416), n(417), n(418), n(419), n(420), n(421), n(422), n(423), n(424), n(425), n(426), n(427), n(428), n(429), n(430), n(431), n(432), n(433), n(434), n(435), n(436), n(437), n(438), n(439), n(440), n(441), n(442), n(443), n(444), n(445), n(446), n(447), n(448), n(449), n(450), n(451), n(452), n(453), n(454), n(455), n(456), n(457), n(458), n(459), n(460), n(461), n(462), n(463), n(464), n(465), n(466), n(467), n(468), n(469), n(470), n(471), n(472), n(473), n(474), n(475), n(476), n(477), n(478), n(479), n(480), n(481), n(482), n(483), n(484), n(485), n(486), n(487), n(488), n(489), n(490), n(491), n(492), n(493), n(494), n(495), n(496), n(497), n(498), n(499), n(500), n(501), n(502), n(503), n(504), n(505), n(506), n(507), n(508), n(509), n(510), n(511), n(512), n(513), n(514);
  }, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "AbortError");
      } catch (t) {
        return t.code = 20, t.name = "AbortError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n, s) => {
      const i = [];

      for (let t = 0; t < s.numberOfInputs; t += 1) i.push(new Set());

      t.set(e, {
        activeInputs: i,
        outputs: new Set(),
        passiveInputs: new WeakMap(),
        renderer: n
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      t.set(e, {
        activeInputs: new Set(),
        passiveInputs: new WeakMap(),
        renderer: n
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      const s = t(e, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        gain: 0
      });
      n.connect(s).connect(s.context.destination);

      const i = () => {
        n.removeEventListener("ended", i), n.disconnect(s), s.disconnect();
      };

      n.addEventListener("ended", i);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      t(e).add(n);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      fftSize: 2048,
      maxDecibels: -30,
      minDecibels: -100,
      smoothingTimeConstant: .8
    },
          i = (t, e, n, i, o, r) => class extends t {
      constructor(t, n = s) {
        const a = o(t),
              c = { ...s,
          ...n
        },
              u = i(a, c);
        super(t, !1, u, r(a) ? e() : null), this._nativeAnalyserNode = u;
      }

      get fftSize() {
        return this._nativeAnalyserNode.fftSize;
      }

      set fftSize(t) {
        this._nativeAnalyserNode.fftSize = t;
      }

      get frequencyBinCount() {
        return this._nativeAnalyserNode.frequencyBinCount;
      }

      get maxDecibels() {
        return this._nativeAnalyserNode.maxDecibels;
      }

      set maxDecibels(t) {
        const e = this._nativeAnalyserNode.maxDecibels;
        if (this._nativeAnalyserNode.maxDecibels = t, !(t > this._nativeAnalyserNode.minDecibels)) throw this._nativeAnalyserNode.maxDecibels = e, n();
      }

      get minDecibels() {
        return this._nativeAnalyserNode.minDecibels;
      }

      set minDecibels(t) {
        const e = this._nativeAnalyserNode.minDecibels;
        if (this._nativeAnalyserNode.minDecibels = t, !(this._nativeAnalyserNode.maxDecibels > t)) throw this._nativeAnalyserNode.minDecibels = e, n();
      }

      get smoothingTimeConstant() {
        return this._nativeAnalyserNode.smoothingTimeConstant;
      }

      set smoothingTimeConstant(t) {
        this._nativeAnalyserNode.smoothingTimeConstant = t;
      }

      getByteFrequencyData(t) {
        this._nativeAnalyserNode.getByteFrequencyData(t);
      }

      getByteTimeDomainData(t) {
        this._nativeAnalyserNode.getByteTimeDomainData(t);
      }

      getFloatFrequencyData(t) {
        this._nativeAnalyserNode.getFloatFrequencyData(t);
      }

      getFloatTimeDomainData(t) {
        this._nativeAnalyserNode.getFloatTimeDomainData(t);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n) => () => {
      const i = new WeakMap();
      return {
        render(o, r, a) {
          const c = i.get(r);
          return void 0 !== c ? Promise.resolve(c) : (async (o, r, a) => {
            let c = e(o);

            if (!Object(s.a)(c, r)) {
              const e = {
                channelCount: c.channelCount,
                channelCountMode: c.channelCountMode,
                channelInterpretation: c.channelInterpretation,
                fftSize: c.fftSize,
                maxDecibels: c.maxDecibels,
                minDecibels: c.minDecibels,
                smoothingTimeConstant: c.smoothingTimeConstant
              };
              c = t(r, e);
            }

            return i.set(r, c), await n(o, r, c, a), c;
          })(o, r, a);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return r;
    });
    var s = n(32),
        i = n(29);

    const o = {
      numberOfChannels: 1
    },
          r = (t, e, n, r, a, c, u, h) => {
      let l = null;
      return class d {
        constructor(d) {
          if (null === a) throw new Error("Missing the native OfflineAudioContext constructor.");
          const {
            length: p,
            numberOfChannels: f,
            sampleRate: _
          } = { ...o,
            ...d
          };
          null === l && (l = new a(1, 1, 44100));
          const m = null !== r && e(c, c) ? new r({
            length: p,
            numberOfChannels: f,
            sampleRate: _
          }) : l.createBuffer(f, p, _);
          if (0 === m.numberOfChannels) throw n();
          return "function" != typeof m.copyFromChannel ? (u(m), Object(i.a)(m)) : e(s.a, () => Object(s.a)(m)) || h(m), t.add(m), m;
        }

        static [Symbol.hasInstance](e) {
          return null !== e && "object" == typeof e && Object.getPrototypeOf(e) === d.prototype || t.has(e);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return a;
    });
    var s = n(2),
        i = n(17),
        o = n(21);

    const r = {
      buffer: null,
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      loop: !1,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    },
          a = (t, e, n, a, c, u, h, l) => class extends t {
      constructor(t, i = r) {
        const o = u(t),
              a = { ...r,
          ...i
        },
              l = c(o, a),
              d = h(o),
              p = d ? e() : null;
        super(t, !1, l, p), this._audioBufferSourceNodeRenderer = p, this._isBufferNullified = !1, this._isBufferSet = null !== i.buffer && void 0 !== i.buffer, this._nativeAudioBufferSourceNode = l, this._onended = null, this._playbackRate = n(this, d, l.playbackRate, s.b, s.a);
      }

      get buffer() {
        return this._isBufferNullified ? null : this._nativeAudioBufferSourceNode.buffer;
      }

      set buffer(t) {
        try {
          this._nativeAudioBufferSourceNode.buffer = t;
        } catch (e) {
          if (null !== t || 17 !== e.code) throw e;

          if (null !== this._nativeAudioBufferSourceNode.buffer) {
            const t = this._nativeAudioBufferSourceNode.buffer,
                  e = t.numberOfChannels;

            for (let n = 0; n < e; n += 1) t.getChannelData(n).fill(0);

            this._isBufferNullified = !0;
          }
        }

        if (null !== t) {
          if (this._isBufferSet) throw a();
          this._isBufferSet = !0;
        }
      }

      get loop() {
        return this._nativeAudioBufferSourceNode.loop;
      }

      set loop(t) {
        this._nativeAudioBufferSourceNode.loop = t;
      }

      get loopEnd() {
        return this._nativeAudioBufferSourceNode.loopEnd;
      }

      set loopEnd(t) {
        this._nativeAudioBufferSourceNode.loopEnd = t;
      }

      get loopStart() {
        return this._nativeAudioBufferSourceNode.loopStart;
      }

      set loopStart(t) {
        this._nativeAudioBufferSourceNode.loopStart = t;
      }

      get onended() {
        return this._onended;
      }

      set onended(t) {
        const e = "function" == typeof t ? l(this, t) : null;
        this._nativeAudioBufferSourceNode.onended = e;
        const n = this._nativeAudioBufferSourceNode.onended;
        this._onended = null !== n && n === e ? t : n;
      }

      get playbackRate() {
        return this._playbackRate;
      }

      start(t = 0, e = 0, n) {
        if (this._nativeAudioBufferSourceNode.start(t, e, n), null !== this._audioBufferSourceNodeRenderer) this._audioBufferSourceNodeRenderer.start = void 0 === n ? [t, e] : [t, e, n];else {
          Object(i.a)(this);

          const t = () => {
            this._nativeAudioBufferSourceNode.removeEventListener("ended", t), setTimeout(() => Object(o.a)(this), 1e3);
          };

          this._nativeAudioBufferSourceNode.addEventListener("ended", t);
        }
      }

      stop(t = 0) {
        this._nativeAudioBufferSourceNode.stop(t), null !== this._audioBufferSourceNodeRenderer && (this._audioBufferSourceNodeRenderer.stop = t);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      let a = null,
          c = null;
      return {
        set start(t) {
          a = t;
        },

        set stop(t) {
          c = t;
        },

        render(u, h, l) {
          const d = r.get(h);
          return void 0 !== d ? Promise.resolve(d) : (async (u, h, l) => {
            let d = n(u);
            const p = Object(s.a)(d, h);

            if (!p) {
              const t = {
                buffer: d.buffer,
                channelCount: d.channelCount,
                channelCountMode: d.channelCountMode,
                channelInterpretation: d.channelInterpretation,
                loop: d.loop,
                loopEnd: d.loopEnd,
                loopStart: d.loopStart,
                playbackRate: d.playbackRate.value
              };
              d = e(h, t), null !== a && d.start(...a), null !== c && d.stop(c);
            }

            return r.set(h, d), p ? await t(h, u.playbackRate, d.playbackRate, l) : await i(h, u.playbackRate, d.playbackRate, l), await o(u, h, d, l), d;
          })(u, h, l);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(39);

    const i = (t, e, n, i, o, r, a, c, u) => class extends t {
      constructor(t = {}) {
        if (null === u) throw new Error("Missing the native AudioContext constructor.");
        const e = new u(t);
        if (null === e) throw i();
        if (!Object(s.a)(t.latencyHint)) throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
        if (void 0 !== t.sampleRate && e.sampleRate !== t.sampleRate) throw n();
        super(e, 2);
        const {
          latencyHint: o
        } = t,
              {
          sampleRate: r
        } = e;

        if (this._baseLatency = "number" == typeof e.baseLatency ? e.baseLatency : "balanced" === o ? 512 / r : "interactive" === o || void 0 === o ? 256 / r : "playback" === o ? 1024 / r : 128 * Math.max(2, Math.min(128, Math.round(o * r / 128))) / r, this._nativeAudioContext = e, this._state = null, "running" === e.state) {
          this._state = "suspended";

          const t = () => {
            "suspended" === this._state && (this._state = null), e.removeEventListener("statechange", t);
          };

          e.addEventListener("statechange", t);
        }
      }

      get baseLatency() {
        return this._baseLatency;
      }

      get state() {
        return null !== this._state ? this._state : this._nativeAudioContext.state;
      }

      close() {
        return "closed" === this.state ? this._nativeAudioContext.close().then(() => {
          throw e();
        }) : ("suspended" === this._state && (this._state = null), this._nativeAudioContext.close());
      }

      createMediaElementSource(t) {
        return new o(this, {
          mediaElement: t
        });
      }

      createMediaStreamDestination() {
        return new r(this);
      }

      createMediaStreamSource(t) {
        return new a(this, {
          mediaStream: t
        });
      }

      createMediaStreamTrackSource(t) {
        return new c(this, {
          mediaStreamTrack: t
        });
      }

      resume() {
        return "suspended" === this._state ? new Promise((t, e) => {
          const n = () => {
            this._nativeAudioContext.removeEventListener("statechange", n), "running" === this._nativeAudioContext.state ? t() : this.resume().then(t, e);
          };

          this._nativeAudioContext.addEventListener("statechange", n);
        }) : this._nativeAudioContext.resume().catch(t => {
          if (void 0 === t || 15 === t.code) throw e();
          throw t;
        });
      }

      suspend() {
        return this._nativeAudioContext.suspend().catch(t => {
          if (void 0 === t) throw e();
          throw t;
        });
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s, i, o, r, a) => class extends t {
      constructor(t, n) {
        const s = o(t),
              c = r(s),
              u = i(s, n, c);
        super(t, !1, u, c ? e(a) : null), this._isNodeOfNativeOfflineAudioContext = c, this._nativeAudioDestinationNode = u;
      }

      get channelCount() {
        return this._nativeAudioDestinationNode.channelCount;
      }

      set channelCount(t) {
        if (this._isNodeOfNativeOfflineAudioContext) throw s();
        if (t > this._nativeAudioDestinationNode.maxChannelCount) throw n();
        this._nativeAudioDestinationNode.channelCount = t;
      }

      get channelCountMode() {
        return this._nativeAudioDestinationNode.channelCountMode;
      }

      set channelCountMode(t) {
        if (this._isNodeOfNativeOfflineAudioContext) throw s();
        this._nativeAudioDestinationNode.channelCountMode = t;
      }

      get maxChannelCount() {
        return this._nativeAudioDestinationNode.maxChannelCount;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      let e = null;
      return {
        render: (n, s, i) => (null === e && (e = (async (e, n, s) => {
          const i = n.destination;
          return await t(e, n, i, s), i;
        })(n, s, i)), e)
      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(2);

    const i = (t, e, n, i, o) => (r, a) => {
      const c = a.listener,
            {
        forwardX: u,
        forwardY: h,
        forwardZ: l,
        positionX: d,
        positionY: p,
        positionZ: f,
        upX: _,
        upY: m,
        upZ: g
      } = void 0 === c.forwardX ? (() => {
        const u = e(a, {
          channelCount: 1,
          channelCountMode: "explicit",
          channelInterpretation: "speakers",
          numberOfInputs: 9
        }),
              h = o(a),
              l = i(a, 256, 9, 0),
              d = (e, i) => {
          const o = n(a, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            offset: i
          });
          return o.connect(u, 0, e), o.start(), Object.defineProperty(o.offset, "defaultValue", {
            get: () => i
          }), t({
            context: r
          }, h, o.offset, s.b, s.a);
        };

        let p = [0, 0, -1, 0, 1, 0],
            f = [0, 0, 0];
        return l.onaudioprocess = ({
          inputBuffer: t
        }) => {
          const e = [t.getChannelData(0)[0], t.getChannelData(1)[0], t.getChannelData(2)[0], t.getChannelData(3)[0], t.getChannelData(4)[0], t.getChannelData(5)[0]];
          e.some((t, e) => t !== p[e]) && (c.setOrientation(...e), p = e);
          const n = [t.getChannelData(6)[0], t.getChannelData(7)[0], t.getChannelData(8)[0]];
          n.some((t, e) => t !== f[e]) && (c.setPosition(...n), f = n);
        }, u.connect(l), {
          forwardX: d(0, 0),
          forwardY: d(1, 0),
          forwardZ: d(2, -1),
          positionX: d(6, 0),
          positionY: d(7, 0),
          positionZ: d(8, 0),
          upX: d(3, 0),
          upY: d(4, 1),
          upZ: d(5, 0)
        };
      })() : c;
      return {
        get forwardX() {
          return u;
        },

        get forwardY() {
          return h;
        },

        get forwardZ() {
          return l;
        },

        get positionX() {
          return d;
        },

        get positionY() {
          return p;
        },

        get positionZ() {
          return f;
        },

        get upX() {
          return _;
        },

        get upY() {
          return m;
        },

        get upZ() {
          return g;
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(18);

    const i = (t, e, n, i, o, r, a, c, u, h, l, d) => (p, f, _, m = null, g = null) => {
      const v = new s.AutomationEventList(_.defaultValue),
            y = f ? i(v) : null,
            b = {
        get defaultValue() {
          return _.defaultValue;
        },

        get maxValue() {
          return null === m ? _.maxValue : m;
        },

        get minValue() {
          return null === g ? _.minValue : g;
        },

        get value() {
          return _.value;
        },

        set value(t) {
          _.value = t, b.setValueAtTime(t, p.context.currentTime);
        },

        cancelAndHoldAtTime(t) {
          if ("function" == typeof _.cancelAndHoldAtTime) null === y && v.flush(p.context.currentTime), v.add(o(t)), _.cancelAndHoldAtTime(t);else {
            const e = Array.from(v).pop();
            null === y && v.flush(p.context.currentTime), v.add(o(t));
            const n = Array.from(v).pop();
            _.cancelScheduledValues(t), e !== n && void 0 !== n && ("exponentialRampToValue" === n.type ? _.exponentialRampToValueAtTime(n.value, n.endTime) : "linearRampToValue" === n.type ? _.linearRampToValueAtTime(n.value, n.endTime) : "setValue" === n.type ? _.setValueAtTime(n.value, n.startTime) : "setValueCurve" === n.type && _.setValueCurveAtTime(n.values, n.startTime, n.duration));
          }
          return b;
        },

        cancelScheduledValues: t => (null === y && v.flush(p.context.currentTime), v.add(r(t)), _.cancelScheduledValues(t), b),
        exponentialRampToValueAtTime: (t, e) => (null === y && v.flush(p.context.currentTime), v.add(a(t, e)), _.exponentialRampToValueAtTime(t, e), b),
        linearRampToValueAtTime: (t, e) => (null === y && v.flush(p.context.currentTime), v.add(c(t, e)), _.linearRampToValueAtTime(t, e), b),
        setTargetAtTime: (t, e, n) => (null === y && v.flush(p.context.currentTime), v.add(u(t, e, n)), _.setTargetAtTime(t, e, n), b),
        setValueAtTime: (t, e) => (null === y && v.flush(p.context.currentTime), v.add(h(t, e)), _.setValueAtTime(t, e), b),

        setValueCurveAtTime(t, e, n) {
          if (null !== d && "webkitAudioContext" === d.name) {
            const s = e + n,
                  i = p.context.sampleRate,
                  o = Math.ceil(e * i),
                  r = Math.floor(s * i),
                  a = r - o,
                  c = new Float32Array(a);

            for (let s = 0; s < a; s += 1) {
              const r = (t.length - 1) / n * ((o + s) / i - e),
                    a = Math.floor(r),
                    u = Math.ceil(r);
              c[s] = a === u ? t[a] : (1 - (r - a)) * t[a] + (1 - (u - r)) * t[u];
            }

            null === y && v.flush(p.context.currentTime), v.add(l(c, e, n)), _.setValueCurveAtTime(c, e, n);
            const u = r / i;
            u < s && b.setValueAtTime(c[c.length - 1], u), b.setValueAtTime(t[t.length - 1], s);
          } else null === y && v.flush(p.context.currentTime), v.add(l(t, e, n)), _.setValueCurveAtTime(t, e, n);

          return b;
        }

      };
      return n.set(b, _), e.set(b, p), t(b, y), b;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => ({
      replay(e) {
        for (const n of t) if ("exponentialRampToValue" === n.type) {
          const {
            endTime: t,
            value: s
          } = n;
          e.exponentialRampToValueAtTime(s, t);
        } else if ("linearRampToValue" === n.type) {
          const {
            endTime: t,
            value: s
          } = n;
          e.linearRampToValueAtTime(s, t);
        } else if ("setTarget" === n.type) {
          const {
            startTime: t,
            target: s,
            timeConstant: i
          } = n;
          e.setTargetAtTime(s, t, i);
        } else if ("setValue" === n.type) {
          const {
            startTime: t,
            value: s
          } = n;
          e.setValueAtTime(s, t);
        } else {
          if ("setValueCurve" !== n.type) throw new Error("Can't apply an unknown automation.");
          {
            const {
              duration: t,
              startTime: s,
              values: i
            } = n;
            e.setValueCurveAtTime(i, s, t);
          }
        }
      }

    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return a;
    });
    var s = n(0),
        i = n(40);

    const o = {
      channelCount: 2,
      channelCountMode: "explicit",
      channelInterpretation: "speakers",
      numberOfInputs: 1,
      numberOfOutputs: 1,
      outputChannelCount: void 0,
      parameterData: {},
      processorOptions: {}
    },
          r = t => {
      const e = [];

      for (let n = 0; n < t; n += 1) e.push(1);

      return e;
    },
          a = (t, e, n, a, c, u, h, l, d) => class extends e {
      constructor(e, d, p = o) {
        const f = u(e),
              _ = h(f),
              m = (t => ({ ...t,
          outputChannelCount: void 0 !== t.outputChannelCount ? t.outputChannelCount : 1 === t.numberOfInputs && 1 === t.numberOfOutputs ? [t.channelCount] : r(t.numberOfOutputs)
        }))({ ...o,
          ...p
        }),
              g = s.j.get(f),
              v = void 0 === g ? void 0 : g.get(d),
              y = c(f, _ ? null : e.baseLatency, l, d, v, m);

        super(e, !0, y, _ ? a(d, m, v) : null);
        const b = [];
        y.parameters.forEach((t, e) => {
          const s = n(this, _, t);
          b.push([e, s]);
        }), this._nativeAudioWorkletNode = y, this._onprocessorerror = null, this._parameters = new i.a(b), _ && t(f, this);
      }

      get onprocessorerror() {
        return this._onprocessorerror;
      }

      set onprocessorerror(t) {
        const e = "function" == typeof t ? d(this, t) : null;
        this._nativeAudioWorkletNode.onprocessorerror = e;
        const n = this._nativeAudioWorkletNode.onprocessorerror;
        this._onprocessorerror = null !== n && n === e ? t : n;
      }

      get parameters() {
        return null === this._parameters ? this._nativeAudioWorkletNode.parameters : this._parameters;
      }

      get port() {
        return this._nativeAudioWorkletNode.port;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s, i, o, r, a, c, u, h, l, d, p, f, _, m, g, v, y) => class extends f {
      constructor(e, n) {
        super(e, n), this._nativeContext = e, this._audioWorklet = void 0 === t ? void 0 : {
          addModule: (e, n) => t(this, e, n)
        };
      }

      get audioWorklet() {
        return this._audioWorklet;
      }

      createAnalyser() {
        return new e(this);
      }

      createBiquadFilter() {
        return new i(this);
      }

      createBuffer(t, e, s) {
        return new n({
          length: e,
          numberOfChannels: t,
          sampleRate: s
        });
      }

      createBufferSource() {
        return new s(this);
      }

      createChannelMerger(t = 6) {
        return new o(this, {
          numberOfInputs: t
        });
      }

      createChannelSplitter(t = 6) {
        return new r(this, {
          numberOfOutputs: t
        });
      }

      createConstantSource() {
        return new a(this);
      }

      createConvolver() {
        return new c(this);
      }

      createDelay(t = 1) {
        return new h(this, {
          maxDelayTime: t
        });
      }

      createDynamicsCompressor() {
        return new l(this);
      }

      createGain() {
        return new d(this);
      }

      createIIRFilter(t, e) {
        return new p(this, {
          feedback: e,
          feedforward: t
        });
      }

      createOscillator() {
        return new _(this);
      }

      createPanner() {
        return new m(this);
      }

      createPeriodicWave(t, e, n = {
        disableNormalization: !1
      }) {
        return new g(this, { ...n,
          imag: e,
          real: t
        });
      }

      createStereoPanner() {
        return new v(this);
      }

      createWaveShaper() {
        return new y(this);
      }

      decodeAudioData(t, e, n) {
        return u(this._nativeContext, t).then(t => ("function" == typeof e && e(t), t)).catch(t => {
          throw "function" == typeof n && n(t), t;
        });
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(2);

    const i = {
      Q: 1,
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      detune: 0,
      frequency: 350,
      gain: 0,
      type: "lowpass"
    },
          o = (t, e, n, o, r, a, c) => class extends t {
      constructor(t, o = i) {
        const u = a(t),
              h = { ...i,
          ...o
        },
              l = r(u, h),
              d = c(u);
        super(t, !1, l, d ? n() : null), this._Q = e(this, d, l.Q, s.b, s.a), this._detune = e(this, d, l.detune, 1200 * Math.log2(s.b), -1200 * Math.log2(s.b)), this._frequency = e(this, d, l.frequency, t.sampleRate / 2, 0), this._gain = e(this, d, l.gain, 40 * Math.log10(s.b), s.a), this._nativeBiquadFilterNode = l;
      }

      get detune() {
        return this._detune;
      }

      get frequency() {
        return this._frequency;
      }

      get gain() {
        return this._gain;
      }

      get Q() {
        return this._Q;
      }

      get type() {
        return this._nativeBiquadFilterNode.type;
      }

      set type(t) {
        this._nativeBiquadFilterNode.type = t;
      }

      getFrequencyResponse(t, e, n) {
        if (this._nativeBiquadFilterNode.getFrequencyResponse(t, e, n), t.length !== e.length || e.length !== n.length) throw o();
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      return {
        render(a, c, u) {
          const h = r.get(c);
          return void 0 !== h ? Promise.resolve(h) : (async (a, c, u) => {
            let h = n(a);
            const l = Object(s.a)(h, c);

            if (!l) {
              const t = {
                Q: h.Q.value,
                channelCount: h.channelCount,
                channelCountMode: h.channelCountMode,
                channelInterpretation: h.channelInterpretation,
                detune: h.detune.value,
                frequency: h.frequency.value,
                gain: h.gain.value,
                type: h.type
              };
              h = e(c, t);
            }

            return r.set(c, h), l ? (await t(c, a.Q, h.Q, u), await t(c, a.detune, h.detune, u), await t(c, a.frequency, h.frequency, u), await t(c, a.gain, h.gain, u)) : (await i(c, a.Q, h.Q, u), await i(c, a.detune, h.detune, u), await i(c, a.frequency, h.frequency, u), await i(c, a.gain, h.gain, u)), await o(a, c, h, u), h;
          })(a, c, u);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (n, s) => {
      const i = e.get(n);
      if (void 0 !== i) return i;
      const o = t.get(n);
      if (void 0 !== o) return o;

      try {
        const i = s();
        return i instanceof Promise ? (t.set(n, i), i.catch(() => !1).then(s => (t.delete(n), e.set(n, s), s))) : (e.set(n, i), i);
      } catch {
        return e.set(n, !1), !1;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "speakers",
      numberOfInputs: 6
    },
          i = (t, e, n, i, o) => class extends t {
      constructor(t, r = s) {
        const a = i(t),
              c = { ...s,
          ...r
        };
        super(t, !1, n(a, c), o(a) ? e() : null);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n) => () => {
      const i = new WeakMap();
      return {
        render(o, r, a) {
          const c = i.get(r);
          return void 0 !== c ? Promise.resolve(c) : (async (o, r, a) => {
            let c = e(o);

            if (!Object(s.a)(c, r)) {
              const e = {
                channelCount: c.channelCount,
                channelCountMode: c.channelCountMode,
                channelInterpretation: c.channelInterpretation,
                numberOfInputs: c.numberOfInputs
              };
              c = t(r, e);
            }

            return i.set(r, c), await n(o, r, c, a), c;
          })(o, r, a);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 6,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      numberOfOutputs: 6
    },
          i = (t, e, n, i, o) => class extends t {
      constructor(t, r = s) {
        const a = i(t),
              c = (t => ({ ...t,
          channelCount: t.numberOfOutputs
        }))({ ...s,
          ...r
        });

        super(t, !1, n(a, c), o(a) ? e() : null);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n) => () => {
      const i = new WeakMap();
      return {
        render(o, r, a) {
          const c = i.get(r);
          return void 0 !== c ? Promise.resolve(c) : (async (o, r, a) => {
            let c = e(o);

            if (!Object(s.a)(c, r)) {
              const e = {
                channelCount: c.channelCount,
                channelCountMode: c.channelCountMode,
                channelInterpretation: c.channelInterpretation,
                numberOfOutputs: c.numberOfOutputs
              };
              c = t(r, e);
            }

            return i.set(r, c), await n(o, r, c, a), c;
          })(o, r, a);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n, s, i) => t(n, e, s, i);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(25);

    const i = t => (e, n, i = 0, o = 0) => {
      const r = e[i];
      if (void 0 === r) throw t();
      return Object(s.a)(n) ? r.connect(n, 0, o) : r.connect(n, 0);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      const s = t(e),
            i = e.createBuffer(1, 2, e.sampleRate);
      return s.buffer = i, s.loop = !0, s.connect(n), s.start(), () => {
        s.stop(), s.disconnect(n);
      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return a;
    });
    var s = n(2),
        i = n(17),
        o = n(21);

    const r = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      offset: 1
    },
          a = (t, e, n, a, c, u, h) => class extends t {
      constructor(t, i = r) {
        const o = c(t),
              h = { ...r,
          ...i
        },
              l = a(o, h),
              d = u(o),
              p = d ? n() : null;
        super(t, !1, l, p), this._constantSourceNodeRenderer = p, this._nativeConstantSourceNode = l, this._offset = e(this, d, l.offset, s.b, s.a), this._onended = null;
      }

      get offset() {
        return this._offset;
      }

      get onended() {
        return this._onended;
      }

      set onended(t) {
        const e = "function" == typeof t ? h(this, t) : null;
        this._nativeConstantSourceNode.onended = e;
        const n = this._nativeConstantSourceNode.onended;
        this._onended = null !== n && n === e ? t : n;
      }

      start(t = 0) {
        if (this._nativeConstantSourceNode.start(t), null !== this._constantSourceNodeRenderer) this._constantSourceNodeRenderer.start = t;else {
          Object(i.a)(this);

          const t = () => {
            this._nativeConstantSourceNode.removeEventListener("ended", t), setTimeout(() => Object(o.a)(this), 1e3);
          };

          this._nativeConstantSourceNode.addEventListener("ended", t);
        }
      }

      stop(t = 0) {
        this._nativeConstantSourceNode.stop(t), null !== this._constantSourceNodeRenderer && (this._constantSourceNodeRenderer.stop = t);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      let a = null,
          c = null;
      return {
        set start(t) {
          a = t;
        },

        set stop(t) {
          c = t;
        },

        render(u, h, l) {
          const d = r.get(h);
          return void 0 !== d ? Promise.resolve(d) : (async (u, h, l) => {
            let d = n(u);
            const p = Object(s.a)(d, h);

            if (!p) {
              const t = {
                channelCount: d.channelCount,
                channelCountMode: d.channelCountMode,
                channelInterpretation: d.channelInterpretation,
                offset: d.offset.value
              };
              d = e(h, t), null !== a && d.start(a), null !== c && d.stop(c);
            }

            return r.set(h, d), p ? await t(h, u.offset, d.offset, l) : await i(h, u.offset, d.offset, l), await o(u, h, d, l), d;
          })(u, h, l);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => (t[0] = e, t[0]);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      buffer: null,
      channelCount: 2,
      channelCountMode: "clamped-max",
      channelInterpretation: "speakers",
      disableNormalization: !1
    },
          i = (t, e, n, i, o) => class extends t {
      constructor(t, r = s) {
        const a = i(t),
              c = { ...s,
          ...r
        },
              u = n(a, c);
        super(t, !1, u, o(a) ? e() : null), this._isBufferNullified = !1, this._nativeConvolverNode = u;
      }

      get buffer() {
        return this._isBufferNullified ? null : this._nativeConvolverNode.buffer;
      }

      set buffer(t) {
        if (this._nativeConvolverNode.buffer = t, null === t && null !== this._nativeConvolverNode.buffer) {
          const t = this._nativeConvolverNode.context;
          this._nativeConvolverNode.buffer = t.createBuffer(1, 1, t.sampleRate), this._isBufferNullified = !0;
        } else this._isBufferNullified = !1;
      }

      get normalize() {
        return this._nativeConvolverNode.normalize;
      }

      set normalize(t) {
        this._nativeConvolverNode.normalize = t;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(12),
        i = n(3);

    const o = (t, e, n) => () => {
      const o = new WeakMap();
      return {
        render(r, a, c) {
          const u = o.get(a);
          return void 0 !== u ? Promise.resolve(u) : (async (r, a, c) => {
            let u = e(r);

            if (!Object(i.a)(u, a)) {
              const e = {
                buffer: u.buffer,
                channelCount: u.channelCount,
                channelCountMode: u.channelCountMode,
                channelInterpretation: u.channelInterpretation,
                disableNormalization: !u.normalize
              };
              u = t(a, e);
            }

            return o.set(a, u), Object(s.a)(u) ? await n(r, a, u.inputs[0], c) : await n(r, a, u, c), u;
          })(r, a, c);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (n, s, i) => {
      if (null === e) throw new Error("Missing the native OfflineAudioContext constructor.");

      try {
        return new e(n, s, i);
      } catch (e) {
        if ("IndexSizeError" === e.name || "SyntaxError" === e.name) throw t();
        throw e;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "DataCloneError");
      } catch (t) {
        return t.code = 25, t.name = "DataCloneError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(22);

    const i = (t, e, n, i, o, r, a, c) => (u, h) => {
      const l = e.get(u);
      if (void 0 === l) throw new Error("Missing the expected cycle count.");
      const d = r(u.context),
            p = c(d);

      if (l === h) {
        if (e.delete(u), !p && a(u)) {
          const e = i(u),
                {
            outputs: r
          } = n(u);

          for (const n of r) if (Object(s.a)(n)) {
            const s = i(n[0]);
            t(e, s, n[1], n[2]);
          } else {
            const t = o(n[0]);
            e.connect(t, n[1]);
          }
        }
      } else e.set(u, l - h);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      delayTime: 0,
      maxDelayTime: 1
    },
          i = (t, e, n, i, o, r) => class extends t {
      constructor(t, a = s) {
        const c = o(t),
              u = { ...s,
          ...a
        },
              h = i(c, u),
              l = r(c);
        super(t, !1, h, l ? n(u.maxDelayTime) : null), this._delayTime = e(this, l, h.delayTime, u.maxDelayTime, 0);
      }

      get delayTime() {
        return this._delayTime;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => r => {
      const a = new WeakMap();
      return {
        render(c, u, h) {
          const l = a.get(u);
          return void 0 !== l ? Promise.resolve(l) : (async (c, u, h) => {
            let l = n(c);
            const d = Object(s.a)(l, u);

            if (!d) {
              const t = {
                channelCount: l.channelCount,
                channelCountMode: l.channelCountMode,
                channelInterpretation: l.channelInterpretation,
                delayTime: l.delayTime.value,
                maxDelayTime: r
              };
              l = e(u, t);
            }

            return a.set(u, l), d ? await t(u, c.delayTime, l.delayTime, h) : await i(u, c.delayTime, l.delayTime, h), await o(c, u, l, h), l;
          })(c, u, h);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      t(e).delete(n);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(25);

    const i = (t, e, n) => {
      const s = e[n];
      if (void 0 === s) throw t();
      return s;
    },
          o = t => (e, n, o, r = 0) => void 0 === n ? e.forEach(t => t.disconnect()) : "number" == typeof n ? i(t, e, n).disconnect() : Object(s.a)(n) ? void 0 === o ? e.forEach(t => t.disconnect(n)) : void 0 === r ? i(t, e, o).disconnect(n, 0) : i(t, e, o).disconnect(n, 0, r) : void 0 === o ? e.forEach(t => t.disconnect(n)) : i(t, e, o).disconnect(n, 0);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      attack: .003,
      channelCount: 2,
      channelCountMode: "clamped-max",
      channelInterpretation: "speakers",
      knee: 30,
      ratio: 12,
      release: .25,
      threshold: -24
    },
          i = (t, e, n, i, o, r, a) => class extends t {
      constructor(t, o = s) {
        const c = r(t),
              u = { ...s,
          ...o
        },
              h = i(c, u),
              l = a(c);
        super(t, !1, h, l ? n() : null), this._attack = e(this, l, h.attack, 1, 0), this._knee = e(this, l, h.knee, 40, 0), this._nativeDynamicsCompressorNode = h, this._ratio = e(this, l, h.ratio, 20, 1), this._release = e(this, l, h.release, 1, 0), this._threshold = e(this, l, h.threshold, 0, -100);
      }

      get attack() {
        return this._attack;
      }

      get channelCount() {
        return this._nativeDynamicsCompressorNode.channelCount;
      }

      set channelCount(t) {
        const e = this._nativeDynamicsCompressorNode.channelCount;
        if (this._nativeDynamicsCompressorNode.channelCount = t, t > 2) throw this._nativeDynamicsCompressorNode.channelCount = e, o();
      }

      get channelCountMode() {
        return this._nativeDynamicsCompressorNode.channelCountMode;
      }

      set channelCountMode(t) {
        const e = this._nativeDynamicsCompressorNode.channelCountMode;
        if (this._nativeDynamicsCompressorNode.channelCountMode = t, "max" === t) throw this._nativeDynamicsCompressorNode.channelCountMode = e, o();
      }

      get knee() {
        return this._knee;
      }

      get ratio() {
        return this._ratio;
      }

      get reduction() {
        return "number" == typeof this._nativeDynamicsCompressorNode.reduction.value ? this._nativeDynamicsCompressorNode.reduction.value : this._nativeDynamicsCompressorNode.reduction;
      }

      get release() {
        return this._release;
      }

      get threshold() {
        return this._threshold;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      return {
        render(a, c, u) {
          const h = r.get(c);
          return void 0 !== h ? Promise.resolve(h) : (async (a, c, u) => {
            let h = n(a);
            const l = Object(s.a)(h, c);

            if (!l) {
              const t = {
                attack: h.attack.value,
                channelCount: h.channelCount,
                channelCountMode: h.channelCountMode,
                channelInterpretation: h.channelInterpretation,
                knee: h.knee.value,
                ratio: h.ratio.value,
                release: h.release.value,
                threshold: h.threshold.value
              };
              h = e(c, t);
            }

            return r.set(c, h), l ? (await t(c, a.attack, h.attack, u), await t(c, a.knee, h.knee, u), await t(c, a.ratio, h.ratio, u), await t(c, a.release, h.release, u), await t(c, a.threshold, h.threshold, u)) : (await i(c, a.attack, h.attack, u), await i(c, a.knee, h.knee, u), await i(c, a.ratio, h.ratio, u), await i(c, a.release, h.release, u), await i(c, a.threshold, h.threshold, u)), await o(a, c, h, u), h;
          })(a, c, u);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => {
      try {
        return new DOMException("", "EncodingError");
      } catch (t) {
        return t.code = 0, t.name = "EncodingError", t;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => new Promise((n, s) => {
      if (null === t) return void s(new SyntaxError());
      const i = t.document.head;
      if (null === i) s(new SyntaxError());else {
        const o = t.document.createElement("script"),
              r = new Blob([e], {
          type: "application/javascript"
        }),
              a = URL.createObjectURL(r),
              c = t.onerror,
              u = () => {
          t.onerror = c, URL.revokeObjectURL(a);
        };

        t.onerror = (e, n, i, o, r) => n === a || n === t.location.href && 1 === i && 1 === o ? (u(), s(r), !1) : null !== c ? c(e, n, i, o, r) : void 0, o.onerror = () => {
          u(), s(new SyntaxError());
        }, o.onload = () => {
          u(), n();
        }, o.src = a, o.type = "module", i.appendChild(o);
      }
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => class {
      constructor(t) {
        this._nativeEventTarget = t, this._listeners = new WeakMap();
      }

      addEventListener(e, n, s) {
        if (null !== n) {
          let i = this._listeners.get(n);

          void 0 === i && (i = t(this, n), "function" == typeof n && this._listeners.set(n, i)), this._nativeEventTarget.addEventListener(e, i, s);
        }
      }

      dispatchEvent(t) {
        return this._nativeEventTarget.dispatchEvent(t);
      }

      removeEventListener(t, e, n) {
        const s = null === e ? void 0 : this._listeners.get(e);

        this._nativeEventTarget.removeEventListener(t, void 0 === s ? null : s, n);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n, s) => {
      Object.defineProperties(t, {
        currentFrame: {
          configurable: !0,
          get: () => Math.round(e * n)
        },
        currentTime: {
          configurable: !0,
          get: () => e
        }
      });

      try {
        return s();
      } finally {
        null !== t && (delete t.currentFrame, delete t.currentTime);
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => async e => {
      try {
        const t = await fetch(e);
        if (t.ok) return t.text();
      } catch {}

      throw t();
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(2);

    const i = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      gain: 1
    },
          o = (t, e, n, o, r, a) => class extends t {
      constructor(t, c = i) {
        const u = r(t),
              h = { ...i,
          ...c
        },
              l = o(u, h),
              d = a(u);
        super(t, !1, l, d ? n() : null), this._gain = e(this, d, l.gain, s.b, s.a);
      }

      get gain() {
        return this._gain;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      return {
        render(a, c, u) {
          const h = r.get(c);
          return void 0 !== h ? Promise.resolve(h) : (async (a, c, u) => {
            let h = n(a);
            const l = Object(s.a)(h, c);

            if (!l) {
              const t = {
                channelCount: h.channelCount,
                channelCountMode: h.channelCountMode,
                channelInterpretation: h.channelInterpretation,
                gain: h.gain.value
              };
              h = e(c, t);
            }

            return r.set(c, h), l ? await t(c, a.gain, h.gain, u) : await i(c, a.gain, h.gain, u), await o(a, c, h, u), h;
          })(a, c, u);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e);
      if (null === n.renderer) throw new Error("Missing the renderer of the given AudioNode in the audio graph.");
      return n.renderer;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e);
      if (null === n.renderer) throw new Error("Missing the renderer of the given AudioParam in the audio graph.");
      return n.renderer;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(0);

    const i = (t, e, n) => i => {
      if ("closed" === i.state && null !== e && "webkitAudioContext" !== e.name) {
        if (!t(i)) {
          const t = s.f.get(i);
          if (void 0 !== t) return t;
          const n = new e();
          return s.f.set(i, n), n;
        }

        {
          const t = s.f.get(i);
          if (void 0 !== t) return t;

          if (null !== n) {
            const t = new n(1, 1, 44100);
            return s.f.set(i, t), t;
          }
        }
      }

      return null;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(7);

    const i = t => e => {
      const n = t.get(e);
      if (void 0 === n) throw Object(s.a)();
      return n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t.get(e);
      if (void 0 === n) throw new Error("The context has no set of AudioWorkletNodes.");
      return n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(42),
        i = n(3);

    const o = (t, e, n, o, r, a) => (c, u) => {
      const h = new WeakMap();
      let l = null;

      const d = async (d, p, f) => {
        let _ = null,
            m = n(d);
        const g = Object(i.a)(m, p);

        if (void 0 === p.createIIRFilter ? _ = t(p) : g || (m = e(p, t => t.createIIRFilter(u, c))), h.set(p, null === _ ? m : _), null !== _) {
          if (null === l) {
            if (null === o) throw new Error("Missing the native OfflineAudioContext constructor.");
            const t = new o(d.context.destination.channelCount, d.context.length, p.sampleRate);

            l = (async () => (await r(d, t, t.destination, f), ((t, e, n, i) => {
              const o = n.length,
                    r = i.length,
                    a = Math.min(o, r);

              if (1 !== n[0]) {
                for (let t = 0; t < o; t += 1) i[t] /= n[0];

                for (let t = 1; t < r; t += 1) n[t] /= n[0];
              }

              const c = new Float32Array(32),
                    u = new Float32Array(32),
                    h = e.createBuffer(t.numberOfChannels, t.length, t.sampleRate),
                    l = t.numberOfChannels;

              for (let e = 0; e < l; e += 1) {
                const l = t.getChannelData(e),
                      d = h.getChannelData(e);
                c.fill(0), u.fill(0), Object(s.a)(n, o, i, r, a, c, u, 0, 32, l, d);
              }

              return h;
            })(await a(t), p, c, u)))();
          }

          const t = await l;
          return _.buffer = t, _.start(0), _;
        }

        return await r(d, p, m, f), m;
      };

      return {
        render(t, e, n) {
          const s = h.get(e);
          return void 0 !== s ? Promise.resolve(s) : d(t, e, n);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(22);

    const i = (t, e, n, i, o, r) => a => (c, u) => {
      const h = t.get(c);

      if (void 0 === h) {
        if (!a && r(c)) {
          const t = i(c),
                {
            outputs: r
          } = n(c);

          for (const n of r) if (Object(s.a)(n)) {
            const s = i(n[0]);
            e(t, s, n[1], n[2]);
          } else {
            const e = o(n[0]);
            t.disconnect(e, n[1]);
          }
        }

        t.set(c, u);
      } else t.set(c, h + u);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => {
      const s = t.get(n);
      return e(s) || e(n);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => t.has(n) || e(n);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => t.has(n) || e(n);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => {
      const s = t.get(n);
      return e(s) || e(n);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => null !== t && e instanceof t;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => null !== t && "function" == typeof t.AudioNode && e instanceof t.AudioNode;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => null !== t && "function" == typeof t.AudioParam && e instanceof t.AudioParam;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => t(n) || e(n);
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => null !== t && e instanceof t;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => null !== t && t.isSecureContext;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = async (t, e, n, s, i, o, r, a, c, u, h, l, d, p) => {
      if (t(e, e) && t(n, n) && t(i, i) && t(o, o) && t(a, a) && t(c, c) && t(u, u) && t(h, h) && t(l, l)) {
        return (await Promise.all([t(s, s), t(r, r), t(d, d), t(p, p)])).every(t => t);
      }

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s) => class extends t {
      constructor(t, i) {
        const o = n(t),
              r = e(o, i);
        if (s(o)) throw TypeError();
        super(t, !0, r, null), this._mediaElement = i.mediaElement, this._nativeMediaElementAudioSourceNode = r;
      }

      get mediaElement() {
        return void 0 === this._nativeMediaElementAudioSourceNode.mediaElement ? this._mediaElement : this._nativeMediaElementAudioSourceNode.mediaElement;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 2,
      channelCountMode: "explicit",
      channelInterpretation: "speakers"
    },
          i = (t, e, n, i) => class extends t {
      constructor(t, o = s) {
        const r = n(t);
        if (i(r)) throw new TypeError();
        const a = { ...s,
          ...o
        },
              c = e(r, a);
        super(t, !1, c, null), this._nativeMediaStreamAudioDestinationNode = c;
      }

      get stream() {
        return this._nativeMediaStreamAudioDestinationNode.stream;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s) => class extends t {
      constructor(t, i) {
        const o = n(t),
              r = e(o, i);
        if (s(o)) throw new TypeError();
        super(t, !0, r, null), this._nativeMediaStreamAudioSourceNode = r;
      }

      get mediaStream() {
        return this._nativeMediaStreamAudioSourceNode.mediaStream;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => class extends t {
      constructor(t, s) {
        const i = n(t);
        super(t, !0, e(i, s), null);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(39);

    const i = (t, e, n, i, o) => class extends i {
      constructor(t = {}) {
        if (null === o) throw new Error("Missing the native AudioContext constructor.");
        const i = new o(t);
        if (null === i) throw n();
        if (!Object(s.a)(t.latencyHint)) throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
        if (void 0 !== t.sampleRate && i.sampleRate !== t.sampleRate) throw e();
        super(i, 2);
        const {
          latencyHint: r
        } = t,
              {
          sampleRate: a
        } = i;

        if (this._baseLatency = "number" == typeof i.baseLatency ? i.baseLatency : "balanced" === r ? 512 / a : "interactive" === r || void 0 === r ? 256 / a : "playback" === r ? 1024 / a : 128 * Math.max(2, Math.min(128, Math.round(r * a / 128))) / a, this._nativeAudioContext = i, this._state = null, "running" === i.state) {
          this._state = "suspended";

          const t = () => {
            "suspended" === this._state && (this._state = null), i.removeEventListener("statechange", t);
          };

          i.addEventListener("statechange", t);
        }
      }

      get baseLatency() {
        return this._baseLatency;
      }

      get state() {
        return null !== this._state ? this._state : this._nativeAudioContext.state;
      }

      close() {
        return "closed" === this.state ? this._nativeAudioContext.close().then(() => {
          throw t();
        }) : ("suspended" === this._state && (this._state = null), this._nativeAudioContext.close());
      }

      resume() {
        return "suspended" === this._state ? new Promise((t, e) => {
          const n = () => {
            this._nativeAudioContext.removeEventListener("statechange", n), "running" === this._nativeAudioContext.state ? t() : this.resume().then(t, e);
          };

          this._nativeAudioContext.addEventListener("statechange", n);
        }) : this._nativeAudioContext.resume().catch(e => {
          if (void 0 === e || 15 === e.code) throw t();
          throw e;
        });
      }

      suspend() {
        return this._nativeAudioContext.suspend().catch(e => {
          if (void 0 === e) throw t();
          throw e;
        });
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(0);

    const i = (t, e, n, i, o, r) => class extends n {
      constructor(n, r) {
        super(n), this._nativeContext = n, s.g.set(this, n);
        const a = n.sampleRate;
        Object.defineProperty(n, "sampleRate", {
          get: () => a
        }), i(n) && o.set(n, new Set()), this._destination = new t(this, r), this._listener = e(this, n), this._onstatechange = null;
      }

      get currentTime() {
        return this._nativeContext.currentTime;
      }

      get destination() {
        return this._destination;
      }

      get listener() {
        return this._listener;
      }

      get onstatechange() {
        return this._onstatechange;
      }

      set onstatechange(t) {
        const e = "function" == typeof t ? r(this, t) : null;
        this._nativeContext.onstatechange = e;
        const n = this._nativeContext.onstatechange;
        this._onstatechange = null !== n && n === e ? t : n;
      }

      get sampleRate() {
        return this._nativeContext.sampleRate;
      }

      get state() {
        return this._nativeContext.state;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(14);

    const i = {
      numberOfChannels: 1
    },
          o = (t, e, n, o, r) => class extends o {
      constructor(e) {
        const {
          length: o,
          numberOfChannels: r,
          sampleRate: a
        } = { ...i,
          ...e
        },
              c = n(r, o, a);
        t(s.a, () => Object(s.a)(c)) || c.addEventListener("statechange", (() => {
          let t = 0;

          const e = n => {
            "running" === this._state && (t > 0 ? (c.removeEventListener("statechange", e), n.stopImmediatePropagation(), this._waitForThePromiseToSettle(n)) : t += 1);
          };

          return e;
        })()), super(c, r), this._length = o, this._nativeOfflineAudioContext = c, this._state = null;
      }

      get length() {
        return void 0 === this._nativeOfflineAudioContext.length ? this._length : this._nativeOfflineAudioContext.length;
      }

      get state() {
        return null === this._state ? this._nativeOfflineAudioContext.state : this._state;
      }

      startRendering() {
        return "running" === this._state ? Promise.reject(e()) : (this._state = "running", r(this.destination, this._nativeOfflineAudioContext).then(t => (this._state = null, t)).catch(t => {
          throw this._state = null, t;
        }));
      }

      _waitForThePromiseToSettle(t) {
        null === this._state ? this._nativeOfflineAudioContext.dispatchEvent(t) : setTimeout(() => this._waitForThePromiseToSettle(t));
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (n, s, i) => {
      const o = new Set();
      var r, a;
      return n.connect = (r = n.connect, (i, a = 0, c = 0) => {
        const u = 0 === o.size;
        if (e(i)) return r.call(n, i, a, c), t(o, [i, a, c], t => t[0] === i && t[1] === a && t[2] === c, !0), u && s(), i;
        r.call(n, i, a), t(o, [i, a], t => t[0] === i && t[1] === a, !0), u && s();
      }), n.disconnect = (a = n.disconnect, (t, s, r) => {
        const c = o.size > 0;
        if (void 0 === t) a.apply(n), o.clear();else if ("number" == typeof t) {
          a.call(n, t);

          for (const e of o) e[1] === t && o.delete(e);
        } else {
          e(t) ? a.call(n, t, s, r) : a.call(n, t, s);

          for (const e of o) e[0] !== t || void 0 !== s && e[1] !== s || void 0 !== r && e[2] !== r || o.delete(e);
        }
        const u = 0 === o.size;
        c && u && i();
      }), n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => null === t ? null : t.hasOwnProperty("AudioBuffer") ? t.AudioBuffer : null;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => null === t ? null : t.hasOwnProperty("AudioContext") ? t.AudioContext : t.hasOwnProperty("webkitAudioContext") ? t.webkitAudioContext : null;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (n, s, i) => {
      const o = n.destination;
      if (o.channelCount !== s) try {
        o.channelCount = s;
      } catch {}
      i && "explicit" !== o.channelCountMode && (o.channelCountMode = "explicit"), 0 === o.maxChannelCount && Object.defineProperty(o, "maxChannelCount", {
        value: s
      });
      const r = t(n, {
        channelCount: s,
        channelCountMode: o.channelCountMode,
        channelInterpretation: o.channelInterpretation,
        gain: 1
      });
      return e(r, "channelCount", t => () => t.call(r), t => e => {
        t.call(r, e);

        try {
          o.channelCount = e;
        } catch (t) {
          if (e > o.maxChannelCount) throw t;
        }
      }), e(r, "channelCountMode", t => () => t.call(r), t => e => {
        t.call(r, e), o.channelCountMode = e;
      }), e(r, "channelInterpretation", t => () => t.call(r), t => e => {
        t.call(r, e), o.channelInterpretation = e;
      }), Object.defineProperty(r, "maxChannelCount", {
        get: () => o.maxChannelCount
      }), r.connect(o), r;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      const s = t(e);
      return n(null !== s ? s : e);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => null === t ? null : t.hasOwnProperty("AudioWorkletNode") ? t.AudioWorkletNode : null;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return r;
    });
    var s = n(5),
        i = n(4),
        o = n(1);

    const r = t => (e, n) => {
      const r = t(e, t => t.createBiquadFilter());
      return Object(o.a)(r, n), Object(s.a)(r, n, "Q"), Object(s.a)(r, n, "detune"), Object(s.a)(r, n, "frequency"), Object(s.a)(r, n, "gain"), Object(i.a)(r, n, "type"), r;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(1);

    const i = (t, e) => (n, i) => {
      const o = t(n, t => t.createChannelMerger(i.numberOfInputs));
      return 1 !== o.channelCount && "explicit" !== o.channelCountMode && e(n, o), Object(s.a)(o, i), o;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return a;
    });
    var s = n(5),
        i = n(1),
        o = n(30),
        r = n(31);

    const a = (t, e, n, a, c, u) => (h, l) => {
      if (void 0 === h.createConstantSource) return a(h, l);
      const d = n(h, t => t.createConstantSource());
      return Object(i.a)(d, l), Object(s.a)(d, l, "offset"), e(c, () => c(h)) || Object(o.a)(d), e(u, () => u(h)) || Object(r.a)(d), t(h, d), d;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(11);

    const i = (t, e, n, i) => (o, {
      offset: r,
      ...a
    }) => {
      const c = o.createBuffer(1, 2, o.sampleRate),
            u = e(o),
            h = n(o, { ...a,
        gain: r
      }),
            l = c.getChannelData(0);
      l[0] = 1, l[1] = 1, u.buffer = c, u.loop = !0;
      const d = {
        get bufferSize() {},

        get channelCount() {
          return h.channelCount;
        },

        set channelCount(t) {
          h.channelCount = t;
        },

        get channelCountMode() {
          return h.channelCountMode;
        },

        set channelCountMode(t) {
          h.channelCountMode = t;
        },

        get channelInterpretation() {
          return h.channelInterpretation;
        },

        set channelInterpretation(t) {
          h.channelInterpretation = t;
        },

        get context() {
          return h.context;
        },

        get inputs() {
          return [];
        },

        get numberOfInputs() {
          return u.numberOfInputs;
        },

        get numberOfOutputs() {
          return h.numberOfOutputs;
        },

        get offset() {
          return h.gain;
        },

        get onended() {
          return u.onended;
        },

        set onended(t) {
          u.onended = t;
        },

        addEventListener: (...t) => u.addEventListener(t[0], t[1], t[2]),
        dispatchEvent: (...t) => u.dispatchEvent(t[0]),
        removeEventListener: (...t) => u.removeEventListener(t[0], t[1], t[2]),

        start(t = 0) {
          u.start.call(u, t);
        },

        stop(t = 0) {
          u.stop.call(u, t);
        }

      };
      return t(o, u), i(Object(s.a)(d, h), () => u.connect(h), () => u.disconnect(h));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(4),
        i = n(1);

    const o = (t, e, n, o) => (r, a) => {
      const c = t(r, t => t.createConvolver());

      try {
        c.channelCount = 1;
      } catch (t) {
        return e(r, a);
      }

      if (Object(i.a)(c, a), a.disableNormalization === c.normalize && (c.normalize = !a.disableNormalization), Object(s.a)(c, a, "buffer"), a.channelCount > 2) throw n();
      if (o(c, "channelCount", t => () => t.call(c), t => e => {
        if (e > 2) throw n();
        return t.call(c, e);
      }), "max" === a.channelCountMode) throw n();
      return o(c, "channelCountMode", t => () => t.call(c), t => e => {
        if ("max" === e) throw n();
        return t.call(c, e);
      }), c;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(1),
        i = n(11);

    const o = (t, e, n) => (o, {
      buffer: r,
      channelCount: a,
      channelCountMode: c,
      channelInterpretation: u,
      disableNormalization: h
    }) => {
      const l = t(o, t => t.createConvolver());
      Object(s.a)(l, {
        channelCount: Math.max(a, 2),
        channelCountMode: "max" === c ? c : "clamped-max",
        channelInterpretation: u
      });
      const d = e(o, {
        channelCount: a,
        channelCountMode: c,
        channelInterpretation: u,
        gain: 1
      }),
            p = {
        get buffer() {
          return l.buffer;
        },

        set buffer(t) {
          l.buffer = t;
        },

        get bufferSize() {},

        get channelCount() {
          return d.channelCount;
        },

        set channelCount(t) {
          t > 2 && (l.channelCount = t), d.channelCount = t;
        },

        get channelCountMode() {
          return d.channelCountMode;
        },

        set channelCountMode(t) {
          "max" === t && (l.channelCountMode = t), d.channelCountMode = t;
        },

        get channelInterpretation() {
          return l.channelInterpretation;
        },

        set channelInterpretation(t) {
          l.channelInterpretation = t, d.channelInterpretation = t;
        },

        get context() {
          return l.context;
        },

        get inputs() {
          return [l];
        },

        get numberOfInputs() {
          return l.numberOfInputs;
        },

        get numberOfOutputs() {
          return l.numberOfOutputs;
        },

        get normalize() {
          return l.normalize;
        },

        set normalize(t) {
          l.normalize = t;
        },

        addEventListener: (...t) => l.addEventListener(t[0], t[1], t[2]),
        dispatchEvent: (...t) => l.dispatchEvent(t[0]),
        removeEventListener: (...t) => l.removeEventListener(t[0], t[1], t[2])
      };
      h === p.normalize && (p.normalize = !h), r !== p.buffer && (p.buffer = r);
      return n(Object(i.a)(p, d), () => l.connect(d), () => l.disconnect(d));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(5),
        i = n(1);

    const o = t => (e, n) => {
      const o = t(e, t => t.createDelay(n.maxDelayTime));
      return Object(i.a)(o, n), Object(s.a)(o, n, "delayTime"), o;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(5),
        i = n(1);

    const o = (t, e) => (n, o) => {
      const r = t(n, t => t.createDynamicsCompressor());
      if (Object(i.a)(r, o), o.channelCount > 2) throw e();
      if ("max" === o.channelCountMode) throw e();
      return Object(s.a)(r, o, "attack"), Object(s.a)(r, o, "knee"), Object(s.a)(r, o, "ratio"), Object(s.a)(r, o, "release"), Object(s.a)(r, o, "threshold"), r;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(5),
        i = n(1);

    const o = t => (e, n) => {
      const o = t(e, t => t.createGain());
      return Object(i.a)(o, n), Object(s.a)(o, n, "gain"), o;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(1);

    const i = (t, e) => (n, i, o) => {
      if (void 0 === n.createIIRFilter) return e(n, i, o);
      const r = t(n, t => t.createIIRFilter(o.feedforward, o.feedback));
      return Object(s.a)(r, o), r;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return c;
    });
    var s = n(43),
        i = n(42),
        o = n(11);

    function r(t, e) {
      const n = e[0] * e[0] + e[1] * e[1];
      return [(t[0] * e[0] + t[1] * e[1]) / n, (t[1] * e[0] - t[0] * e[1]) / n];
    }

    function a(t, e) {
      let n = [0, 0];

      for (let o = t.length - 1; o >= 0; o -= 1) i = e, n = [(s = n)[0] * i[0] - s[1] * i[1], s[0] * i[1] + s[1] * i[0]], n[0] += t[o];

      var s, i;
      return n;
    }

    const c = (t, e, n, c) => (u, h, {
      channelCount: l,
      channelCountMode: d,
      channelInterpretation: p,
      feedback: f,
      feedforward: _
    }) => {
      const m = Object(s.a)(h, u.sampleRate),
            g = f.length,
            v = _.length,
            y = Math.min(g, v);
      if (0 === f.length || f.length > 20) throw c();
      if (0 === f[0]) throw e();
      if (0 === _.length || _.length > 20) throw c();
      if (0 === _[0]) throw e();

      if (1 !== f[0]) {
        for (let t = 0; t < v; t += 1) _[t] /= f[0];

        for (let t = 1; t < g; t += 1) f[t] /= f[0];
      }

      const b = n(u, m, l, l);
      b.channelCount = l, b.channelCountMode = d, b.channelInterpretation = p;
      const x = [],
            w = [],
            T = [];

      for (let t = 0; t < l; t += 1) {
        x.push(0);
        const t = new Float32Array(32),
              e = new Float32Array(32);
        t.fill(0), e.fill(0), w.push(t), T.push(e);
      }

      b.onaudioprocess = t => {
        const e = t.inputBuffer,
              n = t.outputBuffer,
              s = e.numberOfChannels;

        for (let t = 0; t < s; t += 1) {
          const s = e.getChannelData(t),
                o = n.getChannelData(t);
          x[t] = Object(i.a)(f, g, _, v, y, w[t], T[t], x[t], 32, s, o);
        }
      };

      const O = u.sampleRate / 2,
            S = {
        get bufferSize() {
          return m;
        },

        get channelCount() {
          return b.channelCount;
        },

        set channelCount(t) {
          b.channelCount = t;
        },

        get channelCountMode() {
          return b.channelCountMode;
        },

        set channelCountMode(t) {
          b.channelCountMode = t;
        },

        get channelInterpretation() {
          return b.channelInterpretation;
        },

        set channelInterpretation(t) {
          b.channelInterpretation = t;
        },

        get context() {
          return b.context;
        },

        get inputs() {
          return [b];
        },

        get numberOfInputs() {
          return b.numberOfInputs;
        },

        get numberOfOutputs() {
          return b.numberOfOutputs;
        },

        addEventListener: (...t) => b.addEventListener(t[0], t[1], t[2]),
        dispatchEvent: (...t) => b.dispatchEvent(t[0]),

        getFrequencyResponse(e, n, s) {
          if (e.length !== n.length || n.length !== s.length) throw t();
          const i = e.length;

          for (let t = 0; t < i; t += 1) {
            const i = -Math.PI * (e[t] / O),
                  o = [Math.cos(i), Math.sin(i)],
                  c = r(a(_, o), a(f, o));
            n[t] = Math.sqrt(c[0] * c[0] + c[1] * c[1]), s[t] = Math.atan2(c[1], c[0]);
          }
        },

        removeEventListener: (...t) => b.removeEventListener(t[0], t[1], t[2])
      };
      return Object(o.a)(S, b);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => t(e, t => t.createMediaElementSource(n.mediaElement));
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(1);

    const i = (t, e) => (n, i) => {
      if (void 0 === n.createMediaStreamDestination) throw e();
      const o = t(n, t => t.createMediaStreamDestination());
      return Object(s.a)(o, i), 1 === o.numberOfOutputs && Object.defineProperty(o, "numberOfOutputs", {
        get: () => 0
      }), o;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, {
      mediaStream: n
    }) => {
      const s = n.getAudioTracks(),
            i = t(e, t => {
        const e = s.sort((t, e) => t.id < e.id ? -1 : t.id > e.id ? 1 : 0).slice(0, 1);
        return t.createMediaStreamSource(new MediaStream(e));
      });
      return Object.defineProperty(i, "mediaStream", {
        value: n
      }), i;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => (s, {
      mediaStreamTrack: i
    }) => "function" == typeof s.createMediaStreamTrackSource ? e(s, t => t.createMediaStreamTrackSource(i)) : e(s, e => {
      const s = new MediaStream([i]),
            o = e.createMediaStreamSource(s);
      if ("audio" !== i.kind) throw t();
      if (n(e)) throw new TypeError();
      return o;
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => null === t ? null : t.hasOwnProperty("OfflineAudioContext") ? t.OfflineAudioContext : t.hasOwnProperty("webkitOfflineAudioContext") ? t.webkitOfflineAudioContext : null;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return c;
    });
    var s = n(5),
        i = n(4),
        o = n(1),
        r = n(30),
        a = n(31);

    const c = (t, e, n, c, u, h, l) => (d, p) => {
      const f = n(d, t => t.createOscillator());
      return Object(o.a)(f, p), Object(s.a)(f, p, "detune"), Object(s.a)(f, p, "frequency"), void 0 !== p.periodicWave ? f.setPeriodicWave(p.periodicWave) : Object(i.a)(f, p, "type"), e(c, () => c(d)) || Object(r.a)(f), e(u, () => u(d)) || l(f, d), e(h, () => h(d)) || Object(a.a)(f), t(d, f), f;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return r;
    });
    var s = n(5),
        i = n(4),
        o = n(1);

    const r = (t, e) => (n, r) => {
      const a = t(n, t => t.createPanner());
      return void 0 === a.orientationX ? e(n, r) : (Object(o.a)(a, r), Object(s.a)(a, r, "orientationX"), Object(s.a)(a, r, "orientationY"), Object(s.a)(a, r, "orientationZ"), Object(s.a)(a, r, "positionX"), Object(s.a)(a, r, "positionY"), Object(s.a)(a, r, "positionZ"), Object(i.a)(a, r, "coneInnerAngle"), Object(i.a)(a, r, "coneOuterAngle"), Object(i.a)(a, r, "coneOuterGain"), Object(i.a)(a, r, "distanceModel"), Object(i.a)(a, r, "maxDistance"), Object(i.a)(a, r, "panningModel"), Object(i.a)(a, r, "refDistance"), Object(i.a)(a, r, "rolloffFactor"), a);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(1),
        i = n(11);

    const o = (t, e, n, o, r, a, c, u, h, l) => (d, {
      coneInnerAngle: p,
      coneOuterAngle: f,
      coneOuterGain: _,
      distanceModel: m,
      maxDistance: g,
      orientationX: v,
      orientationY: y,
      orientationZ: b,
      panningModel: x,
      positionX: w,
      positionY: T,
      positionZ: O,
      refDistance: S,
      rolloffFactor: C,
      ...k
    }) => {
      const A = n(d, t => t.createPanner());
      if (k.channelCount > 2) throw u();
      if ("max" === k.channelCountMode) throw u();
      Object(s.a)(A, k);
      const D = {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete"
      },
            M = o(d, { ...D,
        channelInterpretation: "speakers",
        numberOfInputs: 6
      }),
            j = r(d, { ...k,
        gain: 1
      }),
            E = r(d, { ...D,
        gain: 1
      }),
            R = r(d, { ...D,
        gain: 0
      }),
            q = r(d, { ...D,
        gain: 0
      }),
            I = r(d, { ...D,
        gain: 0
      }),
            F = r(d, { ...D,
        gain: 0
      }),
            V = r(d, { ...D,
        gain: 0
      }),
            N = a(d, 256, 6, 1),
            P = c(d, { ...D,
        curve: new Float32Array([1, 1]),
        oversample: "none"
      });
      let L = [v, y, b],
          z = [w, T, O];
      N.onaudioprocess = ({
        inputBuffer: t
      }) => {
        const e = [t.getChannelData(0)[0], t.getChannelData(1)[0], t.getChannelData(2)[0]];
        e.some((t, e) => t !== L[e]) && (A.setOrientation(...e), L = e);
        const n = [t.getChannelData(3)[0], t.getChannelData(4)[0], t.getChannelData(5)[0]];
        n.some((t, e) => t !== z[e]) && (A.setPosition(...n), z = n);
      }, Object.defineProperty(R.gain, "defaultValue", {
        get: () => 0
      }), Object.defineProperty(q.gain, "defaultValue", {
        get: () => 0
      }), Object.defineProperty(I.gain, "defaultValue", {
        get: () => 0
      }), Object.defineProperty(F.gain, "defaultValue", {
        get: () => 0
      }), Object.defineProperty(V.gain, "defaultValue", {
        get: () => 0
      });
      const B = {
        get bufferSize() {},

        get channelCount() {
          return A.channelCount;
        },

        set channelCount(t) {
          if (t > 2) throw u();
          j.channelCount = t, A.channelCount = t;
        },

        get channelCountMode() {
          return A.channelCountMode;
        },

        set channelCountMode(t) {
          if ("max" === t) throw u();
          j.channelCountMode = t, A.channelCountMode = t;
        },

        get channelInterpretation() {
          return A.channelInterpretation;
        },

        set channelInterpretation(t) {
          j.channelInterpretation = t, A.channelInterpretation = t;
        },

        get coneInnerAngle() {
          return A.coneInnerAngle;
        },

        set coneInnerAngle(t) {
          A.coneInnerAngle = t;
        },

        get coneOuterAngle() {
          return A.coneOuterAngle;
        },

        set coneOuterAngle(t) {
          A.coneOuterAngle = t;
        },

        get coneOuterGain() {
          return A.coneOuterGain;
        },

        set coneOuterGain(t) {
          if (t < 0 || t > 1) throw e();
          A.coneOuterGain = t;
        },

        get context() {
          return A.context;
        },

        get distanceModel() {
          return A.distanceModel;
        },

        set distanceModel(t) {
          A.distanceModel = t;
        },

        get inputs() {
          return [j];
        },

        get maxDistance() {
          return A.maxDistance;
        },

        set maxDistance(t) {
          if (t < 0) throw new RangeError();
          A.maxDistance = t;
        },

        get numberOfInputs() {
          return A.numberOfInputs;
        },

        get numberOfOutputs() {
          return A.numberOfOutputs;
        },

        get orientationX() {
          return E.gain;
        },

        get orientationY() {
          return R.gain;
        },

        get orientationZ() {
          return q.gain;
        },

        get panningModel() {
          return A.panningModel;
        },

        set panningModel(t) {
          if (A.panningModel = t, A.panningModel !== t && "HRTF" === t) throw u();
        },

        get positionX() {
          return I.gain;
        },

        get positionY() {
          return F.gain;
        },

        get positionZ() {
          return V.gain;
        },

        get refDistance() {
          return A.refDistance;
        },

        set refDistance(t) {
          if (t < 0) throw new RangeError();
          A.refDistance = t;
        },

        get rolloffFactor() {
          return A.rolloffFactor;
        },

        set rolloffFactor(t) {
          if (t < 0) throw new RangeError();
          A.rolloffFactor = t;
        },

        addEventListener: (...t) => j.addEventListener(t[0], t[1], t[2]),
        dispatchEvent: (...t) => j.dispatchEvent(t[0]),
        removeEventListener: (...t) => j.removeEventListener(t[0], t[1], t[2])
      };
      p !== B.coneInnerAngle && (B.coneInnerAngle = p), f !== B.coneOuterAngle && (B.coneOuterAngle = f), _ !== B.coneOuterGain && (B.coneOuterGain = _), m !== B.distanceModel && (B.distanceModel = m), g !== B.maxDistance && (B.maxDistance = g), v !== B.orientationX.value && (B.orientationX.value = v), y !== B.orientationY.value && (B.orientationY.value = y), b !== B.orientationZ.value && (B.orientationZ.value = b), x !== B.panningModel && (B.panningModel = x), w !== B.positionX.value && (B.positionX.value = w), T !== B.positionY.value && (B.positionY.value = T), O !== B.positionZ.value && (B.positionZ.value = O), S !== B.refDistance && (B.refDistance = S), C !== B.rolloffFactor && (B.rolloffFactor = C), 1 === L[0] && 0 === L[1] && 0 === L[2] || A.setOrientation(...L), 0 === z[0] && 0 === z[1] && 0 === z[2] || A.setPosition(...z);
      return l(Object(i.a)(B, A), () => {
        j.connect(A), t(j, P, 0, 0), P.connect(E).connect(M, 0, 0), P.connect(R).connect(M, 0, 1), P.connect(q).connect(M, 0, 2), P.connect(I).connect(M, 0, 3), P.connect(F).connect(M, 0, 4), P.connect(V).connect(M, 0, 5), M.connect(N).connect(d.destination);
      }, () => {
        j.disconnect(A), h(j, P, 0, 0), P.disconnect(E), E.disconnect(M), P.disconnect(R), R.disconnect(M), P.disconnect(q), q.disconnect(M), P.disconnect(I), I.disconnect(M), P.disconnect(F), F.disconnect(M), P.disconnect(V), V.disconnect(M), M.disconnect(N), N.disconnect(d.destination);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, {
      disableNormalization: n,
      imag: s,
      real: i
    }) => {
      const o = t(e),
            r = new Float32Array(s),
            a = new Float32Array(i);
      return null !== o ? o.createPeriodicWave(a, r, {
        disableNormalization: n
      }) : e.createPeriodicWave(a, r, {
        disableNormalization: n
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n, s, i) => t(e, t => t.createScriptProcessor(n, s, i));
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(5),
        i = n(1);

    const o = (t, e, n) => (o, r) => t(o, t => {
      const a = r.channelCountMode;
      if ("clamped-max" === a) throw n();
      if (void 0 === o.createStereoPanner) return e(o, r);
      const c = t.createStereoPanner();
      return Object(i.a)(c, r), Object(s.a)(c, r, "pan"), Object.defineProperty(c, "channelCountMode", {
        get: () => a,
        set: t => {
          if (t !== a) throw n();
        }
      }), c;
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(11);

    const i = (t, e, n, i, o, r) => {
      const a = new Float32Array([1, 1]),
            c = Math.PI / 2,
            u = {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete"
      },
            h = { ...u,
        oversample: "none"
      },
            l = (t, s, r, l, d) => {
        if (1 === s) return ((t, e, s, o) => {
          const r = new Float32Array(16385),
                l = new Float32Array(16385);

          for (let t = 0; t < 16385; t += 1) {
            const e = t / 16384 * c;
            r[t] = Math.cos(e), l[t] = Math.sin(e);
          }

          const d = n(t, { ...u,
            gain: 0
          }),
                p = i(t, { ...h,
            curve: r
          }),
                f = i(t, { ...h,
            curve: a
          }),
                _ = n(t, { ...u,
            gain: 0
          }),
                m = i(t, { ...h,
            curve: l
          });

          return {
            connectGraph() {
              e.connect(d), e.connect(f.inputs[0]), e.connect(_), f.connect(s), s.connect(p.inputs[0]), s.connect(m.inputs[0]), p.connect(d.gain), m.connect(_.gain), d.connect(o, 0, 0), _.connect(o, 0, 1);
            },

            disconnectGraph() {
              e.disconnect(d), e.disconnect(f.inputs[0]), e.disconnect(_), f.disconnect(s), s.disconnect(p.inputs[0]), s.disconnect(m.inputs[0]), p.disconnect(d.gain), m.disconnect(_.gain), d.disconnect(o, 0, 0), _.disconnect(o, 0, 1);
            }

          };
        })(t, r, l, d);
        if (2 === s) return ((t, s, o, r) => {
          const l = new Float32Array(16385),
                d = new Float32Array(16385),
                p = new Float32Array(16385),
                f = new Float32Array(16385),
                _ = Math.floor(8192.5);

          for (let t = 0; t < 16385; t += 1) if (t > _) {
            const e = (t - _) / (16384 - _) * c;
            l[t] = Math.cos(e), d[t] = Math.sin(e), p[t] = 0, f[t] = 1;
          } else {
            const e = t / (16384 - _) * c;
            l[t] = 1, d[t] = 0, p[t] = Math.cos(e), f[t] = Math.sin(e);
          }

          const m = e(t, {
            channelCount: 2,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            numberOfOutputs: 2
          }),
                g = n(t, { ...u,
            gain: 0
          }),
                v = i(t, { ...h,
            curve: l
          }),
                y = n(t, { ...u,
            gain: 0
          }),
                b = i(t, { ...h,
            curve: d
          }),
                x = i(t, { ...h,
            curve: a
          }),
                w = n(t, { ...u,
            gain: 0
          }),
                T = i(t, { ...h,
            curve: p
          }),
                O = n(t, { ...u,
            gain: 0
          }),
                S = i(t, { ...h,
            curve: f
          });
          return {
            connectGraph() {
              s.connect(m), s.connect(x.inputs[0]), m.connect(g, 1), m.connect(y, 1), m.connect(w, 1), m.connect(O, 1), x.connect(o), o.connect(v.inputs[0]), o.connect(b.inputs[0]), o.connect(T.inputs[0]), o.connect(S.inputs[0]), v.connect(g.gain), b.connect(y.gain), T.connect(w.gain), S.connect(O.gain), g.connect(r, 0, 0), w.connect(r, 0, 0), y.connect(r, 0, 1), O.connect(r, 0, 1);
            },

            disconnectGraph() {
              s.disconnect(m), s.disconnect(x.inputs[0]), m.disconnect(g, 1), m.disconnect(y, 1), m.disconnect(w, 1), m.disconnect(O, 1), x.disconnect(o), o.disconnect(v.inputs[0]), o.disconnect(b.inputs[0]), o.disconnect(T.inputs[0]), o.disconnect(S.inputs[0]), v.disconnect(g.gain), b.disconnect(y.gain), T.disconnect(w.gain), S.disconnect(O.gain), g.disconnect(r, 0, 0), w.disconnect(r, 0, 0), y.disconnect(r, 0, 1), O.disconnect(r, 0, 1);
            }

          };
        })(t, r, l, d);
        throw o();
      };

      return (e, {
        channelCount: i,
        channelCountMode: a,
        pan: c,
        ...u
      }) => {
        if ("max" === a) throw o();
        const h = t(e, { ...u,
          channelCount: 1,
          channelCountMode: a,
          numberOfInputs: 2
        }),
              d = n(e, { ...u,
          channelCount: i,
          channelCountMode: a,
          gain: 1
        }),
              p = n(e, {
          channelCount: 1,
          channelCountMode: "explicit",
          channelInterpretation: "discrete",
          gain: c
        });
        let {
          connectGraph: f,
          disconnectGraph: _
        } = l(e, i, d, p, h);
        Object.defineProperty(p.gain, "defaultValue", {
          get: () => 0
        });
        const m = {
          get bufferSize() {},

          get channelCount() {
            return d.channelCount;
          },

          set channelCount(t) {
            d.channelCount !== t && (g && _(), ({
              connectGraph: f,
              disconnectGraph: _
            } = l(e, t, d, p, h)), g && f()), d.channelCount = t;
          },

          get channelCountMode() {
            return d.channelCountMode;
          },

          set channelCountMode(t) {
            if ("clamped-max" === t || "max" === t) throw o();
            d.channelCountMode = t;
          },

          get channelInterpretation() {
            return d.channelInterpretation;
          },

          set channelInterpretation(t) {
            d.channelInterpretation = t;
          },

          get context() {
            return d.context;
          },

          get inputs() {
            return [d];
          },

          get numberOfInputs() {
            return d.numberOfInputs;
          },

          get numberOfOutputs() {
            return d.numberOfOutputs;
          },

          get pan() {
            return p.gain;
          },

          addEventListener: (...t) => d.addEventListener(t[0], t[1], t[2]),
          dispatchEvent: (...t) => d.dispatchEvent(t[0]),
          removeEventListener: (...t) => d.removeEventListener(t[0], t[1], t[2])
        };
        let g = !1;
        return r(Object(s.a)(m, h), () => {
          f(), g = !0;
        }, () => {
          _(), g = !1;
        });
      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(4),
        i = n(1);

    const o = (t, e, n, o, r, a, c) => (u, h) => {
      const l = n(u, t => t.createWaveShaper());

      try {
        return l.curve = new Float32Array([1]), o(u, h);
      } catch {}

      Object(i.a)(l, h);
      const d = h.curve;
      if (null !== d && d.length < 2) throw e();
      Object(s.a)(l, h, "curve"), Object(s.a)(l, h, "oversample");
      let p = null,
          f = !1;
      c(l, "curve", t => () => t.call(l), e => n => (e.call(l, n), f && (r(n) && null === p ? p = t(u, l) : r(n) || null === p || (p(), p = null)), n));
      return a(l, () => {
        f = !0, r(l.curve) && (p = t(u, l));
      }, () => {
        f = !1, null !== p && (p(), p = null);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(1),
        i = n(11);

    const o = (t, e, n, o, r, a) => (c, {
      curve: u,
      oversample: h,
      ...l
    }) => {
      const d = n(c, t => t.createWaveShaper()),
            p = n(c, t => t.createWaveShaper());
      Object(s.a)(d, l), Object(s.a)(p, l);

      const f = o(c, { ...l,
        gain: 1
      }),
            _ = o(c, { ...l,
        gain: -1
      }),
            m = o(c, { ...l,
        gain: 1
      }),
            g = o(c, { ...l,
        gain: -1
      });

      let v = null,
          y = !1,
          b = null;
      const x = {
        get bufferSize() {},

        get channelCount() {
          return d.channelCount;
        },

        set channelCount(t) {
          f.channelCount = t, _.channelCount = t, d.channelCount = t, m.channelCount = t, p.channelCount = t, g.channelCount = t;
        },

        get channelCountMode() {
          return d.channelCountMode;
        },

        set channelCountMode(t) {
          f.channelCountMode = t, _.channelCountMode = t, d.channelCountMode = t, m.channelCountMode = t, p.channelCountMode = t, g.channelCountMode = t;
        },

        get channelInterpretation() {
          return d.channelInterpretation;
        },

        set channelInterpretation(t) {
          f.channelInterpretation = t, _.channelInterpretation = t, d.channelInterpretation = t, m.channelInterpretation = t, p.channelInterpretation = t, g.channelInterpretation = t;
        },

        get context() {
          return d.context;
        },

        get curve() {
          return b;
        },

        set curve(n) {
          if (null !== u && u.length < 2) throw e();
          if (null === n) d.curve = n, p.curve = n;else {
            const t = n.length,
                  e = new Float32Array(t + 2 - t % 2),
                  s = new Float32Array(t + 2 - t % 2);
            e[0] = n[0], s[0] = -n[t - 1];
            const i = Math.ceil((t + 1) / 2),
                  o = (t + 1) / 2 - 1;

            for (let r = 1; r < i; r += 1) {
              const a = r / i * o,
                    c = Math.floor(a),
                    u = Math.ceil(a);
              e[r] = c === u ? n[c] : (1 - (a - c)) * n[c] + (1 - (u - a)) * n[u], s[r] = c === u ? -n[t - 1 - c] : -(1 - (a - c)) * n[t - 1 - c] - (1 - (u - a)) * n[t - 1 - u];
            }

            e[i] = t % 2 == 1 ? n[i - 1] : (n[i - 2] + n[i - 1]) / 2, d.curve = e, p.curve = s;
          }
          b = n, y && (r(b) && null === v ? v = t(c, f) : null !== v && (v(), v = null));
        },

        get inputs() {
          return [f];
        },

        get numberOfInputs() {
          return d.numberOfInputs;
        },

        get numberOfOutputs() {
          return d.numberOfOutputs;
        },

        get oversample() {
          return d.oversample;
        },

        set oversample(t) {
          d.oversample = t, p.oversample = t;
        },

        addEventListener: (...t) => f.addEventListener(t[0], t[1], t[2]),
        dispatchEvent: (...t) => f.dispatchEvent(t[0]),
        removeEventListener: (...t) => f.removeEventListener(t[0], t[1], t[2])
      };
      u !== x.curve && (x.curve = u), h !== x.oversample && (x.oversample = h);
      return a(Object(i.a)(x, m), () => {
        f.connect(d).connect(m), f.connect(_).connect(p).connect(g).connect(m), y = !0, r(b) && (v = t(c, f));
      }, () => {
        f.disconnect(d), d.disconnect(m), f.disconnect(_), _.disconnect(p), p.disconnect(g), g.disconnect(m), y = !1, null !== v && (v(), v = null);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(14);

    const i = {
      numberOfChannels: 1
    },
          o = (t, e, n, o, r) => class extends t {
      constructor(t, n, r) {
        let a;
        if ("number" == typeof t && void 0 !== n && void 0 !== r) a = {
          length: n,
          numberOfChannels: t,
          sampleRate: r
        };else {
          if ("object" != typeof t) throw new Error("The given parameters are not valid.");
          a = t;
        }
        const {
          length: c,
          numberOfChannels: u,
          sampleRate: h
        } = { ...i,
          ...a
        },
              l = o(u, c, h);
        e(s.a, () => Object(s.a)(l)) || l.addEventListener("statechange", (() => {
          let t = 0;

          const e = n => {
            "running" === this._state && (t > 0 ? (l.removeEventListener("statechange", e), n.stopImmediatePropagation(), this._waitForThePromiseToSettle(n)) : t += 1);
          };

          return e;
        })()), super(l, u), this._length = c, this._nativeOfflineAudioContext = l, this._state = null;
      }

      get length() {
        return void 0 === this._nativeOfflineAudioContext.length ? this._length : this._nativeOfflineAudioContext.length;
      }

      get state() {
        return null === this._state ? this._nativeOfflineAudioContext.state : this._state;
      }

      startRendering() {
        return "running" === this._state ? Promise.reject(n()) : (this._state = "running", r(this.destination, this._nativeOfflineAudioContext).then(t => (this._state = null, t)).catch(t => {
          throw this._state = null, t;
        }));
      }

      _waitForThePromiseToSettle(t) {
        null === this._state ? this._nativeOfflineAudioContext.dispatchEvent(t) : setTimeout(() => this._waitForThePromiseToSettle(t));
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return r;
    });
    var s = n(17),
        i = n(21);

    const o = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      detune: 0,
      frequency: 440,
      type: "sine"
    },
          r = (t, e, n, r, a, c, u, h) => class extends t {
      constructor(t, n = o) {
        const s = c(t),
              i = { ...o,
          ...n
        },
              h = r(s, i),
              l = u(s),
              d = l ? a() : null,
              p = t.sampleRate / 2;
        super(t, !1, h, d), this._detune = e(this, l, h.detune, 153600, -153600), this._frequency = e(this, l, h.frequency, p, -p), this._nativeOscillatorNode = h, this._onended = null, this._oscillatorNodeRenderer = d, null !== this._oscillatorNodeRenderer && void 0 !== i.periodicWave && (this._oscillatorNodeRenderer.periodicWave = i.periodicWave);
      }

      get detune() {
        return this._detune;
      }

      get frequency() {
        return this._frequency;
      }

      get onended() {
        return this._onended;
      }

      set onended(t) {
        const e = "function" == typeof t ? h(this, t) : null;
        this._nativeOscillatorNode.onended = e;
        const n = this._nativeOscillatorNode.onended;
        this._onended = null !== n && n === e ? t : n;
      }

      get type() {
        return this._nativeOscillatorNode.type;
      }

      set type(t) {
        if (this._nativeOscillatorNode.type = t, "custom" === t) throw n();
        null !== this._oscillatorNodeRenderer && (this._oscillatorNodeRenderer.periodicWave = null);
      }

      setPeriodicWave(t) {
        this._nativeOscillatorNode.setPeriodicWave(t), null !== this._oscillatorNodeRenderer && (this._oscillatorNodeRenderer.periodicWave = t);
      }

      start(t = 0) {
        if (this._nativeOscillatorNode.start(t), null !== this._oscillatorNodeRenderer) this._oscillatorNodeRenderer.start = t;else {
          Object(s.a)(this);

          const t = () => {
            this._nativeOscillatorNode.removeEventListener("ended", t), setTimeout(() => Object(i.a)(this), 1e3);
          };

          this._nativeOscillatorNode.addEventListener("ended", t);
        }
      }

      stop(t = 0) {
        this._nativeOscillatorNode.stop(t), null !== this._oscillatorNodeRenderer && (this._oscillatorNodeRenderer.stop = t);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(3);

    const i = (t, e, n, i, o) => () => {
      const r = new WeakMap();
      let a = null,
          c = null,
          u = null;
      return {
        set periodicWave(t) {
          a = t;
        },

        set start(t) {
          c = t;
        },

        set stop(t) {
          u = t;
        },

        render(h, l, d) {
          const p = r.get(l);
          return void 0 !== p ? Promise.resolve(p) : (async (h, l, d) => {
            let p = n(h);
            const f = Object(s.a)(p, l);

            if (!f) {
              const t = {
                channelCount: p.channelCount,
                channelCountMode: p.channelCountMode,
                channelInterpretation: p.channelInterpretation,
                detune: p.detune.value,
                frequency: p.frequency.value,
                periodicWave: null === a ? void 0 : a,
                type: p.type
              };
              p = e(l, t), null !== c && p.start(c), null !== u && p.stop(u);
            }

            return r.set(l, p), f ? (await t(l, h.detune, p.detune, d), await t(l, h.frequency, p.frequency, d)) : (await i(l, h.detune, p.detune, d), await i(l, h.frequency, p.frequency, d)), await o(h, l, p, d), p;
          })(h, l, d);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(2);

    const i = {
      channelCount: 2,
      channelCountMode: "clamped-max",
      channelInterpretation: "speakers",
      coneInnerAngle: 360,
      coneOuterAngle: 360,
      coneOuterGain: 0,
      distanceModel: "inverse",
      maxDistance: 1e4,
      orientationX: 1,
      orientationY: 0,
      orientationZ: 0,
      panningModel: "equalpower",
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      refDistance: 1,
      rolloffFactor: 1
    },
          o = (t, e, n, o, r, a) => class extends t {
      constructor(t, c = i) {
        const u = r(t),
              h = { ...i,
          ...c
        },
              l = n(u, h),
              d = a(u);
        super(t, !1, l, d ? o() : null), this._nativePannerNode = l, this._orientationX = e(this, d, l.orientationX, s.b, s.a), this._orientationY = e(this, d, l.orientationY, s.b, s.a), this._orientationZ = e(this, d, l.orientationZ, s.b, s.a), this._positionX = e(this, d, l.positionX, s.b, s.a), this._positionY = e(this, d, l.positionY, s.b, s.a), this._positionZ = e(this, d, l.positionZ, s.b, s.a);
      }

      get coneInnerAngle() {
        return this._nativePannerNode.coneInnerAngle;
      }

      set coneInnerAngle(t) {
        this._nativePannerNode.coneInnerAngle = t;
      }

      get coneOuterAngle() {
        return this._nativePannerNode.coneOuterAngle;
      }

      set coneOuterAngle(t) {
        this._nativePannerNode.coneOuterAngle = t;
      }

      get coneOuterGain() {
        return this._nativePannerNode.coneOuterGain;
      }

      set coneOuterGain(t) {
        this._nativePannerNode.coneOuterGain = t;
      }

      get distanceModel() {
        return this._nativePannerNode.distanceModel;
      }

      set distanceModel(t) {
        this._nativePannerNode.distanceModel = t;
      }

      get maxDistance() {
        return this._nativePannerNode.maxDistance;
      }

      set maxDistance(t) {
        this._nativePannerNode.maxDistance = t;
      }

      get orientationX() {
        return this._orientationX;
      }

      get orientationY() {
        return this._orientationY;
      }

      get orientationZ() {
        return this._orientationZ;
      }

      get panningModel() {
        return this._nativePannerNode.panningModel;
      }

      set panningModel(t) {
        this._nativePannerNode.panningModel = t;
      }

      get positionX() {
        return this._positionX;
      }

      get positionY() {
        return this._positionY;
      }

      get positionZ() {
        return this._positionZ;
      }

      get refDistance() {
        return this._nativePannerNode.refDistance;
      }

      set refDistance(t) {
        this._nativePannerNode.refDistance = t;
      }

      get rolloffFactor() {
        return this._nativePannerNode.rolloffFactor;
      }

      set rolloffFactor(t) {
        this._nativePannerNode.rolloffFactor = t;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(12),
        i = n(3);

    const o = (t, e, n, o, r, a, c, u, h, l) => () => {
      const d = new WeakMap();
      let p = null;
      return {
        render(f, _, m) {
          const g = d.get(_);
          return void 0 !== g ? Promise.resolve(g) : (async (f, _, m) => {
            let g = null,
                v = a(f);
            const y = {
              channelCount: v.channelCount,
              channelCountMode: v.channelCountMode,
              channelInterpretation: v.channelInterpretation
            },
                  b = { ...y,
              coneInnerAngle: v.coneInnerAngle,
              coneOuterAngle: v.coneOuterAngle,
              coneOuterGain: v.coneOuterGain,
              distanceModel: v.distanceModel,
              maxDistance: v.maxDistance,
              panningModel: v.panningModel,
              refDistance: v.refDistance,
              rolloffFactor: v.rolloffFactor
            },
                  x = Object(i.a)(v, _);
            if ("bufferSize" in v) g = o(_, { ...y,
              gain: 1
            });else if (!x) {
              const t = { ...b,
                orientationX: v.orientationX.value,
                orientationY: v.orientationY.value,
                orientationZ: v.orientationZ.value,
                positionX: v.positionX.value,
                positionY: v.positionY.value,
                positionZ: v.positionZ.value
              };
              v = r(_, t);
            }

            if (d.set(_, null === g ? v : g), null !== g) {
              if (null === p) {
                if (null === c) throw new Error("Missing the native OfflineAudioContext constructor.");
                const t = new c(6, f.context.length, _.sampleRate),
                      s = e(t, {
                  channelCount: 1,
                  channelCountMode: "explicit",
                  channelInterpretation: "speakers",
                  numberOfInputs: 6
                });
                s.connect(t.destination), p = (async () => {
                  const e = await Promise.all([f.orientationX, f.orientationY, f.orientationZ, f.positionX, f.positionY, f.positionZ].map(async (e, s) => {
                    const i = n(t, {
                      channelCount: 1,
                      channelCountMode: "explicit",
                      channelInterpretation: "discrete",
                      offset: 0 === s ? 1 : 0
                    });
                    return await u(t, e, i.offset, m), i;
                  }));

                  for (let t = 0; t < 6; t += 1) e[t].connect(s, 0, t), e[t].start(0);

                  return l(t);
                })();
              }

              const t = await p,
                    s = o(_, { ...y,
                gain: 1
              });
              await h(f, _, s, m);
              const i = [];

              for (let e = 0; e < t.numberOfChannels; e += 1) i.push(t.getChannelData(e));

              let a = [i[0][0], i[1][0], i[2][0]],
                  d = [i[3][0], i[4][0], i[5][0]],
                  v = o(_, { ...y,
                gain: 1
              }),
                  x = r(_, { ...b,
                orientationX: a[0],
                orientationY: a[1],
                orientationZ: a[2],
                positionX: d[0],
                positionY: d[1],
                positionZ: d[2]
              });
              s.connect(v).connect(x.inputs[0]), x.connect(g);

              for (let e = 128; e < t.length; e += 128) {
                const t = [i[0][e], i[1][e], i[2][e]],
                      n = [i[3][e], i[4][e], i[5][e]];

                if (t.some((t, e) => t !== a[e]) || n.some((t, e) => t !== d[e])) {
                  a = t, d = n;
                  const i = e / _.sampleRate;
                  v.gain.setValueAtTime(0, i), v = o(_, { ...y,
                    gain: 0
                  }), x = r(_, { ...b,
                    orientationX: a[0],
                    orientationY: a[1],
                    orientationZ: a[2],
                    positionX: d[0],
                    positionY: d[1],
                    positionZ: d[2]
                  }), v.gain.setValueAtTime(1, i), s.connect(v).connect(x.inputs[0]), x.connect(g);
                }
              }

              return g;
            }

            return x ? (await t(_, f.orientationX, v.orientationX, m), await t(_, f.orientationY, v.orientationY, m), await t(_, f.orientationZ, v.orientationZ, m), await t(_, f.positionX, v.positionX, m), await t(_, f.positionY, v.positionY, m), await t(_, f.positionZ, v.positionZ, m)) : (await u(_, f.orientationX, v.orientationX, m), await u(_, f.orientationY, v.orientationY, m), await u(_, f.orientationZ, v.orientationZ, m), await u(_, f.positionX, v.positionX, m), await u(_, f.positionY, v.positionY, m), await u(_, f.positionZ, v.positionZ, m)), Object(s.a)(v) ? await h(f, _, v.inputs[0], m) : await h(f, _, v, m), v;
          })(f, _, m);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      disableNormalization: !1
    },
          i = (t, e, n) => class i {
      constructor(i, o) {
        const r = e(i),
              a = { ...s,
          ...o
        },
              c = t(r, a);
        return n.add(c), c;
      }

      static [Symbol.hasInstance](t) {
        return null !== t && "object" == typeof t && Object.getPrototypeOf(t) === i.prototype || n.has(t);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => (n, s, i, o) => (t(s).replay(i), e(s, n, i, o));
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => async (s, i, o, r) => {
      const a = t(s),
            c = [...r, s];
      await Promise.all(a.activeInputs.map((t, r) => Array.from(t).filter(([t]) => !c.includes(t)).map(async ([t, a]) => {
        const u = e(t),
              h = await u.render(t, i, c),
              l = s.context.destination;
        n(t) || s === l && n(s) || h.connect(o, a, r);
      })).reduce((t, e) => [...t, ...e], []));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => async (s, i, o, r) => {
      const a = e(s);
      await Promise.all(Array.from(a.activeInputs).map(async ([e, s]) => {
        const a = t(e),
              c = await a.render(e, i, r);
        n(e) || c.connect(o, s);
      }));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(14);

    const i = (t, e, n, i) => o => t(s.a, () => Object(s.a)(o)) ? Promise.resolve(t(i, i)).then(t => {
      if (!t) {
        const t = n(o, 512, 0, 1);
        o.oncomplete = () => {
          t.onaudioprocess = null, t.disconnect();
        }, t.onaudioprocess = () => o.currentTime, t.connect(o.destination);
      }

      return o.startRendering();
    }) : new Promise(t => {
      const n = e(o, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        gain: 0
      });
      o.oncomplete = e => {
        n.disconnect(), t(e.renderedBuffer);
      }, n.connect(o.destination), o.startRendering();
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(29);

    const i = (t, e, n, i, o, r, a, c) => {
      const u = [];
      return (h, l) => n(h).render(h, l, u).then(() => Promise.all(Array.from(i(l)).map(t => n(t).render(t, l, u)))).then(() => o(l)).then(n => ("function" != typeof n.copyFromChannel ? (a(n), Object(s.a)(n)) : e(r, () => r(n)) || c(n), t.add(n), n));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 2,
      channelCountMode: "explicit",
      channelInterpretation: "speakers",
      pan: 0
    },
          i = (t, e, n, i, o, r) => class extends t {
      constructor(t, a = s) {
        const c = o(t),
              u = { ...s,
          ...a
        },
              h = n(c, u),
              l = r(c);
        super(t, !1, h, l ? i() : null), this._pan = e(this, l, h.pan, 1, -1);
      }

      get pan() {
        return this._pan;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(12),
        i = n(3);

    const o = (t, e, n, o, r) => () => {
      const a = new WeakMap();
      return {
        render(c, u, h) {
          const l = a.get(u);
          return void 0 !== l ? Promise.resolve(l) : (async (c, u, h) => {
            let l = n(c);
            const d = Object(i.a)(l, u);

            if (!d) {
              const t = {
                channelCount: l.channelCount,
                channelCountMode: l.channelCountMode,
                channelInterpretation: l.channelInterpretation,
                pan: l.pan.value
              };
              l = e(u, t);
            }

            return a.set(u, l), d ? await t(u, c.pan, l.pan, h) : await o(u, c.pan, l.pan, h), Object(s.a)(l) ? await r(c, u, l.inputs[0], h) : await r(c, u, l, h), l;
          })(c, u, h);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;

      try {
        new t({
          length: 1,
          sampleRate: 44100
        });
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      const e = new t(1, 1, 44100).createBuffer(1, 1, 44100);
      if (void 0 === e.copyToChannel) return !0;
      const n = new Float32Array(2);

      try {
        e.copyFromChannel(n, 0, 0);
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e, t => t.createBufferSource());
      n.start();

      try {
        n.start();
      } catch {
        return !0;
      }

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return Promise.resolve(!1);
      const e = new t(1, 1, 44100),
            n = e.createBuffer(1, 1, e.sampleRate),
            s = e.createBufferSource();
      return n.getChannelData(0)[0] = 1, s.buffer = n, s.start(0, 0, 0), s.connect(e.destination), new Promise(t => {
        e.oncomplete = ({
          renderedBuffer: e
        }) => {
          t(0 === e.getChannelData(0)[0]);
        }, e.startRendering();
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e, t => t.createBufferSource()),
            s = e.createBuffer(1, 1, 44100);
      n.buffer = s;

      try {
        n.start(0, 1);
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e, t => t.createBufferSource());
      n.start();

      try {
        n.stop();
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      if (void 0 !== t.prototype && void 0 !== t.prototype.close) return !0;
      const e = new t(),
            n = void 0 !== e.close;

      try {
        e.close();
      } catch {}

      return n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return Promise.resolve(!1);
      const e = new t(1, 1, 44100);
      return new Promise(t => {
        let n = !0;

        const s = s => {
          n && (n = !1, e.startRendering(), t(s instanceof TypeError));
        };

        let i;

        try {
          i = e.decodeAudioData(null, () => {}, s);
        } catch (t) {
          s(t);
        }

        void 0 !== i && i.catch(s);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      let e;

      try {
        e = new t({
          latencyHint: "balanced"
        });
      } catch {
        return !1;
      }

      return e.close(), !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      const e = new t(1, 1, 44100).createGain(),
            n = e.connect(e) === e;
      return e.disconnect(e), n;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e, t => t.createOscillator());

      try {
        n.start(-1);
      } catch (t) {
        return t instanceof RangeError;
      }

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = e.createBuffer(1, 1, 44100),
            s = t(e, t => t.createBufferSource());
      s.buffer = n, s.start(), s.stop();

      try {
        return s.stop(), !0;
      } catch {
        return !1;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      const n = t(e, t => t.createOscillator());

      try {
        n.stop(-1);
      } catch (t) {
        return t instanceof RangeError;
      }

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => async () => {
      if (null === t) return !0;
      if (null === e) return !1;
      const n = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor("a",A)'], {
        type: "application/javascript; charset=utf-8"
      }),
            s = new e(1, 128, 3200),
            i = URL.createObjectURL(n);
      let o = !1;

      try {
        await s.audioWorklet.addModule(i);
        const e = s.createGain(),
              n = new t(s, "a", {
          numberOfOutputs: 0
        });
        n.port.onmessage = () => o = !0, e.connect(n), await s.startRendering();
      } catch {} finally {
        URL.revokeObjectURL(i);
      }

      return o;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => () => {
      if (null === e) return !1;
      const n = new e(1, 1, 44100),
            s = t(n, t => t.createChannelMerger());

      try {
        s.channelCount = 2;
      } catch {
        return !0;
      }

      return !1;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => () => {
      if (null === e) return !1;
      const n = new e(1, 1, 44100);
      return void 0 === n.createConstantSource || t(n, t => t.createConstantSource()).offset.maxValue !== Number.POSITIVE_INFINITY;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      const e = new t(1, 1, 44100),
            n = e.createConvolver();
      n.buffer = e.createBuffer(1, 1, e.sampleRate);

      try {
        n.buffer = e.createBuffer(1, 1, e.sampleRate);
      } catch {
        return !1;
      }

      return !0;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => null !== t && t.hasOwnProperty("isSecureContext");
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return !1;
      const e = new t();

      try {
        return e.createMediaStreamSource(new MediaStream()), !1;
      } catch (t) {
        return !0;
      }
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => () => {
      if (null === e) return Promise.resolve(!1);
      const n = new e(1, 1, 44100),
            s = t(n, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        gain: 0
      });
      return new Promise(t => {
        n.oncomplete = () => {
          s.disconnect(), t(0 !== n.currentTime);
        }, n.startRendering();
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => () => {
      if (null === t) return Promise.resolve(!1);
      const e = new t(1, 1, 44100);
      if (void 0 === e.createStereoPanner) return Promise.resolve(!0);
      if (void 0 === e.createConstantSource) return Promise.resolve(!0);
      const n = e.createConstantSource(),
            s = e.createStereoPanner();
      return n.channelCount = 1, n.offset.value = 1, s.channelCount = 1, n.start(), n.connect(s).connect(e.destination), e.startRendering().then(t => 1 !== t.getChannelData(0)[0]);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });

    const s = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      curve: null,
      oversample: "none"
    },
          i = (t, e, n, i, o, r) => class extends t {
      constructor(t, e = s) {
        const a = o(t),
              c = { ...s,
          ...e
        },
              u = n(a, c);
        super(t, !0, u, r(a) ? i() : null), this._isCurveNullified = !1, this._nativeWaveShaperNode = u;
      }

      get curve() {
        return this._isCurveNullified ? null : this._nativeWaveShaperNode.curve;
      }

      set curve(t) {
        if (null === t) this._isCurveNullified = !0, this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);else {
          if (t.length < 2) throw e();
          this._isCurveNullified = !1, this._nativeWaveShaperNode.curve = t;
        }
      }

      get oversample() {
        return this._nativeWaveShaperNode.oversample;
      }

      set oversample(t) {
        this._nativeWaveShaperNode.oversample = t;
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(12),
        i = n(3);

    const o = (t, e, n) => () => {
      const o = new WeakMap();
      return {
        render(r, a, c) {
          const u = o.get(a);
          return void 0 !== u ? Promise.resolve(u) : (async (r, a, c) => {
            let u = e(r);

            if (!Object(i.a)(u, a)) {
              const e = {
                channelCount: u.channelCount,
                channelCountMode: u.channelCountMode,
                channelInterpretation: u.channelInterpretation,
                curve: u.curve,
                oversample: u.oversample
              };
              u = t(a, e);
            }

            return o.set(a, u), Object(s.a)(u) ? await n(r, a, u.inputs[0], c) : await n(r, a, u, c), u;
          })(r, a, c);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => "undefined" == typeof window ? null : window;
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e) => n => {
      n.copyFromChannel = (s, i, o = 0) => {
        const r = t(o),
              a = t(i);
        if (a >= n.numberOfChannels) throw e();
        const c = n.length,
              u = n.getChannelData(a),
              h = s.length;

        for (let t = r < 0 ? -r : 0; t + r < c && t < h; t += 1) s[t] = u[t + r];
      }, n.copyToChannel = (s, i, o = 0) => {
        const r = t(o),
              a = t(i);
        if (a >= n.numberOfChannels) throw e();
        const c = n.length,
              u = n.getChannelData(a),
              h = s.length;

        for (let t = r < 0 ? -r : 0; t + r < c && t < h; t += 1) u[t + r] = s[t];
      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => e => {
      var n, s;
      e.copyFromChannel = (n = e.copyFromChannel, (s, i, o = 0) => {
        const r = t(o),
              a = t(i);
        if (r < e.length) return n.call(e, s, a, r);
      }), e.copyToChannel = (s = e.copyToChannel, (n, i, o = 0) => {
        const r = t(o),
              a = t(i);
        if (r < e.length) return s.call(e, n, a, r);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => (e, n) => {
      const s = n.createBuffer(1, 1, n.sampleRate);
      null === e.buffer && (e.buffer = s), t(e, "buffer", t => () => {
        const n = t.call(e);
        return n === s ? null : n;
      }, t => n => t.call(e, null === n ? s : n));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(11);

    const i = t => (e, n) => {
      const i = t(n, t => t.createGain());
      e.connect(i);
      const o = (r = e.disconnect, () => {
        r.call(e, i), e.removeEventListener("ended", o);
      });
      var r;
      e.addEventListener("ended", o), Object(s.a)(e, i), e.stop = (t => {
        let n = !1;
        return (s = 0) => {
          if (n) try {
            t.call(e, s);
          } catch {
            i.gain.setValueAtTime(0, s);
          } else t.call(e, s), n = !0;
        };
      })(e.stop);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n) => (s, i) => {
      i.channelCount = 1, i.channelCountMode = "explicit", Object.defineProperty(i, "channelCount", {
        get: () => 1,
        set: () => {
          throw t();
        }
      }), Object.defineProperty(i, "channelCountMode", {
        get: () => "explicit",
        set: () => {
          throw t();
        }
      });
      const o = e(s, t => t.createBufferSource());
      n(i, () => {
        const t = i.numberOfInputs;

        for (let e = 0; e < t; e += 1) o.connect(i, 0, e);
      }, () => o.disconnect(i));
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = () => new Promise(t => {
      const e = new ArrayBuffer(0),
            {
        port1: n,
        port2: s
      } = new MessageChannel();
      n.onmessage = ({
        data: e
      }) => t(null !== e), s.postMessage(e, [e]);
    });
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = t => {
      var e;
      t.start = (e = t.start, (n = 0, s = 0, i) => {
        const o = t.buffer,
              r = null === o ? s : Math.min(o.duration, s);
        null !== o && r > o.duration - .5 / t.context.sampleRate ? e.call(t, n, 0, 0) : e.call(t, n, r, i);
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return N;
    });
    var s = n(0),
        i = n(24),
        o = n(22);

    const r = t => "port" in t;

    var a = n(33),
        c = n(20);

    const u = (t, e) => {
      if (!Object(c.a)(t).delete(e)) throw new Error("Missing the expected event listener.");
    };

    var h = n(34),
        l = n(8),
        d = n(26),
        p = n(6),
        f = n(27),
        _ = n(9),
        m = n(16),
        g = n(23),
        v = n(19);

    const y = t => !s.a.has(t),
          b = (t, e) => {
      const n = Array.from(t).filter(e);
      if (n.length > 1) throw Error("More than one element was found.");
      if (0 === n.length) throw Error("No element was found.");
      const [s] = n;
      return t.delete(s), s;
    };

    var x = n(17),
        w = n(21);

    const T = (t, e) => {
      !r(t) && e.every(t => 0 === t.size) && Object(w.a)(t);
    },
          O = t => new Promise(e => {
      const n = t.createScriptProcessor(256, 1, 1),
            s = t.createGain(),
            i = t.createBuffer(1, 2, 44100),
            o = i.getChannelData(0);
      o[0] = 1, o[1] = 1;
      const r = t.createBufferSource();
      r.buffer = i, r.loop = !0, r.connect(n).connect(t.destination), r.connect(s), r.disconnect(s), n.onaudioprocess = s => {
        const i = s.inputBuffer.getChannelData(0);
        Array.prototype.some.call(i, t => 1 === t) ? e(!0) : e(!1), r.stop(), n.onaudioprocess = null, r.disconnect(n), n.disconnect(t.destination);
      }, r.start();
    }),
          S = (t, e) => {
      const n = new Map();

      for (const e of t) for (const t of e) {
        const e = n.get(t);
        n.set(t, void 0 === e ? 1 : e + 1);
      }

      n.forEach((t, n) => e(n, t));
    };

    var C = n(25);

    const k = (t, e, [n, s, i], o) => {
      Object(m.a)(t[s], [e, n, i], t => t[0] === e && t[1] === n, o);
    },
          A = (t, e, [n, s], i) => {
      Object(m.a)(t, [e, n, s], t => t[0] === e && t[1] === n, i);
    },
          D = (t, e, [n, s, i], o) => {
      const r = t.get(n);
      void 0 === r ? t.set(n, new Set([[s, e, i]])) : Object(m.a)(r, [s, e, i], t => t[0] === s && t[1] === e, o);
    },
          M = (t, [e, n, s], i) => {
      const o = t.get(e);
      void 0 === o ? t.set(e, new Set([[n, s]])) : Object(m.a)(o, [n, s], t => t[0] === n, i);
    },
          j = (t, e, n, s) => {
      const i = Object(_.a)(t, e),
            o = b(i, t => t[0] === n && t[1] === s);
      return 0 === i.size && t.delete(e), o;
    },
          E = (t, e, n) => {
      const s = Object(_.a)(t, e),
            i = b(s, t => t[0] === n);
      return 0 === s.size && t.delete(e), i;
    },
          R = (t, e, n, s) => {
      const {
        activeInputs: i,
        passiveInputs: o
      } = Object(l.a)(e),
            {
        outputs: r
      } = Object(l.a)(t),
            u = Object(c.a)(t),
            d = r => {
        const c = Object(p.a)(e),
              u = Object(p.a)(t);

        if (r) {
          const r = j(o, t, n, s);
          k(i, t, r, !1), Object(v.a)(t) || Object(a.a)(u, c, n, s), y(e) && Object(x.a)(e);
        } else {
          const r = ((t, e, n, s) => b(t[s], t => t[0] === e && t[1] === n))(i, t, n, s);

          D(o, s, r, !1), Object(v.a)(t) || Object(h.a)(u, c, n, s), Object(g.a)(e) && T(e, i);
        }
      };

      return !!Object(m.a)(r, [e, n, s], t => t[0] === e && t[1] === n && t[2] === s, !0) && (u.add(d), Object(g.a)(t) ? k(i, t, [n, s, d], !0) : D(o, s, [t, n, d], !0), !0);
    },
          q = (t, e, n) => {
      const {
        activeInputs: s,
        passiveInputs: i
      } = Object(d.a)(e),
            {
        outputs: o
      } = Object(l.a)(t),
            r = Object(c.a)(t),
            a = o => {
        const r = Object(p.a)(t),
              a = Object(f.a)(e);

        if (o) {
          const e = E(i, t, n);
          A(s, t, e, !1), Object(v.a)(t) || r.connect(a, n);
        } else {
          const e = ((t, e, n) => b(t, t => t[0] === e && t[1] === n))(s, t, n);

          M(i, e, !1), Object(v.a)(t) || r.disconnect(a, n);
        }
      };

      return !!Object(m.a)(o, [e, n], t => t[0] === e && t[1] === n, !0) && (r.add(a), Object(g.a)(t) ? A(s, t, [n, a], !0) : M(i, [t, n, a], !0), !0);
    },
          I = (t, e, n) => {
      for (const s of t) if (s[0] === e && s[1] === n) return t.delete(s), s;

      return null;
    },
          F = (t, e, n, s) => {
      const [i, o] = ((t, e, n, s) => {
        const {
          activeInputs: i,
          passiveInputs: o
        } = Object(l.a)(e),
              r = I(i[s], t, n);

        if (null === r) {
          return [j(o, t, n, s)[2], !1];
        }

        return [r[2], !0];
      })(t, e, n, s);

      if (null !== i && (u(t, i), o && !Object(v.a)(t) && Object(h.a)(Object(p.a)(t), Object(p.a)(e), n, s)), Object(g.a)(e)) {
        const {
          activeInputs: t
        } = Object(l.a)(e);
        T(e, t);
      }
    },
          V = (t, e, n) => {
      const [s, i] = ((t, e, n) => {
        const {
          activeInputs: s,
          passiveInputs: i
        } = Object(d.a)(e),
              o = I(s, t, n);

        if (null === o) {
          return [E(i, t, n)[1], !1];
        }

        return [o[2], !0];
      })(t, e, n);

      null !== s && (u(t, s), i && !Object(v.a)(t) && Object(p.a)(t).disconnect(Object(f.a)(e), n));
    },
          N = (t, e, n, c, u, h, _, g, v, b, w, T, D, M, j) => class extends b {
      constructor(e, i, o, r) {
        super(o), this._context = e, this._nativeAudioNode = o;
        const a = w(e);
        T(a) && !0 !== n(O, () => O(a)) && (t => {
          const e = new Map();
          var n, s;
          t.connect = (n = t.connect.bind(t), (t, s = 0, i = 0) => {
            const o = Object(C.a)(t) ? n(t, s, i) : n(t, s),
                  r = e.get(t);
            return void 0 === r ? e.set(t, [{
              input: i,
              output: s
            }]) : r.every(t => t.input !== i || t.output !== s) && r.push({
              input: i,
              output: s
            }), o;
          }), t.disconnect = (s = t.disconnect, (n, i, o) => {
            if (s.apply(t), void 0 === n) e.clear();else if ("number" == typeof n) for (const [t, s] of e) {
              const i = s.filter(t => t.output !== n);
              0 === i.length ? e.delete(t) : e.set(t, i);
            } else if (e.has(n)) if (void 0 === i) e.delete(n);else {
              const t = e.get(n);

              if (void 0 !== t) {
                const s = t.filter(t => t.output !== i && (t.input !== o || void 0 === o));
                0 === s.length ? e.delete(n) : e.set(n, s);
              }
            }

            for (const [n, s] of e) s.forEach(e => {
              Object(C.a)(n) ? t.connect(n, e.output, e.input) : t.connect(n, e.output);
            });
          });
        })(o), s.c.set(this, o), s.i.set(this, new Set()), i && Object(x.a)(this), t(this, r, o);
      }

      get channelCount() {
        return this._nativeAudioNode.channelCount;
      }

      set channelCount(t) {
        this._nativeAudioNode.channelCount = t;
      }

      get channelCountMode() {
        return this._nativeAudioNode.channelCountMode;
      }

      set channelCountMode(t) {
        this._nativeAudioNode.channelCountMode = t;
      }

      get channelInterpretation() {
        return this._nativeAudioNode.channelInterpretation;
      }

      set channelInterpretation(t) {
        this._nativeAudioNode.channelInterpretation = t;
      }

      get context() {
        return this._context;
      }

      get numberOfInputs() {
        return this._nativeAudioNode.numberOfInputs;
      }

      get numberOfOutputs() {
        return this._nativeAudioNode.numberOfOutputs;
      }

      connect(t, n = 0, s = 0) {
        if (n < 0 || n >= this._nativeAudioNode.numberOfOutputs) throw u();
        const o = w(this._context),
              g = j(o);
        if (D(t) || M(t)) throw h();

        if (Object(i.a)(t)) {
          const i = Object(p.a)(t);

          try {
            const c = Object(a.a)(this._nativeAudioNode, i, n, s);

            if (g || y(this) ? this._nativeAudioNode.disconnect(...c) : y(t) && Object(x.a)(t), r(t)) {
              const t = e.get(i);

              if (void 0 === t) {
                const t = o.createGain();
                t.connect(c[0], 0, c[2]), e.set(i, new Map([[s, t]]));
              } else if (void 0 === t.get(s)) {
                const e = o.createGain();
                e.connect(c[0], 0, c[2]), t.set(s, e);
              }
            }
          } catch (t) {
            if (12 === t.code) throw h();
            throw t;
          }

          if (g ? ((t, e, n, s) => {
            const {
              outputs: i
            } = Object(l.a)(t);

            if (Object(m.a)(i, [e, n, s], t => t[0] === e && t[1] === n && t[2] === s, !0)) {
              const {
                activeInputs: i
              } = Object(l.a)(e);
              return k(i, t, [n, s, null], !0), !0;
            }

            return !1;
          })(this, t, n, s) : R(this, t, n, s)) {
            const e = v([this], t);
            S(e, c(g));
          }

          return t;
        }

        const b = Object(f.a)(t);
        if ("playbackRate" === b.name) throw _();

        try {
          this._nativeAudioNode.connect(b, n), (g || y(this)) && this._nativeAudioNode.disconnect(b, n);
        } catch (t) {
          if (12 === t.code) throw h();
          throw t;
        }

        if (g ? ((t, e, n) => {
          const {
            outputs: s
          } = Object(l.a)(t);

          if (Object(m.a)(s, [e, n], t => t[0] === e && t[1] === n, !0)) {
            const {
              activeInputs: s
            } = Object(d.a)(e);
            return A(s, t, [n, null], !0), !0;
          }

          return !1;
        })(this, t, n) : q(this, t, n)) {
          const e = v([this], t);
          S(e, c(g));
        }
      }

      disconnect(t, e, n) {
        let s;
        if (void 0 === t) s = (t => {
          const e = Object(l.a)(t),
                n = [];

          for (const s of e.outputs) Object(o.a)(s) ? F(t, ...s) : V(t, ...s), n.push(s[0]);

          return e.outputs.clear(), n;
        })(this);else if ("number" == typeof t) {
          if (t < 0 || t >= this.numberOfOutputs) throw u();

          s = ((t, e) => {
            const n = Object(l.a)(t),
                  s = [];

            for (const i of n.outputs) i[1] === e && (Object(o.a)(i) ? F(t, ...i) : V(t, ...i), s.push(i[0]), n.outputs.delete(i));

            return s;
          })(this, t);
        } else {
          if (void 0 !== e && (e < 0 || e >= this.numberOfOutputs)) throw u();
          if (Object(i.a)(t) && void 0 !== n && (n < 0 || n >= t.numberOfInputs)) throw u();
          if (s = ((t, e, n, s) => {
            const i = Object(l.a)(t);
            return Array.from(i.outputs).filter(t => !(t[0] !== e || void 0 !== n && t[1] !== n || void 0 !== s && t[2] !== s)).map(e => (Object(o.a)(e) ? F(t, ...e) : V(t, ...e), i.outputs.delete(e), e[0]));
          })(this, t, e, n), 0 === s.length) throw h();
        }

        for (const t of s) {
          const e = v([this], t);
          S(e, g);
        }
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return l;
    });
    var s = n(2),
        i = n(43),
        o = n(35),
        r = n(41),
        a = n(0);

    const c = async (t, e) => new t(await (t => new Promise((e, n) => {
      const {
        port1: s,
        port2: i
      } = new MessageChannel();
      s.onmessage = ({
        data: t
      }) => {
        s.close(), i.close(), e(t);
      }, s.onmessageerror = ({
        data: t
      }) => {
        s.close(), i.close(), n(t);
      }, i.postMessage(t);
    }))(e));

    var u = n(36),
        h = n(40);

    const l = (t, e, n, l, d, p, f, _, m, g, v, y, b) => (x, w, T, O) => {
      if (0 === O.numberOfInputs && 0 === O.numberOfOutputs) throw g();

      if (void 0 !== O.outputChannelCount) {
        if (O.outputChannelCount.some(t => t < 1)) throw g();
        if (O.outputChannelCount.length !== O.numberOfOutputs) throw n();
      }

      if ("explicit" !== O.channelCountMode) throw g();
      const S = O.channelCount * O.numberOfInputs,
            C = O.outputChannelCount.reduce((t, e) => t + e, 0),
            k = void 0 === T.parameterDescriptors ? 0 : T.parameterDescriptors.length;
      if (S + k > 6 || C > 6) throw g();
      const A = new MessageChannel(),
            D = [],
            M = [];

      for (let t = 0; t < O.numberOfInputs; t += 1) D.push(_(x, {
        channelCount: O.channelCount,
        channelCountMode: O.channelCountMode,
        channelInterpretation: O.channelInterpretation,
        gain: 1
      })), M.push(p(x, {
        channelCount: O.channelCount,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        numberOfOutputs: O.channelCount
      }));

      const j = [];
      if (void 0 !== T.parameterDescriptors) for (const {
        defaultValue: t,
        maxValue: e,
        minValue: n,
        name: i
      } of T.parameterDescriptors) {
        const o = f(x, {
          channelCount: 1,
          channelCountMode: "explicit",
          channelInterpretation: "discrete",
          offset: void 0 !== O.parameterData[i] ? O.parameterData[i] : void 0 === t ? 0 : t
        });
        Object.defineProperties(o.offset, {
          defaultValue: {
            get: () => void 0 === t ? 0 : t
          },
          maxValue: {
            get: () => void 0 === e ? s.b : e
          },
          minValue: {
            get: () => void 0 === n ? s.a : n
          }
        }), j.push(o);
      }
      const E = d(x, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "speakers",
        numberOfInputs: Math.max(1, S + k)
      }),
            R = Object(i.a)(w, x.sampleRate),
            q = m(x, R, S + k, Math.max(1, C)),
            I = p(x, {
        channelCount: Math.max(1, C),
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        numberOfOutputs: Math.max(1, C)
      }),
            F = [];

      for (let t = 0; t < O.numberOfOutputs; t += 1) F.push(d(x, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "speakers",
        numberOfInputs: O.outputChannelCount[t]
      }));

      for (let t = 0; t < O.numberOfInputs; t += 1) {
        D[t].connect(M[t]);

        for (let e = 0; e < O.channelCount; e += 1) M[t].connect(E, e, t * O.channelCount + e);
      }

      const V = new h.a(void 0 === T.parameterDescriptors ? [] : T.parameterDescriptors.map(({
        name: t
      }, e) => {
        const n = j[e];
        return n.connect(E, 0, S + e), n.start(0), [t, n.offset];
      }));
      E.connect(q);
      let N = O.channelInterpretation,
          P = null;
      const L = 0 === O.numberOfOutputs ? [q] : F,
            z = {
        get bufferSize() {
          return R;
        },

        get channelCount() {
          return O.channelCount;
        },

        set channelCount(t) {
          throw l();
        },

        get channelCountMode() {
          return O.channelCountMode;
        },

        set channelCountMode(t) {
          throw l();
        },

        get channelInterpretation() {
          return N;
        },

        set channelInterpretation(t) {
          for (const e of D) e.channelInterpretation = t;

          N = t;
        },

        get context() {
          return q.context;
        },

        get inputs() {
          return D;
        },

        get numberOfInputs() {
          return O.numberOfInputs;
        },

        get numberOfOutputs() {
          return O.numberOfOutputs;
        },

        get onprocessorerror() {
          return P;
        },

        set onprocessorerror(t) {
          "function" == typeof P && z.removeEventListener("processorerror", P), P = "function" == typeof t ? t : null, "function" == typeof P && z.addEventListener("processorerror", P);
        },

        get parameters() {
          return V;
        },

        get port() {
          return A.port2;
        },

        addEventListener: (...t) => q.addEventListener(t[0], t[1], t[2]),
        connect: e.bind(null, L),
        disconnect: v.bind(null, L),
        dispatchEvent: (...t) => q.dispatchEvent(t[0]),
        removeEventListener: (...t) => q.removeEventListener(t[0], t[1], t[2])
      },
            B = new Map();
      var W, U;
      A.port1.addEventListener = (W = A.port1.addEventListener, (...t) => {
        if ("message" === t[0]) {
          const e = "function" == typeof t[1] ? t[1] : "object" == typeof t[1] && null !== t[1] && "function" == typeof t[1].handleEvent ? t[1].handleEvent : null;

          if (null !== e) {
            const n = B.get(t[1]);
            void 0 !== n ? t[1] = n : (t[1] = t => {
              y(x.currentTime, x.sampleRate, () => e(t));
            }, B.set(e, t[1]));
          }
        }

        return W.call(A.port1, t[0], t[1], t[2]);
      }), A.port1.removeEventListener = (U = A.port1.removeEventListener, (...t) => {
        if ("message" === t[0]) {
          const e = B.get(t[1]);
          void 0 !== e && (B.delete(t[1]), t[1] = e);
        }

        return U.call(A.port1, t[0], t[1], t[2]);
      });
      let G = null;
      Object.defineProperty(A.port1, "onmessage", {
        get: () => G,
        set: t => {
          "function" == typeof G && A.port1.removeEventListener("message", G), G = "function" == typeof t ? t : null, "function" == typeof G && (A.port1.addEventListener("message", G), A.port1.start());
        }
      }), T.prototype.port = A.port1;
      let Y = null;
      ((t, e, n, s) => {
        let i = a.k.get(t);
        void 0 === i && (i = new WeakMap(), a.k.set(t, i));
        const o = c(n, s);
        return i.set(e, o), o;
      })(x, z, T, O).then(t => Y = t);
      const Q = Object(u.a)(O.numberOfInputs, O.channelCount),
            Z = Object(u.a)(O.numberOfOutputs, O.outputChannelCount),
            X = void 0 === T.parameterDescriptors ? [] : T.parameterDescriptors.reduce((t, {
        name: e
      }) => ({ ...t,
        [e]: new Float32Array(128)
      }), {});
      let H = !0;

      const $ = () => {
        O.numberOfOutputs > 0 && q.disconnect(I);

        for (let t = 0, e = 0; t < O.numberOfOutputs; t += 1) {
          const n = F[t];

          for (let s = 0; s < O.outputChannelCount[t]; s += 1) I.disconnect(n, e + s, s);

          e += O.outputChannelCount[t];
        }
      };

      q.onaudioprocess = ({
        inputBuffer: e,
        outputBuffer: n
      }) => {
        if (null !== Y) for (let s = 0; s < R; s += 128) {
          for (let t = 0; t < O.numberOfInputs; t += 1) for (let n = 0; n < O.channelCount; n += 1) Object(o.a)(e, Q[t], n, n, s);

          void 0 !== T.parameterDescriptors && T.parameterDescriptors.forEach(({
            name: t
          }, n) => {
            Object(o.a)(e, X, t, S + n, s);
          });

          for (let t = 0; t < O.numberOfInputs; t += 1) for (let e = 0; e < O.outputChannelCount[t]; e += 1) 0 === Z[t][e].byteLength && (Z[t][e] = new Float32Array(128));

          try {
            const e = Q.map((e, n) => {
              const s = t.get(z);
              return void 0 === s || void 0 === s.get(n) ? [] : e;
            }),
                  i = y(x.currentTime + s / x.sampleRate, x.sampleRate, () => Y.process(e, Z, X));
            H = i;

            for (let t = 0, e = 0; t < O.numberOfOutputs; t += 1) {
              for (let i = 0; i < O.outputChannelCount[t]; i += 1) Object(r.a)(n, Z[t], i, e + i, s);

              e += O.outputChannelCount[t];
            }
          } catch (t) {
            H = !1, z.dispatchEvent(new ErrorEvent("processorerror", {
              error: t
            }));
          }

          if (!H) {
            for (let t = 0; t < O.numberOfInputs; t += 1) {
              D[t].disconnect(M[t]);

              for (let e = 0; e < O.channelCount; e += 1) M[s].disconnect(E, e, t * O.channelCount + e);
            }

            if (void 0 !== T.parameterDescriptors) {
              const t = T.parameterDescriptors.length;

              for (let e = 0; e < t; e += 1) {
                const t = j[e];
                t.disconnect(E, 0, S + e), t.stop();
              }
            }

            E.disconnect(q), q.onaudioprocess = null, J ? $() : et();
            break;
          }
        }
      };

      let J = !1;

      const K = _(x, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        gain: 0
      }),
            tt = () => q.connect(K).connect(K.context.destination),
            et = () => {
        q.disconnect(K), K.disconnect();
      };

      return tt(), b(z, () => {
        if (H) {
          et(), O.numberOfOutputs > 0 && q.connect(I);

          for (let t = 0, e = 0; t < O.numberOfOutputs; t += 1) {
            const n = F[t];

            for (let s = 0; s < O.outputChannelCount[t]; s += 1) I.connect(n, e + s, s);

            e += O.outputChannelCount[t];
          }
        }

        J = !0;
      }, () => {
        H && (tt(), $()), J = !1;
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return u;
    });
    var s = n(0);

    const i = {
      construct: () => i
    },
          o = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,
          r = (t, e) => {
      const n = [];
      let s = t.replace(/^[\s]+/, ""),
          i = s.match(o);

      for (; null !== i;) {
        const t = i[1].slice(1, -1),
              r = i[0].replace(/([\s]+)?;?$/, "").replace(t, new URL(t, e).toString());
        n.push(r), s = s.slice(i[0].length).replace(/^[\s]+/, ""), i = s.match(o);
      }

      return [n.join(";"), s];
    },
          a = t => {
      if (void 0 !== t && !Array.isArray(t)) throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.");
    },
          c = t => {
      if (!(t => {
        try {
          new new Proxy(t, i)();
        } catch {
          return !1;
        }

        return !0;
      })(t)) throw new TypeError("The given value for processorCtor should be a constructor.");
      if (null === t.prototype || "object" != typeof t.prototype) throw new TypeError("The given value for processorCtor should have a prototype.");
    },
          u = (t, e, n, i, o, u, h, l, d) => (p, f, _ = {
      credentials: "omit"
    }) => {
      const m = u(p),
            g = new URL(f, d.location.href).toString();
      if (void 0 !== m.audioWorklet) return i(f).then(t => {
        const [e, n] = r(t, g),
              s = new Blob([`${e};(registerProcessor=>{${n}\n})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`], {
          type: "application/javascript; charset=utf-8"
        }),
              i = URL.createObjectURL(s),
              a = o(m);
        return (null !== a ? a : m).audioWorklet.addModule(i, _).then(() => URL.revokeObjectURL(i)).catch(t => {
          throw URL.revokeObjectURL(i), void 0 !== t.code && "SyntaxError" !== t.name || (t.code = 12), t;
        });
      });
      const v = l.get(p);
      if (void 0 !== v && v.has(f)) return Promise.resolve();
      const y = h.get(p);

      if (void 0 !== y) {
        const t = y.get(f);
        if (void 0 !== t) return t;
      }

      const b = i(f).then(t => {
        const [n, s] = r(t, g);
        return e(`${n};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${s}\n})})(window,'_AWGS')`);
      }).then(() => {
        const e = d._AWGS.pop();

        if (void 0 === e) throw new SyntaxError();
        n(m.currentTime, m.sampleRate, () => e(class {}, void 0, (e, n) => {
          if ("" === e.trim()) throw t();
          const i = s.j.get(m);

          if (void 0 !== i) {
            if (i.has(e)) throw t();
            c(n), a(n.parameterDescriptors), i.set(e, n);
          } else c(n), a(n.parameterDescriptors), s.j.set(m, new Map([[e, n]]));
        }, m.sampleRate, void 0, void 0));
      }).catch(t => {
        throw void 0 !== t.code && "SyntaxError" !== t.name || (t.code = 12), t;
      });
      return void 0 === y ? h.set(p, new Map([[f, b]])) : y.set(f, b), b.then(() => {
        const t = l.get(p);
        void 0 === t ? l.set(p, new Set([f])) : t.add(f);
      }).catch(() => {}).then(() => {
        const t = h.get(p);
        void 0 !== t && t.delete(f);
      }), b;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return r;
    });
    var s = n(4),
        i = n(1);

    const o = t => "function" == typeof t.getFloatTimeDomainData,
          r = (t, e, n) => (r, a) => {
      const c = n(r, t => t.createAnalyser());
      if (Object(i.a)(c, a), !(a.maxDecibels > a.minDecibels)) throw e();
      return Object(s.a)(c, a, "fftSize"), Object(s.a)(c, a, "maxDecibels"), Object(s.a)(c, a, "minDecibels"), Object(s.a)(c, a, "smoothingTimeConstant"), t(o, () => o(c)) || (t => {
        t.getFloatTimeDomainData = e => {
          const n = new Uint8Array(e.length);
          t.getByteTimeDomainData(n);
          const s = Math.max(n.length, t.fftSize);

          for (let t = 0; t < s; t += 1) e[t] = .0078125 * (n[t] - 128);

          return e;
        };
      })(c), c;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return u;
    });
    var s = n(5),
        i = n(4),
        o = n(1),
        r = n(7);
    var a = n(30),
        c = n(31);

    const u = (t, e, n, u, h, l, d, p, f, _, m, g, v) => (y, b = {}) => {
      const x = n(y, t => t.createBufferSource());
      return Object(o.a)(x, b), Object(s.a)(x, b, "playbackRate"), Object(i.a)(x, b, "buffer"), Object(i.a)(x, b, "loop"), Object(i.a)(x, b, "loopEnd"), Object(i.a)(x, b, "loopStart"), e(u, () => u(y)) || (t => {
        t.start = (e => {
          let n = !1;
          return (s = 0, i = 0, o) => {
            if (n) throw Object(r.a)();
            e.call(t, s, i, o), n = !0;
          };
        })(t.start);
      })(x), e(h, h) || ((t, e) => {
        let n = Number.POSITIVE_INFINITY,
            s = Number.POSITIVE_INFINITY;
        var i, o;
        t.start = (i = t.start, o = t.stop, (r = 0, a = 0, c = Number.POSITIVE_INFINITY) => {
          if (i.call(t, r, a), c >= 0 && c < Number.POSITIVE_INFINITY) {
            const i = Math.max(r, e.currentTime),
                  a = c / t.playbackRate.value;
            n = i + a, o.call(t, Math.min(n, s));
          }
        }), t.stop = (i => (o = 0) => {
          s = Math.max(o, e.currentTime), i.call(t, Math.min(n, s));
        })(t.stop);
      })(x, y), e(l, () => l(y)) || m(x), e(d, () => d(y)) || g(x, y), e(p, () => p(y)) || Object(a.a)(x), e(f, () => f(y)) || v(x, y), e(_, () => _(y)) || Object(c.a)(x), t(y, x), x;
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return d;
    });
    var s = n(35),
        i = n(41),
        o = n(36),
        r = n(8),
        a = n(0),
        c = n(6),
        u = n(9);
    var h = n(3);

    const l = async (t, e, n, h, l, d) => {
      const p = null === e ? 128 * Math.ceil(t.context.length / 128) : e.length,
            f = h.channelCount * h.numberOfInputs,
            _ = h.outputChannelCount.reduce((t, e) => t + e, 0),
            m = 0 === _ ? null : n.createBuffer(_, p, n.sampleRate);

      if (void 0 === l) throw new Error("Missing the processor constructor.");
      const g = Object(r.a)(t),
            v = await ((t, e) => {
        const n = Object(u.a)(a.k, t),
              s = Object(c.a)(e);
        return Object(u.a)(n, s);
      })(n, t),
            y = Object(o.a)(h.numberOfInputs, h.channelCount),
            b = Object(o.a)(h.numberOfOutputs, h.outputChannelCount),
            x = Array.from(t.parameters.keys()).reduce((t, e) => ({ ...t,
        [e]: new Float32Array(128)
      }), {});

      for (let o = 0; o < p; o += 128) {
        if (h.numberOfInputs > 0 && null !== e) for (let t = 0; t < h.numberOfInputs; t += 1) for (let n = 0; n < h.channelCount; n += 1) Object(s.a)(e, y[t], n, n, o);
        void 0 !== l.parameterDescriptors && null !== e && l.parameterDescriptors.forEach(({
          name: t
        }, n) => {
          Object(s.a)(e, x, t, f + n, o);
        });

        for (let t = 0; t < h.numberOfInputs; t += 1) for (let e = 0; e < h.outputChannelCount[t]; e += 1) 0 === b[t][e].byteLength && (b[t][e] = new Float32Array(128));

        try {
          const t = y.map((t, e) => 0 === g.activeInputs[e].size ? [] : t),
                e = d(o / n.sampleRate, n.sampleRate, () => v.process(t, b, x));
          if (null !== m) for (let t = 0, e = 0; t < h.numberOfOutputs; t += 1) {
            for (let n = 0; n < h.outputChannelCount[t]; n += 1) Object(i.a)(m, b[t], n, e + n, o);

            e += h.outputChannelCount[t];
          }
          if (!e) break;
        } catch (e) {
          t.dispatchEvent(new ErrorEvent("processorerror", {
            error: e
          }));
          break;
        }
      }

      return m;
    },
          d = (t, e, n, s, i, o, r, a, c, u, d, p, f, _, m, g) => (v, y, b) => {
      const x = new WeakMap();
      let w = null;
      return {
        render(T, O, S) {
          a(O, T);
          const C = x.get(O);
          return void 0 !== C ? Promise.resolve(C) : (async (a, T, O) => {
            let S = d(a),
                C = null;
            const k = Object(h.a)(S, T);

            if (null === p) {
              const t = y.outputChannelCount.reduce((t, e) => t + e, 0),
                    n = i(T, {
                channelCount: Math.max(1, t),
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                numberOfOutputs: Math.max(1, t)
              }),
                    o = [];

              for (let t = 0; t < a.numberOfOutputs; t += 1) o.push(s(T, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "speakers",
                numberOfInputs: y.outputChannelCount[t]
              }));

              const u = r(T, {
                channelCount: y.channelCount,
                channelCountMode: y.channelCountMode,
                channelInterpretation: y.channelInterpretation,
                gain: 1
              });
              u.connect = e.bind(null, o), u.disconnect = c.bind(null, o), C = [n, o, u];
            } else k || (S = new p(T, v));

            if (x.set(T, null === C ? S : C[2]), null !== C) {
              if (null === w) {
                if (void 0 === b) throw new Error("Missing the processor constructor.");
                if (null === f) throw new Error("Missing the native OfflineAudioContext constructor.");

                const t = a.channelCount * a.numberOfInputs,
                      e = void 0 === b.parameterDescriptors ? 0 : b.parameterDescriptors.length,
                      n = t + e,
                      c = async () => {
                  const c = new f(n, 128 * Math.ceil(a.context.length / 128), T.sampleRate),
                        u = [],
                        h = [];

                  for (let t = 0; t < y.numberOfInputs; t += 1) u.push(r(c, {
                    channelCount: y.channelCount,
                    channelCountMode: y.channelCountMode,
                    channelInterpretation: y.channelInterpretation,
                    gain: 1
                  })), h.push(i(c, {
                    channelCount: y.channelCount,
                    channelCountMode: "explicit",
                    channelInterpretation: "discrete",
                    numberOfOutputs: y.channelCount
                  }));

                  const l = await Promise.all(Array.from(a.parameters.values()).map(async t => {
                    const e = o(c, {
                      channelCount: 1,
                      channelCountMode: "explicit",
                      channelInterpretation: "discrete",
                      offset: t.value
                    });
                    return await _(c, t, e.offset, O), e;
                  })),
                        d = s(c, {
                    channelCount: 1,
                    channelCountMode: "explicit",
                    channelInterpretation: "speakers",
                    numberOfInputs: Math.max(1, t + e)
                  });

                  for (let t = 0; t < y.numberOfInputs; t += 1) {
                    u[t].connect(h[t]);

                    for (let e = 0; e < y.channelCount; e += 1) h[t].connect(d, e, t * y.channelCount + e);
                  }

                  for (const [e, n] of l.entries()) n.connect(d, 0, t + e), n.start(0);

                  return d.connect(c.destination), await Promise.all(u.map(t => m(a, c, t, O))), g(c);
                };

                w = l(a, 0 === n ? null : await c(), T, y, b, u);
              }

              const t = await w,
                    e = n(T),
                    [c, h, d] = C;
              null !== t && (e.buffer = t, e.start(0)), e.connect(c);

              for (let t = 0, e = 0; t < a.numberOfOutputs; t += 1) {
                const n = h[t];

                for (let s = 0; s < y.outputChannelCount[t]; s += 1) c.connect(n, e + s, s);

                e += y.outputChannelCount[t];
              }

              return d;
            }

            if (k) for (const [e, n] of a.parameters.entries()) await t(T, n, S.parameters.get(e), O);else for (const [t, e] of a.parameters.entries()) await _(T, e, S.parameters.get(t), O);
            return await m(a, T, S, O), S;
          })(T, O, S);
        }

      };
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(29);

    const i = (t, e, n, i, o, r, a, c, u, h, l, d, p) => (f, _) => {
      const m = a(f) ? f : r(f);

      if (o.has(_)) {
        const t = n();
        return Promise.reject(t);
      }

      try {
        o.add(_);
      } catch {}

      if (e(l, () => l(m))) {
        return ("closed" === m.state && null !== u && c(m) ? new u(1, 1, m.sampleRate) : m).decodeAudioData(_).catch(t => {
          if (t instanceof DOMException && "NotSupportedError" === t.name) throw new TypeError();
          throw t;
        }).then(n => (e(h, () => h(n)) || p(n), t.add(n), n));
      }

      return new Promise((e, n) => {
        const o = () => {
          try {
            (t => {
              const {
                port1: e
              } = new MessageChannel();
              e.postMessage(t, [t]);
            })(_);
          } catch {}
        },
              r = t => {
          n(t), o();
        };

        try {
          m.decodeAudioData(_, n => {
            "function" != typeof n.copyFromChannel && (d(n), Object(s.a)(n)), t.add(n), o(), e(n);
          }, t => {
            r(null === t ? i() : t);
          });
        } catch (t) {
          r(t);
        }
      });
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return i;
    });
    var s = n(24);

    const i = (t, e, n) => function i(o, r) {
      const a = Object(s.a)(r) ? r : n(t, r);
      if ((t => "delayTime" in t)(a)) return [];
      if (o[0] === a) return [o];
      if (o.includes(a)) return [];
      const {
        outputs: c
      } = e(a);
      return Array.from(c).map(t => i([...o, a], t[0])).reduce((t, e) => t.concat(e), []);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(37);

    const i = {
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers"
    },
          o = (t, e, n, o, r) => class extends t {
      constructor(t, a) {
        const c = o(t),
              u = r(c),
              h = { ...i,
          ...a
        },
              l = e(c, u ? null : t.baseLatency, h);
        super(t, !1, l, u ? n(h.feedback, h.feedforward) : null), (t => {
          var e;
          t.getFrequencyResponse = (e = t.getFrequencyResponse, (n, i, o) => {
            if (n.length !== i.length || i.length !== o.length) throw Object(s.a)();
            return e.call(t, n, i, o);
          });
        })(l), this._nativeIIRFilterNode = l;
      }

      getFrequencyResponse(t, e, n) {
        return this._nativeIIRFilterNode.getFrequencyResponse(t, e, n);
      }

    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return s;
    });

    const s = (t, e, n, s, i, o) => (r, a, c, u, h, l) => {
      if (null !== c) try {
        const n = e(r, t => new c(t, u, l)),
              i = new Map();
        let a = null;

        if (Object.defineProperties(n, {
          channelCount: {
            get: () => l.channelCount,
            set: () => {
              throw t();
            }
          },
          channelCountMode: {
            get: () => "explicit",
            set: () => {
              throw t();
            }
          },
          onprocessorerror: {
            get: () => a,
            set: t => {
              "function" == typeof a && n.removeEventListener("processorerror", a), a = "function" == typeof t ? t : null, "function" == typeof a && n.addEventListener("processorerror", a);
            }
          }
        }), n.addEventListener = (p = n.addEventListener, (...t) => {
          if ("processorerror" === t[0]) {
            const e = "function" == typeof t[1] ? t[1] : "object" == typeof t[1] && null !== t[1] && "function" == typeof t[1].handleEvent ? t[1].handleEvent : null;

            if (null !== e) {
              const n = i.get(t[1]);
              void 0 !== n ? t[1] = n : (t[1] = n => {
                e(new ErrorEvent(t[0], { ...n,
                  error: new Error()
                }));
              }, i.set(e, t[1]));
            }
          }

          return p.call(n, t[0], t[1], t[2]);
        }), n.removeEventListener = (d = n.removeEventListener, (...t) => {
          if ("processorerror" === t[0]) {
            const e = i.get(t[1]);
            void 0 !== e && (i.delete(t[1]), t[1] = e);
          }

          return d.call(n, t[0], t[1], t[2]);
        }), 0 !== l.numberOfOutputs) {
          const t = s(r, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: 0
          });
          return n.connect(t).connect(t.context.destination), o(n, () => t.disconnect(), () => t.connect(t.context.destination));
        }

        return n;
      } catch (t) {
        if (11 === t.code) throw i();
        throw t;
      }
      var d, p;
      if (void 0 === h) throw i();
      return (t => {
        const {
          port1: e
        } = new MessageChannel();

        try {
          e.postMessage(t);
        } finally {
          e.close();
        }
      })(l), n(r, a, h, l);
    };
  }, function (t, e, n) {
    "use strict";

    n.d(e, "a", function () {
      return o;
    });
    var s = n(1),
        i = n(7);

    const o = t => (e, n) => {
      const o = t(e, t => t.createChannelSplitter(n.numberOfOutputs));
      return Object(s.a)(o, n), (t => {
        const e = t.numberOfOutputs;
        Object.defineProperty(t, "channelCount", {
          get: () => e,
          set: t => {
            if (t !== e) throw Object(i.a)();
          }
        }), Object.defineProperty(t, "channelCountMode", {
          get: () => "explicit",
          set: t => {
            if ("explicit" !== t) throw Object(i.a)();
          }
        }), Object.defineProperty(t, "channelInterpretation", {
          get: () => "discrete",
          set: t => {
            if ("discrete" !== t) throw Object(i.a)();
          }
        });
      })(o), o;
    };
  }, function (t, e, n) {
    var s = n(677),
        i = n(678),
        o = n(679),
        r = n(681);

    t.exports = function (t, e) {
      return s(t) || i(t, e) || o(t, e) || r();
    };
  }, function (t, e) {
    t.exports = function (t) {
      if (Array.isArray(t)) return t;
    };
  }, function (t, e) {
    t.exports = function (t, e) {
      if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) {
        var n = [],
            s = !0,
            i = !1,
            o = void 0;

        try {
          for (var r, a = t[Symbol.iterator](); !(s = (r = a.next()).done) && (n.push(r.value), !e || n.length !== e); s = !0);
        } catch (t) {
          i = !0, o = t;
        } finally {
          try {
            s || null == a.return || a.return();
          } finally {
            if (i) throw o;
          }
        }

        return n;
      }
    };
  }, function (t, e, n) {
    var s = n(680);

    t.exports = function (t, e) {
      if (t) {
        if ("string" == typeof t) return s(t, e);
        var n = Object.prototype.toString.call(t).slice(8, -1);
        return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(n) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? s(t, e) : void 0;
      }
    };
  }, function (t, e) {
    t.exports = function (t, e) {
      (null == e || e > t.length) && (e = t.length);

      for (var n = 0, s = new Array(e); n < e; n++) s[n] = t[n];

      return s;
    };
  }, function (t, e) {
    t.exports = function () {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    };
  }, function (t, e) {
    t.exports = function (t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    };
  }, function (t, e) {
    function n(t, e) {
      for (var n = 0; n < e.length; n++) {
        var s = e[n];
        s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s);
      }
    }

    t.exports = function (t, e, s) {
      return e && n(t.prototype, e), s && n(t, s), t;
    };
  }, function (t, e, n) {
    "use strict";

    n.r(e), n.d(e, "getContext", function () {
      return it;
    }), n.d(e, "setContext", function () {
      return ot;
    }), n.d(e, "Clock", function () {
      return Nt;
    }), n.d(e, "Context", function () {
      return H;
    }), n.d(e, "BaseContext", function () {
      return X;
    }), n.d(e, "Delay", function () {
      return Qt;
    }), n.d(e, "Gain", function () {
      return Mt;
    }), n.d(e, "Offline", function () {
      return Ht;
    }), n.d(e, "OfflineContext", function () {
      return et;
    }), n.d(e, "Param", function () {
      return St;
    }), n.d(e, "ToneAudioBuffer", function () {
      return tt;
    }), n.d(e, "ToneAudioBuffers", function () {
      return $t;
    }), n.d(e, "ToneAudioNode", function () {
      return Ct;
    }), n.d(e, "connectSeries", function () {
      return kt;
    }), n.d(e, "connect", function () {
      return At;
    }), n.d(e, "disconnect", function () {
      return Dt;
    }), n.d(e, "FrequencyClass", function () {
      return gt;
    }), n.d(e, "Frequency", function () {
      return bt;
    }), n.d(e, "MidiClass", function () {
      return Jt;
    }), n.d(e, "Midi", function () {
      return Kt;
    }), n.d(e, "TimeClass", function () {
      return _t;
    }), n.d(e, "Time", function () {
      return mt;
    }), n.d(e, "TicksClass", function () {
      return Lt;
    }), n.d(e, "Ticks", function () {
      return zt;
    }), n.d(e, "TransportTimeClass", function () {
      return xt;
    }), n.d(e, "TransportTime", function () {
      return wt;
    }), n.d(e, "Emitter", function () {
      return Z;
    }), n.d(e, "IntervalTimeline", function () {
      return Bt;
    }), n.d(e, "StateTimeline", function () {
      return Ot;
    }), n.d(e, "Timeline", function () {
      return W;
    }), n.d(e, "isUndef", function () {
      return p;
    }), n.d(e, "isDefined", function () {
      return f;
    }), n.d(e, "isFunction", function () {
      return _;
    }), n.d(e, "isNumber", function () {
      return m;
    }), n.d(e, "isObject", function () {
      return g;
    }), n.d(e, "isBoolean", function () {
      return v;
    }), n.d(e, "isArray", function () {
      return y;
    }), n.d(e, "isString", function () {
      return b;
    }), n.d(e, "isNote", function () {
      return x;
    }), n.d(e, "dbToGain", function () {
      return at;
    }), n.d(e, "gainToDb", function () {
      return ct;
    }), n.d(e, "intervalToFrequencyRatio", function () {
      return ut;
    }), n.d(e, "ftom", function () {
      return lt;
    }), n.d(e, "mtof", function () {
      return pt;
    }), n.d(e, "optionsFromArguments", function () {
      return q;
    }), n.d(e, "defaultArg", function () {
      return I;
    }), n.d(e, "Unit", function () {
      return ee;
    }), n.d(e, "debug", function () {
      return s;
    }), n.d(e, "Noise", function () {
      return ie;
    }), n.d(e, "UserMedia", function () {
      return ae;
    }), n.d(e, "Oscillator", function () {
      return he;
    }), n.d(e, "AMOscillator", function () {
      return _e;
    }), n.d(e, "FMOscillator", function () {
      return me;
    }), n.d(e, "PulseOscillator", function () {
      return ge;
    }), n.d(e, "FatOscillator", function () {
      return ve;
    }), n.d(e, "PWMOscillator", function () {
      return ye;
    }), n.d(e, "OmniOscillator", function () {
      return xe;
    }), n.d(e, "ToneOscillatorNode", function () {
      return ue;
    }), n.d(e, "LFO", function () {
      return Se;
    }), n.d(e, "ToneBufferSource", function () {
      return se;
    }), n.d(e, "Player", function () {
      return Ae;
    }), n.d(e, "Players", function () {
      return De;
    }), n.d(e, "GrainPlayer", function () {
      return Me;
    }), n.d(e, "Add", function () {
      return we;
    }), n.d(e, "Abs", function () {
      return je;
    }), n.d(e, "AudioToGain", function () {
      return pe;
    }), n.d(e, "GainToAudio", function () {
      return Ee;
    }), n.d(e, "GreaterThan", function () {
      return Fe;
    }), n.d(e, "GreaterThanZero", function () {
      return Ie;
    }), n.d(e, "Multiply", function () {
      return fe;
    }), n.d(e, "Negate", function () {
      return Re;
    }), n.d(e, "Pow", function () {
      return Ve;
    }), n.d(e, "Signal", function () {
      return Rt;
    }), n.d(e, "connectSignal", function () {
      return qt;
    }), n.d(e, "Scale", function () {
      return Te;
    }), n.d(e, "ScaleExp", function () {
      return Ne;
    }), n.d(e, "Subtract", function () {
      return qe;
    }), n.d(e, "SyncedSignal", function () {
      return Pe;
    }), n.d(e, "WaveShaper", function () {
      return de;
    }), n.d(e, "Zero", function () {
      return Oe;
    }), n.d(e, "AMSynth", function () {
      return Qe;
    }), n.d(e, "DuoSynth", function () {
      return Je;
    }), n.d(e, "FMSynth", function () {
      return Ke;
    }), n.d(e, "MetalSynth", function () {
      return en;
    }), n.d(e, "MembraneSynth", function () {
      return nn;
    }), n.d(e, "MonoSynth", function () {
      return $e;
    }), n.d(e, "NoiseSynth", function () {
      return sn;
    }), n.d(e, "PluckSynth", function () {
      return dn;
    }), n.d(e, "PolySynth", function () {
      return pn;
    }), n.d(e, "Sampler", function () {
      return fn;
    }), n.d(e, "Synth", function () {
      return Ge;
    }), n.d(e, "Loop", function () {
      return mn;
    }), n.d(e, "Part", function () {
      return gn;
    }), n.d(e, "Pattern", function () {
      return kn;
    }), n.d(e, "Sequence", function () {
      return An;
    }), n.d(e, "ToneEvent", function () {
      return _n;
    }), n.d(e, "AutoFilter", function () {
      return En;
    }), n.d(e, "AutoPanner", function () {
      return qn;
    }), n.d(e, "AutoWah", function () {
      return Fn;
    }), n.d(e, "BitCrusher", function () {
      return Vn;
    }), n.d(e, "Chebyshev", function () {
      return Pn;
    }), n.d(e, "Chorus", function () {
      return Un;
    }), n.d(e, "Distortion", function () {
      return Gn;
    }), n.d(e, "FeedbackDelay", function () {
      return Qn;
    }), n.d(e, "FrequencyShifter", function () {
      return Xn;
    }), n.d(e, "Freeverb", function () {
      return Jn;
    }), n.d(e, "JCReverb", function () {
      return ns;
    }), n.d(e, "PingPongDelay", function () {
      return is;
    }), n.d(e, "PitchShift", function () {
      return os;
    }), n.d(e, "Phaser", function () {
      return rs;
    }), n.d(e, "Reverb", function () {
      return as;
    }), n.d(e, "StereoWidener", function () {
      return ls;
    }), n.d(e, "Tremolo", function () {
      return ds;
    }), n.d(e, "Vibrato", function () {
      return ps;
    }), n.d(e, "Analyser", function () {
      return fs;
    }), n.d(e, "Meter", function () {
      return ms;
    }), n.d(e, "FFT", function () {
      return gs;
    }), n.d(e, "DCMeter", function () {
      return vs;
    }), n.d(e, "Waveform", function () {
      return ys;
    }), n.d(e, "Follower", function () {
      return In;
    }), n.d(e, "Channel", function () {
      return ws;
    }), n.d(e, "CrossFade", function () {
      return Dn;
    }), n.d(e, "Merge", function () {
      return zn;
    }), n.d(e, "MidSideMerge", function () {
      return us;
    }), n.d(e, "MidSideSplit", function () {
      return cs;
    }), n.d(e, "MultibandSplit", function () {
      return Ts;
    }), n.d(e, "Panner", function () {
      return Rn;
    }), n.d(e, "Panner3D", function () {
      return Ss;
    }), n.d(e, "PanVol", function () {
      return xs;
    }), n.d(e, "Recorder", function () {
      return Cs;
    }), n.d(e, "Solo", function () {
      return bs;
    }), n.d(e, "Split", function () {
      return Ln;
    }), n.d(e, "Volume", function () {
      return Zt;
    }), n.d(e, "Compressor", function () {
      return ks;
    }), n.d(e, "Gate", function () {
      return As;
    }), n.d(e, "Limiter", function () {
      return Ds;
    }), n.d(e, "MidSideCompressor", function () {
      return Ms;
    }), n.d(e, "MultibandCompressor", function () {
      return js;
    }), n.d(e, "AmplitudeEnvelope", function () {
      return Ue;
    }), n.d(e, "Envelope", function () {
      return Le;
    }), n.d(e, "FrequencyEnvelope", function () {
      return He;
    }), n.d(e, "EQ3", function () {
      return Es;
    }), n.d(e, "Filter", function () {
      return Xe;
    }), n.d(e, "OnePoleFilter", function () {
      return hn;
    }), n.d(e, "FeedbackCombFilter", function () {
      return un;
    }), n.d(e, "LowpassCombFilter", function () {
      return ln;
    }), n.d(e, "Convolver", function () {
      return Rs;
    }), n.d(e, "BiquadFilter", function () {
      return Ze;
    }), n.d(e, "version", function () {
      return i;
    }), n.d(e, "start", function () {
      return rt;
    }), n.d(e, "supported", function () {
      return o.isSupported;
    }), n.d(e, "now", function () {
      return qs;
    }), n.d(e, "immediate", function () {
      return Is;
    }), n.d(e, "Transport", function () {
      return Fs;
    }), n.d(e, "getTransport", function () {
      return Vs;
    }), n.d(e, "Destination", function () {
      return Ns;
    }), n.d(e, "Master", function () {
      return Ps;
    }), n.d(e, "getDestination", function () {
      return Ls;
    }), n.d(e, "Listener", function () {
      return zs;
    }), n.d(e, "getListener", function () {
      return Bs;
    }), n.d(e, "Draw", function () {
      return Ws;
    }), n.d(e, "getDraw", function () {
      return Us;
    }), n.d(e, "context", function () {
      return Gs;
    }), n.d(e, "loaded", function () {
      return Ys;
    }), n.d(e, "Buffer", function () {
      return Qs;
    }), n.d(e, "Buffers", function () {
      return Zs;
    }), n.d(e, "BufferSource", function () {
      return Xs;
    });
    var s = {};
    n.r(s), n.d(s, "assert", function () {
      return r;
    }), n.d(s, "assertRange", function () {
      return a;
    }), n.d(s, "assertContextRunning", function () {
      return c;
    }), n.d(s, "setLogger", function () {
      return h;
    }), n.d(s, "log", function () {
      return l;
    }), n.d(s, "warn", function () {
      return d;
    });
    const i = "14.7.39";
    var o = n(13);

    function r(t, e) {
      if (!t) throw new Error(e);
    }

    function a(t, e, n = 1 / 0) {
      if (!(e <= t && t <= n)) throw new RangeError(`Value must be within [${e}, ${n}], got: ${t}`);
    }

    function c(t) {
      t.isOffline || "running" === t.state || d('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.');
    }

    let u = console;

    function h(t) {
      u = t;
    }

    function l(...t) {
      u.log(...t);
    }

    function d(...t) {
      u.warn(...t);
    }

    function p(t) {
      return void 0 === t;
    }

    function f(t) {
      return !p(t);
    }

    function _(t) {
      return "function" == typeof t;
    }

    function m(t) {
      return "number" == typeof t;
    }

    function g(t) {
      return "[object Object]" === Object.prototype.toString.call(t) && t.constructor === Object;
    }

    function v(t) {
      return "boolean" == typeof t;
    }

    function y(t) {
      return Array.isArray(t);
    }

    function b(t) {
      return "string" == typeof t;
    }

    function x(t) {
      return b(t) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t);
    }

    const w = "object" == typeof self ? self : null,
          T = w && (w.hasOwnProperty("AudioContext") || w.hasOwnProperty("webkitAudioContext"));

    function O(t, e, n, s) {
      var i,
          o = arguments.length,
          r = o < 3 ? e : null === s ? s = Object.getOwnPropertyDescriptor(e, n) : s;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(t, e, n, s);else for (var a = t.length - 1; a >= 0; a--) (i = t[a]) && (r = (o < 3 ? i(r) : o > 3 ? i(e, n, r) : i(e, n)) || r);
      return o > 3 && r && Object.defineProperty(e, n, r), r;
    }

    function S(t, e, n, s) {
      return new (n || (n = Promise))(function (i, o) {
        function r(t) {
          try {
            c(s.next(t));
          } catch (t) {
            o(t);
          }
        }

        function a(t) {
          try {
            c(s.throw(t));
          } catch (t) {
            o(t);
          }
        }

        function c(t) {
          t.done ? i(t.value) : new n(function (e) {
            e(t.value);
          }).then(r, a);
        }

        c((s = s.apply(t, e || [])).next());
      });
    }

    class C {
      constructor(t, e, n) {
        this._callback = t, this._type = e, this._updateInterval = n, this._createClock();
      }

      _createWorker() {
        const t = new Blob([`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(1e3 * this._updateInterval).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`], {
          type: "text/javascript"
        }),
              e = URL.createObjectURL(t),
              n = new Worker(e);
        n.onmessage = this._callback.bind(this), this._worker = n;
      }

      _createTimeout() {
        this._timeout = setTimeout(() => {
          this._createTimeout(), this._callback();
        }, 1e3 * this._updateInterval);
      }

      _createClock() {
        if ("worker" === this._type) try {
          this._createWorker();
        } catch (t) {
          this._type = "timeout", this._createClock();
        } else "timeout" === this._type && this._createTimeout();
      }

      _disposeClock() {
        this._timeout && (clearTimeout(this._timeout), this._timeout = 0), this._worker && (this._worker.terminate(), this._worker.onmessage = null);
      }

      get updateInterval() {
        return this._updateInterval;
      }

      set updateInterval(t) {
        this._updateInterval = Math.max(t, 128 / 44100), "worker" === this._type && this._worker.postMessage(Math.max(1e3 * t, 1));
      }

      get type() {
        return this._type;
      }

      set type(t) {
        this._disposeClock(), this._type = t, this._createClock();
      }

      dispose() {
        this._disposeClock();
      }

    }

    function k(t) {
      return Object(o.isAnyAudioParam)(t);
    }

    function A(t) {
      return Object(o.isAnyAudioNode)(t);
    }

    function D(t) {
      return Object(o.isAnyOfflineAudioContext)(t);
    }

    function M(t) {
      return Object(o.isAnyAudioContext)(t);
    }

    function j(t) {
      return t instanceof AudioBuffer;
    }

    function E(t, e) {
      return "value" === t || k(e) || A(e) || j(e);
    }

    function R(t, ...e) {
      if (!e.length) return t;
      const n = e.shift();
      if (g(t) && g(n)) for (const e in n) E(e, n[e]) ? t[e] = n[e] : g(n[e]) ? (t[e] || Object.assign(t, {
        [e]: {}
      }), R(t[e], n[e])) : Object.assign(t, {
        [e]: n[e]
      });
      return R(t, ...e);
    }

    function q(t, e, n = [], s) {
      const i = {},
            o = Array.from(e);

      if (g(o[0]) && s && !Reflect.has(o[0], s)) {
        Object.keys(o[0]).some(e => Reflect.has(t, e)) || (R(i, {
          [s]: o[0]
        }), n.splice(n.indexOf(s), 1), o.shift());
      }

      if (1 === o.length && g(o[0])) R(i, o[0]);else for (let t = 0; t < n.length; t++) f(o[t]) && (i[n[t]] = o[t]);
      return R(t, i);
    }

    function I(t, e) {
      return p(t) ? e : t;
    }

    function F(t, e) {
      return e.forEach(e => {
        Reflect.has(t, e) && delete t[e];
      }), t;
    }
    /**
     * Tone.js
     * @author Yotam Mann
     * @license http://opensource.org/licenses/MIT MIT License
     * @copyright 2014-2019 Yotam Mann
     */


    class V {
      constructor() {
        this.debug = !1, this._wasDisposed = !1;
      }

      static getDefaults() {
        return {};
      }

      log(...t) {
        (this.debug || w && this.toString() === w.TONE_DEBUG_CLASS) && l(this, ...t);
      }

      dispose() {
        return this._wasDisposed = !0, this;
      }

      get disposed() {
        return this._wasDisposed;
      }

      toString() {
        return this.name;
      }

    }

    V.version = i;

    function N(t, e) {
      return t > e + 1e-6;
    }

    function P(t, e) {
      return N(t, e) || z(t, e);
    }

    function L(t, e) {
      return t + 1e-6 < e;
    }

    function z(t, e) {
      return Math.abs(t - e) < 1e-6;
    }

    function B(t, e, n) {
      return Math.max(Math.min(t, n), e);
    }

    class W extends V {
      constructor() {
        super(), this.name = "Timeline", this._timeline = [];
        const t = q(W.getDefaults(), arguments, ["memory"]);
        this.memory = t.memory, this.increasing = t.increasing;
      }

      static getDefaults() {
        return {
          memory: 1 / 0,
          increasing: !1
        };
      }

      get length() {
        return this._timeline.length;
      }

      add(t) {
        if (r(Reflect.has(t, "time"), "Timeline: events must have a time attribute"), t.time = t.time.valueOf(), this.increasing && this.length) {
          const e = this._timeline[this.length - 1];
          r(P(t.time, e.time), "The time must be greater than or equal to the last scheduled time"), this._timeline.push(t);
        } else {
          const e = this._search(t.time);

          this._timeline.splice(e + 1, 0, t);
        }

        if (this.length > this.memory) {
          const t = this.length - this.memory;

          this._timeline.splice(0, t);
        }

        return this;
      }

      remove(t) {
        const e = this._timeline.indexOf(t);

        return -1 !== e && this._timeline.splice(e, 1), this;
      }

      get(t, e = "time") {
        const n = this._search(t, e);

        return -1 !== n ? this._timeline[n] : null;
      }

      peek() {
        return this._timeline[0];
      }

      shift() {
        return this._timeline.shift();
      }

      getAfter(t, e = "time") {
        const n = this._search(t, e);

        return n + 1 < this._timeline.length ? this._timeline[n + 1] : null;
      }

      getBefore(t) {
        const e = this._timeline.length;
        if (e > 0 && this._timeline[e - 1].time < t) return this._timeline[e - 1];

        const n = this._search(t);

        return n - 1 >= 0 ? this._timeline[n - 1] : null;
      }

      cancel(t) {
        if (this._timeline.length > 1) {
          let e = this._search(t);

          if (e >= 0) {
            if (z(this._timeline[e].time, t)) {
              for (let n = e; n >= 0 && z(this._timeline[n].time, t); n--) e = n;

              this._timeline = this._timeline.slice(0, e);
            } else this._timeline = this._timeline.slice(0, e + 1);
          } else this._timeline = [];
        } else 1 === this._timeline.length && P(this._timeline[0].time, t) && (this._timeline = []);

        return this;
      }

      cancelBefore(t) {
        const e = this._search(t);

        return e >= 0 && (this._timeline = this._timeline.slice(e + 1)), this;
      }

      previousEvent(t) {
        const e = this._timeline.indexOf(t);

        return e > 0 ? this._timeline[e - 1] : null;
      }

      _search(t, e = "time") {
        if (0 === this._timeline.length) return -1;
        let n = 0;
        const s = this._timeline.length;
        let i = s;
        if (s > 0 && this._timeline[s - 1][e] <= t) return s - 1;

        for (; n < i;) {
          let s = Math.floor(n + (i - n) / 2);
          const o = this._timeline[s],
                r = this._timeline[s + 1];

          if (z(o[e], t)) {
            for (let n = s; n < this._timeline.length; n++) {
              if (!z(this._timeline[n][e], t)) break;
              s = n;
            }

            return s;
          }

          if (L(o[e], t) && N(r[e], t)) return s;
          N(o[e], t) ? i = s : n = s + 1;
        }

        return -1;
      }

      _iterate(t, e = 0, n = this._timeline.length - 1) {
        this._timeline.slice(e, n + 1).forEach(t);
      }

      forEach(t) {
        return this._iterate(t), this;
      }

      forEachBefore(t, e) {
        const n = this._search(t);

        return -1 !== n && this._iterate(e, 0, n), this;
      }

      forEachAfter(t, e) {
        const n = this._search(t);

        return this._iterate(e, n + 1), this;
      }

      forEachBetween(t, e, n) {
        let s = this._search(t),
            i = this._search(e);

        return -1 !== s && -1 !== i ? (this._timeline[s].time !== t && (s += 1), this._timeline[i].time === e && (i -= 1), this._iterate(n, s, i)) : -1 === s && this._iterate(n, 0, i), this;
      }

      forEachFrom(t, e) {
        let n = this._search(t);

        for (; n >= 0 && this._timeline[n].time >= t;) n--;

        return this._iterate(e, n + 1), this;
      }

      forEachAtTime(t, e) {
        const n = this._search(t);

        if (-1 !== n && z(this._timeline[n].time, t)) {
          let s = n;

          for (let e = n; e >= 0 && z(this._timeline[e].time, t); e--) s = e;

          this._iterate(t => {
            e(t);
          }, s, n);
        }

        return this;
      }

      dispose() {
        return super.dispose(), this._timeline = [], this;
      }

    }

    const U = [];

    function G(t) {
      U.push(t);
    }

    const Y = [];

    function Q(t) {
      Y.push(t);
    }

    class Z extends V {
      constructor() {
        super(...arguments), this.name = "Emitter";
      }

      on(t, e) {
        return t.split(/\W+/).forEach(t => {
          p(this._events) && (this._events = {}), this._events.hasOwnProperty(t) || (this._events[t] = []), this._events[t].push(e);
        }), this;
      }

      once(t, e) {
        const n = (...s) => {
          e(...s), this.off(t, n);
        };

        return this.on(t, n), this;
      }

      off(t, e) {
        return t.split(/\W+/).forEach(n => {
          if (p(this._events) && (this._events = {}), this._events.hasOwnProperty(t)) if (p(e)) this._events[t] = [];else {
            const n = this._events[t];

            for (let t = 0; t < n.length; t++) n[t] === e && n.splice(t, 1);
          }
        }), this;
      }

      emit(t, ...e) {
        if (this._events && this._events.hasOwnProperty(t)) {
          const n = this._events[t].slice(0);

          for (let t = 0, s = n.length; t < s; t++) n[t].apply(this, e);
        }

        return this;
      }

      static mixin(t) {
        ["on", "once", "off", "emit"].forEach(e => {
          const n = Object.getOwnPropertyDescriptor(Z.prototype, e);
          Object.defineProperty(t.prototype, e, n);
        });
      }

      dispose() {
        return super.dispose(), this._events = void 0, this;
      }

    }

    class X extends Z {
      constructor() {
        super(...arguments), this.isOffline = !1;
      }

    }

    class H extends X {
      constructor() {
        super(), this.name = "Context", this._constants = new Map(), this._timeouts = new W(), this._timeoutIds = 0, this._initialized = !1, this.isOffline = !1, this._workletModules = new Map();
        const t = q(H.getDefaults(), arguments, ["context"]);
        t.context ? this._context = t.context : this._context = function (t) {
          return new o.AudioContext(t);
        }({
          latencyHint: t.latencyHint
        }), this._ticker = new C(this.emit.bind(this, "tick"), t.clockSource, t.updateInterval), this.on("tick", this._timeoutLoop.bind(this)), this._context.onstatechange = () => {
          this.emit("statechange", this.state);
        }, this._setLatencyHint(t.latencyHint), this.lookAhead = t.lookAhead;
      }

      static getDefaults() {
        return {
          clockSource: "worker",
          latencyHint: "interactive",
          lookAhead: .1,
          updateInterval: .05
        };
      }

      initialize() {
        var t;
        return this._initialized || (t = this, U.forEach(e => e(t)), this._initialized = !0), this;
      }

      createAnalyser() {
        return this._context.createAnalyser();
      }

      createOscillator() {
        return this._context.createOscillator();
      }

      createBufferSource() {
        return this._context.createBufferSource();
      }

      createBiquadFilter() {
        return this._context.createBiquadFilter();
      }

      createBuffer(t, e, n) {
        return this._context.createBuffer(t, e, n);
      }

      createChannelMerger(t) {
        return this._context.createChannelMerger(t);
      }

      createChannelSplitter(t) {
        return this._context.createChannelSplitter(t);
      }

      createConstantSource() {
        return this._context.createConstantSource();
      }

      createConvolver() {
        return this._context.createConvolver();
      }

      createDelay(t) {
        return this._context.createDelay(t);
      }

      createDynamicsCompressor() {
        return this._context.createDynamicsCompressor();
      }

      createGain() {
        return this._context.createGain();
      }

      createIIRFilter(t, e) {
        return this._context.createIIRFilter(t, e);
      }

      createPanner() {
        return this._context.createPanner();
      }

      createPeriodicWave(t, e, n) {
        return this._context.createPeriodicWave(t, e, n);
      }

      createStereoPanner() {
        return this._context.createStereoPanner();
      }

      createWaveShaper() {
        return this._context.createWaveShaper();
      }

      createMediaStreamSource(t) {
        return r(M(this._context), "Not available if OfflineAudioContext"), this._context.createMediaStreamSource(t);
      }

      createMediaStreamDestination() {
        return r(M(this._context), "Not available if OfflineAudioContext"), this._context.createMediaStreamDestination();
      }

      decodeAudioData(t) {
        return this._context.decodeAudioData(t);
      }

      get currentTime() {
        return this._context.currentTime;
      }

      get state() {
        return this._context.state;
      }

      get sampleRate() {
        return this._context.sampleRate;
      }

      get listener() {
        return this.initialize(), this._listener;
      }

      set listener(t) {
        r(!this._initialized, "The listener cannot be set after initialization."), this._listener = t;
      }

      get transport() {
        return this.initialize(), this._transport;
      }

      set transport(t) {
        r(!this._initialized, "The transport cannot be set after initialization."), this._transport = t;
      }

      get draw() {
        return this.initialize(), this._draw;
      }

      set draw(t) {
        r(!this._initialized, "Draw cannot be set after initialization."), this._draw = t;
      }

      get destination() {
        return this.initialize(), this._destination;
      }

      set destination(t) {
        r(!this._initialized, "The destination cannot be set after initialization."), this._destination = t;
      }

      createAudioWorkletNode(t, e) {
        return function (t, e, n) {
          return r(f(o.AudioWorkletNode), "This node only works in a secure context (https or localhost)"), new o.AudioWorkletNode(t, e, n);
        }
        /*! *****************************************************************************
        Copyright (c) Microsoft Corporation. All rights reserved.
        Licensed under the Apache License, Version 2.0 (the "License"); you may not use
        this file except in compliance with the License. You may obtain a copy of the
        License at http://www.apache.org/licenses/LICENSE-2.0
        
        THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
        WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
        MERCHANTABLITY OR NON-INFRINGEMENT.
        
        See the Apache Version 2.0 License for specific language governing permissions
        and limitations under the License.
        ***************************************************************************** */
        (this.rawContext, t, e);
      }

      addAudioWorkletModule(t, e) {
        return S(this, void 0, void 0, function* () {
          r(f(this.rawContext.audioWorklet), "AudioWorkletNode is only available in a secure context (https or localhost)"), this._workletModules.has(e) || this._workletModules.set(e, this.rawContext.audioWorklet.addModule(t)), yield this._workletModules.get(e);
        });
      }

      workletsAreReady() {
        return S(this, void 0, void 0, function* () {
          const t = [];
          this._workletModules.forEach(e => t.push(e)), yield Promise.all(t);
        });
      }

      get updateInterval() {
        return this._ticker.updateInterval;
      }

      set updateInterval(t) {
        this._ticker.updateInterval = t;
      }

      get clockSource() {
        return this._ticker.type;
      }

      set clockSource(t) {
        this._ticker.type = t;
      }

      get latencyHint() {
        return this._latencyHint;
      }

      _setLatencyHint(t) {
        let e = 0;
        if (this._latencyHint = t, b(t)) switch (t) {
          case "interactive":
            e = .1;
            break;

          case "playback":
            e = .5;
            break;

          case "balanced":
            e = .25;
        }
        this.lookAhead = e, this.updateInterval = e / 2;
      }

      get rawContext() {
        return this._context;
      }

      now() {
        return this._context.currentTime + this.lookAhead;
      }

      immediate() {
        return this._context.currentTime;
      }

      resume() {
        return "suspended" === this._context.state && M(this._context) ? this._context.resume() : Promise.resolve();
      }

      close() {
        return S(this, void 0, void 0, function* () {
          var t;
          M(this._context) && (yield this._context.close()), this._initialized && (t = this, Y.forEach(e => e(t)));
        });
      }

      getConstant(t) {
        if (this._constants.has(t)) return this._constants.get(t);
        {
          const e = this._context.createBuffer(1, 128, this._context.sampleRate),
                n = e.getChannelData(0);

          for (let e = 0; e < n.length; e++) n[e] = t;

          const s = this._context.createBufferSource();

          return s.channelCount = 1, s.channelCountMode = "explicit", s.buffer = e, s.loop = !0, s.start(0), this._constants.set(t, s), s;
        }
      }

      dispose() {
        return super.dispose(), this._ticker.dispose(), this._timeouts.dispose(), Object.keys(this._constants).map(t => this._constants[t].disconnect()), this;
      }

      _timeoutLoop() {
        const t = this.now();

        let e = this._timeouts.peek();

        for (; this._timeouts.length && e && e.time <= t;) e.callback(), this._timeouts.shift(), e = this._timeouts.peek();
      }

      setTimeout(t, e) {
        this._timeoutIds++;
        const n = this.now();
        return this._timeouts.add({
          callback: t,
          id: this._timeoutIds,
          time: n + e
        }), this._timeoutIds;
      }

      clearTimeout(t) {
        return this._timeouts.forEach(e => {
          e.id === t && this._timeouts.remove(e);
        }), this;
      }

      clearInterval(t) {
        return this.clearTimeout(t);
      }

      setInterval(t, e) {
        const n = ++this._timeoutIds,
              s = () => {
          const i = this.now();

          this._timeouts.add({
            callback: () => {
              t(), s();
            },
            id: n,
            time: i + e
          });
        };

        return s(), n;
      }

    }

    function $(t, e) {
      y(e) ? e.forEach(e => $(t, e)) : Object.defineProperty(t, e, {
        enumerable: !0,
        writable: !1
      });
    }

    function J(t, e) {
      y(e) ? e.forEach(e => J(t, e)) : Object.defineProperty(t, e, {
        writable: !0
      });
    }

    const K = () => {};

    class tt extends V {
      constructor() {
        super(), this.name = "ToneAudioBuffer", this.onload = K;
        const t = q(tt.getDefaults(), arguments, ["url", "onload", "onerror"]);
        this.reverse = t.reverse, this.onload = t.onload, t.url && j(t.url) || t.url instanceof tt ? this.set(t.url) : b(t.url) && this.load(t.url).catch(t.onerror);
      }

      static getDefaults() {
        return {
          onerror: K,
          onload: K,
          reverse: !1
        };
      }

      get sampleRate() {
        return this._buffer ? this._buffer.sampleRate : it().sampleRate;
      }

      set(t) {
        return t instanceof tt ? t.loaded ? this._buffer = t.get() : t.onload = () => {
          this.set(t), this.onload(this);
        } : this._buffer = t, this._reversed && this._reverse(), this;
      }

      get() {
        return this._buffer;
      }

      load(t) {
        return S(this, void 0, void 0, function* () {
          const e = tt.load(t).then(t => {
            this.set(t), this.onload(this);
          });
          tt.downloads.push(e);

          try {
            yield e;
          } finally {
            const t = tt.downloads.indexOf(e);
            tt.downloads.splice(t, 1);
          }

          return this;
        });
      }

      dispose() {
        return super.dispose(), this._buffer = void 0, this;
      }

      fromArray(t) {
        const e = y(t) && t[0].length > 0,
              n = e ? t.length : 1,
              s = e ? t[0].length : t.length,
              i = it(),
              o = i.createBuffer(n, s, i.sampleRate),
              r = e || 1 !== n ? t : [t];

        for (let t = 0; t < n; t++) o.copyToChannel(r[t], t);

        return this._buffer = o, this;
      }

      toMono(t) {
        if (m(t)) this.fromArray(this.toArray(t));else {
          let t = new Float32Array(this.length);
          const e = this.numberOfChannels;

          for (let n = 0; n < e; n++) {
            const e = this.toArray(n);

            for (let n = 0; n < e.length; n++) t[n] += e[n];
          }

          t = t.map(t => t / e), this.fromArray(t);
        }
        return this;
      }

      toArray(t) {
        if (m(t)) return this.getChannelData(t);
        if (1 === this.numberOfChannels) return this.toArray(0);
        {
          const t = [];

          for (let e = 0; e < this.numberOfChannels; e++) t[e] = this.getChannelData(e);

          return t;
        }
      }

      getChannelData(t) {
        return this._buffer ? this._buffer.getChannelData(t) : new Float32Array(0);
      }

      slice(t, e = this.duration) {
        const n = Math.floor(t * this.sampleRate),
              s = Math.floor(e * this.sampleRate);
        r(n < s, "The start time must be less than the end time");
        const i = s - n,
              o = it().createBuffer(this.numberOfChannels, i, this.sampleRate);

        for (let t = 0; t < this.numberOfChannels; t++) o.copyToChannel(this.getChannelData(t).subarray(n, s), t);

        return new tt(o);
      }

      _reverse() {
        if (this.loaded) for (let t = 0; t < this.numberOfChannels; t++) this.getChannelData(t).reverse();
        return this;
      }

      get loaded() {
        return this.length > 0;
      }

      get duration() {
        return this._buffer ? this._buffer.duration : 0;
      }

      get length() {
        return this._buffer ? this._buffer.length : 0;
      }

      get numberOfChannels() {
        return this._buffer ? this._buffer.numberOfChannels : 0;
      }

      get reverse() {
        return this._reversed;
      }

      set reverse(t) {
        this._reversed !== t && (this._reversed = t, this._reverse());
      }

      static fromArray(t) {
        return new tt().fromArray(t);
      }

      static fromUrl(t) {
        return S(this, void 0, void 0, function* () {
          const e = new tt();
          return yield e.load(t);
        });
      }

      static load(t) {
        return S(this, void 0, void 0, function* () {
          const e = t.match(/\[(.+\|?)+\]$/);

          if (e) {
            const n = e[1].split("|");
            let s = n[0];

            for (const t of n) if (tt.supportsType(t)) {
              s = t;
              break;
            }

            t = t.replace(e[0], s);
          }

          const n = "" === tt.baseUrl || tt.baseUrl.endsWith("/") ? tt.baseUrl : tt.baseUrl + "/",
                s = yield fetch(n + t);
          if (!s.ok) throw new Error("could not load url: " + t);
          const i = yield s.arrayBuffer();
          return yield it().decodeAudioData(i);
        });
      }

      static supportsType(t) {
        const e = t.split("."),
              n = e[e.length - 1];
        return "" !== document.createElement("audio").canPlayType("audio/" + n);
      }

      static loaded() {
        return S(this, void 0, void 0, function* () {
          for (yield Promise.resolve(); tt.downloads.length;) yield tt.downloads[0];
        });
      }

    }

    tt.baseUrl = "", tt.downloads = [];

    class et extends H {
      constructor() {
        var t, e, n;
        super({
          clockSource: "offline",
          context: D(arguments[0]) ? arguments[0] : (t = arguments[0], e = arguments[1] * arguments[2], n = arguments[2], new o.OfflineAudioContext(t, e, n)),
          lookAhead: 0,
          updateInterval: D(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]
        }), this.name = "OfflineContext", this._currentTime = 0, this.isOffline = !0, this._duration = D(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];
      }

      now() {
        return this._currentTime;
      }

      get currentTime() {
        return this._currentTime;
      }

      _renderClock(t) {
        return S(this, void 0, void 0, function* () {
          let e = 0;

          for (; this._duration - this._currentTime >= 0;) {
            this.emit("tick"), this._currentTime += 128 / this.sampleRate, e++;
            const n = Math.floor(this.sampleRate / 128);
            t && e % n == 0 && (yield new Promise(t => setTimeout(t, 1)));
          }
        });
      }

      render(t = !0) {
        return S(this, void 0, void 0, function* () {
          yield this.workletsAreReady(), yield this._renderClock(t);
          const e = yield this._context.startRendering();
          return new tt(e);
        });
      }

      close() {
        return Promise.resolve();
      }

    }

    const nt = new class extends X {
      constructor() {
        super(...arguments), this.lookAhead = 0, this.latencyHint = 0, this.isOffline = !1;
      }

      createAnalyser() {
        return {};
      }

      createOscillator() {
        return {};
      }

      createBufferSource() {
        return {};
      }

      createBiquadFilter() {
        return {};
      }

      createBuffer(t, e, n) {
        return {};
      }

      createChannelMerger(t) {
        return {};
      }

      createChannelSplitter(t) {
        return {};
      }

      createConstantSource() {
        return {};
      }

      createConvolver() {
        return {};
      }

      createDelay(t) {
        return {};
      }

      createDynamicsCompressor() {
        return {};
      }

      createGain() {
        return {};
      }

      createIIRFilter(t, e) {
        return {};
      }

      createPanner() {
        return {};
      }

      createPeriodicWave(t, e, n) {
        return {};
      }

      createStereoPanner() {
        return {};
      }

      createWaveShaper() {
        return {};
      }

      createMediaStreamSource(t) {
        return {};
      }

      createMediaStreamDestination() {
        return {};
      }

      decodeAudioData(t) {
        return Promise.resolve({});
      }

      createAudioWorkletNode(t, e) {
        return {};
      }

      get rawContext() {
        return {};
      }

      addAudioWorkletModule(t, e) {
        return S(this, void 0, void 0, function* () {
          return Promise.resolve();
        });
      }

      resume() {
        return Promise.resolve();
      }

      setTimeout(t, e) {
        return 0;
      }

      clearTimeout(t) {
        return this;
      }

      setInterval(t, e) {
        return 0;
      }

      clearInterval(t) {
        return this;
      }

      getConstant(t) {
        return {};
      }

      get currentTime() {
        return 0;
      }

      get state() {
        return {};
      }

      get sampleRate() {
        return 0;
      }

      get listener() {
        return {};
      }

      get transport() {
        return {};
      }

      get draw() {
        return {};
      }

      set draw(t) {}

      get destination() {
        return {};
      }

      set destination(t) {}

      now() {
        return 0;
      }

      immediate() {
        return 0;
      }

    }();
    let st = nt;

    function it() {
      return st === nt && T && ot(new H()), st;
    }

    function ot(t) {
      st = M(t) ? new H(t) : D(t) ? new et(t) : t;
    }

    function rt() {
      return st.resume();
    }

    if (w && !w.TONE_SILENCE_LOGGING) {
      let t = "v";
      "dev" === i && (t = "");
      const e = ` * Tone.js ${t}${i} * `;
      console.log("%c" + e, "background: #000; color: #fff");
    }

    function at(t) {
      return Math.pow(10, t / 20);
    }

    function ct(t) {
      return Math.log(t) / Math.LN10 * 20;
    }

    function ut(t) {
      return Math.pow(2, t / 12);
    }

    let ht = 440;

    function lt(t) {
      return Math.round(dt(t));
    }

    function dt(t) {
      return 69 + 12 * Math.log2(t / ht);
    }

    function pt(t) {
      return ht * Math.pow(2, (t - 69) / 12);
    }

    class ft extends V {
      constructor(t, e, n) {
        super(), this.defaultUnits = "s", this._val = e, this._units = n, this.context = t, this._expressions = this._getExpressions();
      }

      _getExpressions() {
        return {
          hz: {
            method: t => this._frequencyToUnits(parseFloat(t)),
            regexp: /^(\d+(?:\.\d+)?)hz$/i
          },
          i: {
            method: t => this._ticksToUnits(parseInt(t, 10)),
            regexp: /^(\d+)i$/i
          },
          m: {
            method: t => this._beatsToUnits(parseInt(t, 10) * this._getTimeSignature()),
            regexp: /^(\d+)m$/i
          },
          n: {
            method: (t, e) => {
              const n = parseInt(t, 10),
                    s = "." === e ? 1.5 : 1;
              return 1 === n ? this._beatsToUnits(this._getTimeSignature()) * s : this._beatsToUnits(4 / n) * s;
            },
            regexp: /^(\d+)n(\.?)$/i
          },
          number: {
            method: t => this._expressions[this.defaultUnits].method.call(this, t),
            regexp: /^(\d+(?:\.\d+)?)$/
          },
          s: {
            method: t => this._secondsToUnits(parseFloat(t)),
            regexp: /^(\d+(?:\.\d+)?)s$/
          },
          samples: {
            method: t => parseInt(t, 10) / this.context.sampleRate,
            regexp: /^(\d+)samples$/
          },
          t: {
            method: t => {
              const e = parseInt(t, 10);
              return this._beatsToUnits(8 / (3 * Math.floor(e)));
            },
            regexp: /^(\d+)t$/i
          },
          tr: {
            method: (t, e, n) => {
              let s = 0;
              return t && "0" !== t && (s += this._beatsToUnits(this._getTimeSignature() * parseFloat(t))), e && "0" !== e && (s += this._beatsToUnits(parseFloat(e))), n && "0" !== n && (s += this._beatsToUnits(parseFloat(n) / 4)), s;
            },
            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/
          }
        };
      }

      valueOf() {
        if (this._val instanceof ft && this.fromType(this._val), p(this._val)) return this._noArg();

        if (b(this._val) && p(this._units)) {
          for (const t in this._expressions) if (this._expressions[t].regexp.test(this._val.trim())) {
            this._units = t;
            break;
          }
        } else if (g(this._val)) {
          let t = 0;

          for (const e in this._val) if (f(this._val[e])) {
            const n = this._val[e];
            t += new this.constructor(this.context, e).valueOf() * n;
          }

          return t;
        }

        if (f(this._units)) {
          const t = this._expressions[this._units],
                e = this._val.toString().trim().match(t.regexp);

          return e ? t.method.apply(this, e.slice(1)) : t.method.call(this, this._val);
        }

        return b(this._val) ? parseFloat(this._val) : this._val;
      }

      _frequencyToUnits(t) {
        return 1 / t;
      }

      _beatsToUnits(t) {
        return 60 / this._getBpm() * t;
      }

      _secondsToUnits(t) {
        return t;
      }

      _ticksToUnits(t) {
        return t * this._beatsToUnits(1) / this._getPPQ();
      }

      _noArg() {
        return this._now();
      }

      _getBpm() {
        return this.context.transport.bpm.value;
      }

      _getTimeSignature() {
        return this.context.transport.timeSignature;
      }

      _getPPQ() {
        return this.context.transport.PPQ;
      }

      fromType(t) {
        switch (this._units = void 0, this.defaultUnits) {
          case "s":
            this._val = t.toSeconds();
            break;

          case "i":
            this._val = t.toTicks();
            break;

          case "hz":
            this._val = t.toFrequency();
            break;

          case "midi":
            this._val = t.toMidi();
        }

        return this;
      }

      toFrequency() {
        return 1 / this.toSeconds();
      }

      toSamples() {
        return this.toSeconds() * this.context.sampleRate;
      }

      toMilliseconds() {
        return 1e3 * this.toSeconds();
      }

    }

    class _t extends ft {
      constructor() {
        super(...arguments), this.name = "TimeClass";
      }

      _getExpressions() {
        return Object.assign(super._getExpressions(), {
          now: {
            method: t => this._now() + new this.constructor(this.context, t).valueOf(),
            regexp: /^\+(.+)/
          },
          quantize: {
            method: t => {
              const e = new _t(this.context, t).valueOf();
              return this._secondsToUnits(this.context.transport.nextSubdivision(e));
            },
            regexp: /^@(.+)/
          }
        });
      }

      quantize(t, e = 1) {
        const n = new this.constructor(this.context, t).valueOf(),
              s = this.valueOf();
        return s + (Math.round(s / n) * n - s) * e;
      }

      toNotation() {
        const t = this.toSeconds(),
              e = ["1m"];

        for (let t = 1; t < 9; t++) {
          const n = Math.pow(2, t);
          e.push(n + "n."), e.push(n + "n"), e.push(n + "t");
        }

        e.push("0");
        let n = e[0],
            s = new _t(this.context, e[0]).toSeconds();
        return e.forEach(e => {
          const i = new _t(this.context, e).toSeconds();
          Math.abs(i - t) < Math.abs(s - t) && (n = e, s = i);
        }), n;
      }

      toBarsBeatsSixteenths() {
        const t = this._beatsToUnits(1);

        let e = this.valueOf() / t;
        e = parseFloat(e.toFixed(4));
        const n = Math.floor(e / this._getTimeSignature());
        let s = e % 1 * 4;
        e = Math.floor(e) % this._getTimeSignature();
        const i = s.toString();
        return i.length > 3 && (s = parseFloat(parseFloat(i).toFixed(3))), [n, e, s].join(":");
      }

      toTicks() {
        const t = this._beatsToUnits(1),
              e = this.valueOf() / t;

        return Math.round(e * this._getPPQ());
      }

      toSeconds() {
        return this.valueOf();
      }

      toMidi() {
        return lt(this.toFrequency());
      }

      _now() {
        return this.context.now();
      }

    }

    function mt(t, e) {
      return new _t(it(), t, e);
    }

    class gt extends _t {
      constructor() {
        super(...arguments), this.name = "Frequency", this.defaultUnits = "hz";
      }

      static get A4() {
        return ht;
      }

      static set A4(t) {
        !function (t) {
          ht = t;
        }(t);
      }

      _getExpressions() {
        return Object.assign({}, super._getExpressions(), {
          midi: {
            regexp: /^(\d+(?:\.\d+)?midi)/,

            method(t) {
              return "midi" === this.defaultUnits ? t : gt.mtof(t);
            }

          },
          note: {
            regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,

            method(t, e) {
              const n = vt[t.toLowerCase()] + 12 * (parseInt(e, 10) + 1);
              return "midi" === this.defaultUnits ? n : gt.mtof(n);
            }

          },
          tr: {
            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,

            method(t, e, n) {
              let s = 1;
              return t && "0" !== t && (s *= this._beatsToUnits(this._getTimeSignature() * parseFloat(t))), e && "0" !== e && (s *= this._beatsToUnits(parseFloat(e))), n && "0" !== n && (s *= this._beatsToUnits(parseFloat(n) / 4)), s;
            }

          }
        });
      }

      transpose(t) {
        return new gt(this.context, this.valueOf() * ut(t));
      }

      harmonize(t) {
        return t.map(t => this.transpose(t));
      }

      toMidi() {
        return lt(this.valueOf());
      }

      toNote() {
        const t = this.toFrequency(),
              e = Math.log2(t / gt.A4);
        let n = Math.round(12 * e) + 57;
        const s = Math.floor(n / 12);
        return s < 0 && (n += -12 * s), yt[n % 12] + s.toString();
      }

      toSeconds() {
        return 1 / super.toSeconds();
      }

      toTicks() {
        const t = this._beatsToUnits(1),
              e = this.valueOf() / t;

        return Math.floor(e * this._getPPQ());
      }

      _noArg() {
        return 0;
      }

      _frequencyToUnits(t) {
        return t;
      }

      _ticksToUnits(t) {
        return 1 / (60 * t / (this._getBpm() * this._getPPQ()));
      }

      _beatsToUnits(t) {
        return 1 / super._beatsToUnits(t);
      }

      _secondsToUnits(t) {
        return 1 / t;
      }

      static mtof(t) {
        return pt(t);
      }

      static ftom(t) {
        return lt(t);
      }

    }

    const vt = {
      cbb: -2,
      cb: -1,
      c: 0,
      "c#": 1,
      cx: 2,
      dbb: 0,
      db: 1,
      d: 2,
      "d#": 3,
      dx: 4,
      ebb: 2,
      eb: 3,
      e: 4,
      "e#": 5,
      ex: 6,
      fbb: 3,
      fb: 4,
      f: 5,
      "f#": 6,
      fx: 7,
      gbb: 5,
      gb: 6,
      g: 7,
      "g#": 8,
      gx: 9,
      abb: 7,
      ab: 8,
      a: 9,
      "a#": 10,
      ax: 11,
      bbb: 9,
      bb: 10,
      b: 11,
      "b#": 12,
      bx: 13
    },
          yt = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

    function bt(t, e) {
      return new gt(it(), t, e);
    }

    class xt extends _t {
      constructor() {
        super(...arguments), this.name = "TransportTime";
      }

      _now() {
        return this.context.transport.seconds;
      }

    }

    function wt(t, e) {
      return new xt(it(), t, e);
    }

    class Tt extends V {
      constructor() {
        super();
        const t = q(Tt.getDefaults(), arguments, ["context"]);
        this.defaultContext ? this.context = this.defaultContext : this.context = t.context;
      }

      static getDefaults() {
        return {
          context: it()
        };
      }

      now() {
        return this.context.currentTime + this.context.lookAhead;
      }

      immediate() {
        return this.context.currentTime;
      }

      get sampleTime() {
        return 1 / this.context.sampleRate;
      }

      get blockTime() {
        return 128 / this.context.sampleRate;
      }

      toSeconds(t) {
        return new _t(this.context, t).toSeconds();
      }

      toFrequency(t) {
        return new gt(this.context, t).toFrequency();
      }

      toTicks(t) {
        return new xt(this.context, t).toTicks();
      }

      _getPartialProperties(t) {
        const e = this.get();
        return Object.keys(e).forEach(n => {
          p(t[n]) && delete e[n];
        }), e;
      }

      get() {
        const t = this.constructor.getDefaults();
        return Object.keys(t).forEach(e => {
          if (Reflect.has(this, e)) {
            const n = this[e];
            f(n) && f(n.value) && f(n.setValueAtTime) ? t[e] = n.value : n instanceof Tt ? t[e] = n._getPartialProperties(t[e]) : y(n) || m(n) || b(n) || v(n) ? t[e] = n : delete t[e];
          }
        }), t;
      }

      set(t) {
        return Object.keys(t).forEach(e => {
          Reflect.has(this, e) && f(this[e]) && (this[e] && f(this[e].value) && f(this[e].setValueAtTime) ? this[e].value !== t[e] && (this[e].value = t[e]) : this[e] instanceof Tt ? this[e].set(t[e]) : this[e] = t[e]);
        }), this;
      }

    }

    class Ot extends W {
      constructor(t = "stopped") {
        super(), this.name = "StateTimeline", this._initial = t, this.setStateAtTime(this._initial, 0);
      }

      getValueAtTime(t) {
        const e = this.get(t);
        return null !== e ? e.state : this._initial;
      }

      setStateAtTime(t, e, n) {
        return a(e, 0), this.add(Object.assign({}, n, {
          state: t,
          time: e
        })), this;
      }

      getLastState(t, e) {
        for (let n = this._search(e); n >= 0; n--) {
          const e = this._timeline[n];
          if (e.state === t) return e;
        }
      }

      getNextState(t, e) {
        const n = this._search(e);

        if (-1 !== n) for (let e = n; e < this._timeline.length; e++) {
          const n = this._timeline[e];
          if (n.state === t) return n;
        }
      }

    }

    class St extends Tt {
      constructor() {
        super(q(St.getDefaults(), arguments, ["param", "units", "convert"])), this.name = "Param", this.overridden = !1, this._minOutput = 1e-7;
        const t = q(St.getDefaults(), arguments, ["param", "units", "convert"]);

        for (r(f(t.param) && (k(t.param) || t.param instanceof St), "param must be an AudioParam"); !k(t.param);) t.param = t.param._param;

        this._swappable = !!f(t.swappable) && t.swappable, this._swappable ? (this.input = this.context.createGain(), this._param = t.param, this.input.connect(this._param)) : this._param = this.input = t.param, this._events = new W(1e3), this._initialValue = this._param.defaultValue, this.units = t.units, this.convert = t.convert, this._minValue = t.minValue, this._maxValue = t.maxValue, f(t.value) && t.value !== this._toType(this._initialValue) && this.setValueAtTime(t.value, 0);
      }

      static getDefaults() {
        return Object.assign(Tt.getDefaults(), {
          convert: !0,
          units: "number"
        });
      }

      get value() {
        const t = this.now();
        return this.getValueAtTime(t);
      }

      set value(t) {
        this.cancelScheduledValues(this.now()), this.setValueAtTime(t, this.now());
      }

      get minValue() {
        return f(this._minValue) ? this._minValue : "time" === this.units || "frequency" === this.units || "normalRange" === this.units || "positive" === this.units || "transportTime" === this.units || "ticks" === this.units || "bpm" === this.units || "hertz" === this.units || "samples" === this.units ? 0 : "audioRange" === this.units ? -1 : "decibels" === this.units ? -1 / 0 : this._param.minValue;
      }

      get maxValue() {
        return f(this._maxValue) ? this._maxValue : "normalRange" === this.units || "audioRange" === this.units ? 1 : this._param.maxValue;
      }

      _is(t, e) {
        return this.units === e;
      }

      _assertRange(t) {
        return f(this.maxValue) && f(this.minValue) && a(t, this._fromType(this.minValue), this._fromType(this.maxValue)), t;
      }

      _fromType(t) {
        return this.convert && !this.overridden ? this._is(t, "time") ? this.toSeconds(t) : this._is(t, "decibels") ? at(t) : this._is(t, "frequency") ? this.toFrequency(t) : t : this.overridden ? 0 : t;
      }

      _toType(t) {
        return this.convert && "decibels" === this.units ? ct(t) : t;
      }

      setValueAtTime(t, e) {
        const n = this.toSeconds(e),
              s = this._fromType(t);

        return r(isFinite(s) && isFinite(n), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._assertRange(s), this.log(this.units, "setValueAtTime", t, n), this._events.add({
          time: n,
          type: "setValueAtTime",
          value: s
        }), this._param.setValueAtTime(s, n), this;
      }

      getValueAtTime(t) {
        const e = Math.max(this.toSeconds(t), 0),
              n = this._events.getAfter(e),
              s = this._events.get(e);

        let i = this._initialValue;
        if (null === s) i = this._initialValue;else if ("setTargetAtTime" !== s.type || null !== n && "setValueAtTime" !== n.type) {
          if (null === n) i = s.value;else if ("linearRampToValueAtTime" === n.type || "exponentialRampToValueAtTime" === n.type) {
            let t = s.value;

            if ("setTargetAtTime" === s.type) {
              const e = this._events.getBefore(s.time);

              t = null === e ? this._initialValue : e.value;
            }

            i = "linearRampToValueAtTime" === n.type ? this._linearInterpolate(s.time, t, n.time, n.value, e) : this._exponentialInterpolate(s.time, t, n.time, n.value, e);
          } else i = s.value;
        } else {
          const t = this._events.getBefore(s.time);

          let n;
          n = null === t ? this._initialValue : t.value, "setTargetAtTime" === s.type && (i = this._exponentialApproach(s.time, n, s.value, s.constant, e));
        }
        return this._toType(i);
      }

      setRampPoint(t) {
        t = this.toSeconds(t);
        let e = this.getValueAtTime(t);
        return this.cancelAndHoldAtTime(t), 0 === this._fromType(e) && (e = this._toType(this._minOutput)), this.setValueAtTime(e, t), this;
      }

      linearRampToValueAtTime(t, e) {
        const n = this._fromType(t),
              s = this.toSeconds(e);

        return r(isFinite(n) && isFinite(s), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._assertRange(n), this._events.add({
          time: s,
          type: "linearRampToValueAtTime",
          value: n
        }), this.log(this.units, "linearRampToValueAtTime", t, s), this._param.linearRampToValueAtTime(n, s), this;
      }

      exponentialRampToValueAtTime(t, e) {
        let n = this._fromType(t);

        n = Math.max(this._minOutput, n), this._assertRange(n);
        const s = this.toSeconds(e);
        return r(isFinite(n) && isFinite(s), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._events.add({
          time: s,
          type: "exponentialRampToValueAtTime",
          value: n
        }), this.log(this.units, "exponentialRampToValueAtTime", t, s), this._param.exponentialRampToValueAtTime(n, s), this;
      }

      exponentialRampTo(t, e, n) {
        return n = this.toSeconds(n), this.setRampPoint(n), this.exponentialRampToValueAtTime(t, n + this.toSeconds(e)), this;
      }

      linearRampTo(t, e, n) {
        return n = this.toSeconds(n), this.setRampPoint(n), this.linearRampToValueAtTime(t, n + this.toSeconds(e)), this;
      }

      targetRampTo(t, e, n) {
        return n = this.toSeconds(n), this.setRampPoint(n), this.exponentialApproachValueAtTime(t, n, e), this;
      }

      exponentialApproachValueAtTime(t, e, n) {
        e = this.toSeconds(e), n = this.toSeconds(n);
        const s = Math.log(n + 1) / Math.log(200);
        return this.setTargetAtTime(t, e, s), this.cancelAndHoldAtTime(e + .9 * n), this.linearRampToValueAtTime(t, e + n), this;
      }

      setTargetAtTime(t, e, n) {
        const s = this._fromType(t);

        r(isFinite(n) && n > 0, "timeConstant must be a number greater than 0");
        const i = this.toSeconds(e);
        return this._assertRange(s), r(isFinite(s) && isFinite(i), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`), this._events.add({
          constant: n,
          time: i,
          type: "setTargetAtTime",
          value: s
        }), this.log(this.units, "setTargetAtTime", t, i, n), this._param.setTargetAtTime(s, i, n), this;
      }

      setValueCurveAtTime(t, e, n, s = 1) {
        n = this.toSeconds(n), e = this.toSeconds(e);
        const i = this._fromType(t[0]) * s;
        this.setValueAtTime(this._toType(i), e);
        const o = n / (t.length - 1);

        for (let n = 1; n < t.length; n++) {
          const i = this._fromType(t[n]) * s;
          this.linearRampToValueAtTime(this._toType(i), e + n * o);
        }

        return this;
      }

      cancelScheduledValues(t) {
        const e = this.toSeconds(t);
        return r(isFinite(e), "Invalid argument to cancelScheduledValues: " + JSON.stringify(t)), this._events.cancel(e), this._param.cancelScheduledValues(e), this.log(this.units, "cancelScheduledValues", e), this;
      }

      cancelAndHoldAtTime(t) {
        const e = this.toSeconds(t),
              n = this._fromType(this.getValueAtTime(e));

        r(isFinite(e), "Invalid argument to cancelAndHoldAtTime: " + JSON.stringify(t)), this.log(this.units, "cancelAndHoldAtTime", e, "value=" + n);

        const s = this._events.get(e),
              i = this._events.getAfter(e);

        return s && z(s.time, e) ? i ? (this._param.cancelScheduledValues(i.time), this._events.cancel(i.time)) : (this._param.cancelAndHoldAtTime(e), this._events.cancel(e + this.sampleTime)) : i && (this._param.cancelScheduledValues(i.time), this._events.cancel(i.time), "linearRampToValueAtTime" === i.type ? this.linearRampToValueAtTime(this._toType(n), e) : "exponentialRampToValueAtTime" === i.type && this.exponentialRampToValueAtTime(this._toType(n), e)), this._events.add({
          time: e,
          type: "setValueAtTime",
          value: n
        }), this._param.setValueAtTime(n, e), this;
      }

      rampTo(t, e = .1, n) {
        return "frequency" === this.units || "bpm" === this.units || "decibels" === this.units ? this.exponentialRampTo(t, e, n) : this.linearRampTo(t, e, n), this;
      }

      apply(t) {
        const e = this.context.currentTime;
        t.setValueAtTime(this.getValueAtTime(e), e);

        const n = this._events.get(e);

        if (n && "setTargetAtTime" === n.type) {
          const s = this._events.getAfter(n.time),
                i = s ? s.time : e + 2,
                o = (i - e) / 10;

          for (let n = e; n < i; n += o) t.linearRampToValueAtTime(this.getValueAtTime(n), n);
        }

        return this._events.forEachAfter(this.context.currentTime, e => {
          "cancelScheduledValues" === e.type ? t.cancelScheduledValues(e.time) : "setTargetAtTime" === e.type ? t.setTargetAtTime(e.value, e.time, e.constant) : t[e.type](e.value, e.time);
        }), this;
      }

      setParam(t) {
        r(this._swappable, "The Param must be assigned as 'swappable' in the constructor");
        const e = this.input;
        return e.disconnect(this._param), this.apply(t), this._param = t, e.connect(this._param), this;
      }

      dispose() {
        return super.dispose(), this._events.dispose(), this;
      }

      get defaultValue() {
        return this._toType(this._param.defaultValue);
      }

      _exponentialApproach(t, e, n, s, i) {
        return n + (e - n) * Math.exp(-(i - t) / s);
      }

      _linearInterpolate(t, e, n, s, i) {
        return e + (i - t) / (n - t) * (s - e);
      }

      _exponentialInterpolate(t, e, n, s, i) {
        return e * Math.pow(s / e, (i - t) / (n - t));
      }

    }

    class Ct extends Tt {
      constructor() {
        super(...arguments), this.name = "ToneAudioNode", this._internalChannels = [];
      }

      get numberOfInputs() {
        return f(this.input) ? k(this.input) || this.input instanceof St ? 1 : this.input.numberOfInputs : 0;
      }

      get numberOfOutputs() {
        return f(this.output) ? this.output.numberOfOutputs : 0;
      }

      _isAudioNode(t) {
        return f(t) && (t instanceof Ct || A(t));
      }

      _getInternalNodes() {
        const t = this._internalChannels.slice(0);

        return this._isAudioNode(this.input) && t.push(this.input), this._isAudioNode(this.output) && this.input !== this.output && t.push(this.output), t;
      }

      _setChannelProperties(t) {
        this._getInternalNodes().forEach(e => {
          e.channelCount = t.channelCount, e.channelCountMode = t.channelCountMode, e.channelInterpretation = t.channelInterpretation;
        });
      }

      _getChannelProperties() {
        const t = this._getInternalNodes();

        r(t.length > 0, "ToneAudioNode does not have any internal nodes");
        const e = t[0];
        return {
          channelCount: e.channelCount,
          channelCountMode: e.channelCountMode,
          channelInterpretation: e.channelInterpretation
        };
      }

      get channelCount() {
        return this._getChannelProperties().channelCount;
      }

      set channelCount(t) {
        const e = this._getChannelProperties();

        this._setChannelProperties(Object.assign(e, {
          channelCount: t
        }));
      }

      get channelCountMode() {
        return this._getChannelProperties().channelCountMode;
      }

      set channelCountMode(t) {
        const e = this._getChannelProperties();

        this._setChannelProperties(Object.assign(e, {
          channelCountMode: t
        }));
      }

      get channelInterpretation() {
        return this._getChannelProperties().channelInterpretation;
      }

      set channelInterpretation(t) {
        const e = this._getChannelProperties();

        this._setChannelProperties(Object.assign(e, {
          channelInterpretation: t
        }));
      }

      connect(t, e = 0, n = 0) {
        return At(this, t, e, n), this;
      }

      toDestination() {
        return this.connect(this.context.destination), this;
      }

      toMaster() {
        return d("toMaster() has been renamed toDestination()"), this.toDestination();
      }

      disconnect(t, e = 0, n = 0) {
        return Dt(this, t, e, n), this;
      }

      chain(...t) {
        return kt(this, ...t), this;
      }

      fan(...t) {
        return t.forEach(t => this.connect(t)), this;
      }

      dispose() {
        return super.dispose(), f(this.input) && (this.input instanceof Ct ? this.input.dispose() : A(this.input) && this.input.disconnect()), f(this.output) && (this.output instanceof Ct ? this.output.dispose() : A(this.output) && this.output.disconnect()), this._internalChannels = [], this;
      }

    }

    function kt(...t) {
      const e = t.shift();
      t.reduce((t, e) => (t instanceof Ct ? t.connect(e) : A(t) && At(t, e), e), e);
    }

    function At(t, e, n = 0, s = 0) {
      for (r(f(t), "Cannot connect from undefined node"), r(f(e), "Cannot connect to undefined node"), (e instanceof Ct || A(e)) && r(e.numberOfInputs > 0, "Cannot connect to node with no inputs"), r(t.numberOfOutputs > 0, "Cannot connect from node with no outputs"); e instanceof Ct || e instanceof St;) f(e.input) && (e = e.input);

      for (; t instanceof Ct;) f(t.output) && (t = t.output);

      k(e) ? t.connect(e, n) : t.connect(e, n, s);
    }

    function Dt(t, e, n = 0, s = 0) {
      if (f(e)) for (; e instanceof Ct;) e = e.input;

      for (; !A(t);) f(t.output) && (t = t.output);

      k(e) ? t.disconnect(e, n) : A(e) ? t.disconnect(e, n, s) : t.disconnect();
    }

    class Mt extends Ct {
      constructor() {
        super(q(Mt.getDefaults(), arguments, ["gain", "units"])), this.name = "Gain", this._gainNode = this.context.createGain(), this.input = this._gainNode, this.output = this._gainNode;
        const t = q(Mt.getDefaults(), arguments, ["gain", "units"]);
        this.gain = new St({
          context: this.context,
          convert: t.convert,
          param: this._gainNode.gain,
          units: t.units,
          value: t.gain,
          minValue: t.minValue,
          maxValue: t.maxValue
        }), $(this, "gain");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          convert: !0,
          gain: 1,
          units: "gain"
        });
      }

      dispose() {
        return super.dispose(), this._gainNode.disconnect(), this.gain.dispose(), this;
      }

    }

    class jt extends Ct {
      constructor(t) {
        super(t), this.onended = K, this._startTime = -1, this._stopTime = -1, this._timeout = -1, this.output = new Mt({
          context: this.context,
          gain: 0
        }), this._gainNode = this.output, this.getStateAtTime = function (t) {
          const e = this.toSeconds(t);
          return -1 !== this._startTime && e >= this._startTime && (-1 === this._stopTime || e <= this._stopTime) ? "started" : "stopped";
        }, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut, this._curve = t.curve, this.onended = t.onended;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          curve: "linear",
          fadeIn: 0,
          fadeOut: 0,
          onended: K
        });
      }

      _startGain(t, e = 1) {
        r(-1 === this._startTime, "Source cannot be started more than once");
        const n = this.toSeconds(this._fadeIn);
        return this._startTime = t + n, this._startTime = Math.max(this._startTime, this.context.currentTime), n > 0 ? (this._gainNode.gain.setValueAtTime(0, t), "linear" === this._curve ? this._gainNode.gain.linearRampToValueAtTime(e, t + n) : this._gainNode.gain.exponentialApproachValueAtTime(e, t, n)) : this._gainNode.gain.setValueAtTime(e, t), this;
      }

      stop(t) {
        return this.log("stop", t), this._stopGain(this.toSeconds(t)), this;
      }

      _stopGain(t) {
        r(-1 !== this._startTime, "'start' must be called before 'stop'"), this.cancelStop();
        const e = this.toSeconds(this._fadeOut);
        return this._stopTime = this.toSeconds(t) + e, this._stopTime = Math.max(this._stopTime, this.context.currentTime), e > 0 ? "linear" === this._curve ? this._gainNode.gain.linearRampTo(0, e, t) : this._gainNode.gain.targetRampTo(0, e, t) : (this._gainNode.gain.cancelAndHoldAtTime(t), this._gainNode.gain.setValueAtTime(0, t)), this.context.clearTimeout(this._timeout), this._timeout = this.context.setTimeout(() => {
          const t = "exponential" === this._curve ? 2 * e : 0;
          this._stopSource(this.now() + t), this._onended();
        }, this._stopTime - this.context.currentTime), this;
      }

      _onended() {
        if (this.onended !== K && (this.onended(this), this.onended = K, !this.context.isOffline)) {
          const t = () => this.dispose();

          void 0 !== window.requestIdleCallback ? window.requestIdleCallback(t) : setTimeout(t, 1e3);
        }
      }

      get state() {
        return this.getStateAtTime(this.now());
      }

      cancelStop() {
        return this.log("cancelStop"), r(-1 !== this._startTime, "Source is not started"), this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime), this.context.clearTimeout(this._timeout), this._stopTime = -1, this;
      }

      dispose() {
        return super.dispose(), this._gainNode.disconnect(), this;
      }

    }

    class Et extends jt {
      constructor() {
        super(q(Et.getDefaults(), arguments, ["offset"])), this.name = "ToneConstantSource", this._source = this.context.createConstantSource();
        const t = q(Et.getDefaults(), arguments, ["offset"]);
        At(this._source, this._gainNode), this.offset = new St({
          context: this.context,
          convert: t.convert,
          param: this._source.offset,
          units: t.units,
          value: t.offset,
          minValue: t.minValue,
          maxValue: t.maxValue
        });
      }

      static getDefaults() {
        return Object.assign(jt.getDefaults(), {
          convert: !0,
          offset: 1,
          units: "number"
        });
      }

      start(t) {
        const e = this.toSeconds(t);
        return this.log("start", e), this._startGain(e), this._source.start(e), this;
      }

      _stopSource(t) {
        this._source.stop(t);
      }

      dispose() {
        return super.dispose(), "started" === this.state && this.stop(), this._source.disconnect(), this.offset.dispose(), this;
      }

    }

    class Rt extends Ct {
      constructor() {
        super(q(Rt.getDefaults(), arguments, ["value", "units"])), this.name = "Signal", this.override = !0;
        const t = q(Rt.getDefaults(), arguments, ["value", "units"]);
        this.output = this._constantSource = new Et({
          context: this.context,
          convert: t.convert,
          offset: t.value,
          units: t.units,
          minValue: t.minValue,
          maxValue: t.maxValue
        }), this._constantSource.start(0), this.input = this._param = this._constantSource.offset;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          convert: !0,
          units: "number",
          value: 0
        });
      }

      connect(t, e = 0, n = 0) {
        return qt(this, t, e, n), this;
      }

      dispose() {
        return super.dispose(), this._param.dispose(), this._constantSource.dispose(), this;
      }

      setValueAtTime(t, e) {
        return this._param.setValueAtTime(t, e), this;
      }

      getValueAtTime(t) {
        return this._param.getValueAtTime(t);
      }

      setRampPoint(t) {
        return this._param.setRampPoint(t), this;
      }

      linearRampToValueAtTime(t, e) {
        return this._param.linearRampToValueAtTime(t, e), this;
      }

      exponentialRampToValueAtTime(t, e) {
        return this._param.exponentialRampToValueAtTime(t, e), this;
      }

      exponentialRampTo(t, e, n) {
        return this._param.exponentialRampTo(t, e, n), this;
      }

      linearRampTo(t, e, n) {
        return this._param.linearRampTo(t, e, n), this;
      }

      targetRampTo(t, e, n) {
        return this._param.targetRampTo(t, e, n), this;
      }

      exponentialApproachValueAtTime(t, e, n) {
        return this._param.exponentialApproachValueAtTime(t, e, n), this;
      }

      setTargetAtTime(t, e, n) {
        return this._param.setTargetAtTime(t, e, n), this;
      }

      setValueCurveAtTime(t, e, n, s) {
        return this._param.setValueCurveAtTime(t, e, n, s), this;
      }

      cancelScheduledValues(t) {
        return this._param.cancelScheduledValues(t), this;
      }

      cancelAndHoldAtTime(t) {
        return this._param.cancelAndHoldAtTime(t), this;
      }

      rampTo(t, e, n) {
        return this._param.rampTo(t, e, n), this;
      }

      get value() {
        return this._param.value;
      }

      set value(t) {
        this._param.value = t;
      }

      get convert() {
        return this._param.convert;
      }

      set convert(t) {
        this._param.convert = t;
      }

      get units() {
        return this._param.units;
      }

      get overridden() {
        return this._param.overridden;
      }

      set overridden(t) {
        this._param.overridden = t;
      }

      get maxValue() {
        return this._param.maxValue;
      }

      get minValue() {
        return this._param.minValue;
      }

      apply(t) {
        return this._param.apply(t), this;
      }

    }

    function qt(t, e, n, s) {
      (e instanceof St || k(e) || e instanceof Rt && e.override) && (e.cancelScheduledValues(0), e.setValueAtTime(0, 0), e instanceof Rt && (e.overridden = !0)), At(t, e, n, s);
    }

    class It extends St {
      constructor() {
        super(q(It.getDefaults(), arguments, ["value"])), this.name = "TickParam", this._events = new W(1 / 0), this._multiplier = 1;
        const t = q(It.getDefaults(), arguments, ["value"]);
        this._multiplier = t.multiplier, this._events.cancel(0), this._events.add({
          ticks: 0,
          time: 0,
          type: "setValueAtTime",
          value: this._fromType(t.value)
        }), this.setValueAtTime(t.value, 0);
      }

      static getDefaults() {
        return Object.assign(St.getDefaults(), {
          multiplier: 1,
          units: "hertz",
          value: 1
        });
      }

      setTargetAtTime(t, e, n) {
        e = this.toSeconds(e), this.setRampPoint(e);

        const s = this._fromType(t),
              i = this._events.get(e),
              o = Math.round(Math.max(1 / n, 1));

        for (let t = 0; t <= o; t++) {
          const o = n * t + e,
                r = this._exponentialApproach(i.time, i.value, s, n, o);

          this.linearRampToValueAtTime(this._toType(r), o);
        }

        return this;
      }

      setValueAtTime(t, e) {
        const n = this.toSeconds(e);
        super.setValueAtTime(t, e);

        const s = this._events.get(n),
              i = this._events.previousEvent(s),
              o = this._getTicksUntilEvent(i, n);

        return s.ticks = Math.max(o, 0), this;
      }

      linearRampToValueAtTime(t, e) {
        const n = this.toSeconds(e);
        super.linearRampToValueAtTime(t, e);

        const s = this._events.get(n),
              i = this._events.previousEvent(s),
              o = this._getTicksUntilEvent(i, n);

        return s.ticks = Math.max(o, 0), this;
      }

      exponentialRampToValueAtTime(t, e) {
        e = this.toSeconds(e);

        const n = this._fromType(t),
              s = this._events.get(e),
              i = Math.round(Math.max(10 * (e - s.time), 1)),
              o = (e - s.time) / i;

        for (let t = 0; t <= i; t++) {
          const i = o * t + s.time,
                r = this._exponentialInterpolate(s.time, s.value, e, n, i);

          this.linearRampToValueAtTime(this._toType(r), i);
        }

        return this;
      }

      _getTicksUntilEvent(t, e) {
        if (null === t) t = {
          ticks: 0,
          time: 0,
          type: "setValueAtTime",
          value: 0
        };else if (p(t.ticks)) {
          const e = this._events.previousEvent(t);

          t.ticks = this._getTicksUntilEvent(e, t.time);
        }

        const n = this._fromType(this.getValueAtTime(t.time));

        let s = this._fromType(this.getValueAtTime(e));

        const i = this._events.get(e);

        return i && i.time === e && "setValueAtTime" === i.type && (s = this._fromType(this.getValueAtTime(e - this.sampleTime))), .5 * (e - t.time) * (n + s) + t.ticks;
      }

      getTicksAtTime(t) {
        const e = this.toSeconds(t),
              n = this._events.get(e);

        return Math.max(this._getTicksUntilEvent(n, e), 0);
      }

      getDurationOfTicks(t, e) {
        const n = this.toSeconds(e),
              s = this.getTicksAtTime(e);
        return this.getTimeOfTick(s + t) - n;
      }

      getTimeOfTick(t) {
        const e = this._events.get(t, "ticks"),
              n = this._events.getAfter(t, "ticks");

        if (e && e.ticks === t) return e.time;

        if (e && n && "linearRampToValueAtTime" === n.type && e.value !== n.value) {
          const s = this._fromType(this.getValueAtTime(e.time)),
                i = (this._fromType(this.getValueAtTime(n.time)) - s) / (n.time - e.time),
                o = Math.sqrt(Math.pow(s, 2) - 2 * i * (e.ticks - t)),
                r = (-s + o) / i,
                a = (-s - o) / i;

          return (r > 0 ? r : a) + e.time;
        }

        return e ? 0 === e.value ? 1 / 0 : e.time + (t - e.ticks) / e.value : t / this._initialValue;
      }

      ticksToTime(t, e) {
        return this.getDurationOfTicks(t, e);
      }

      timeToTicks(t, e) {
        const n = this.toSeconds(e),
              s = this.toSeconds(t),
              i = this.getTicksAtTime(n);
        return this.getTicksAtTime(n + s) - i;
      }

      _fromType(t) {
        return "bpm" === this.units && this.multiplier ? 1 / (60 / t / this.multiplier) : super._fromType(t);
      }

      _toType(t) {
        return "bpm" === this.units && this.multiplier ? t / this.multiplier * 60 : super._toType(t);
      }

      get multiplier() {
        return this._multiplier;
      }

      set multiplier(t) {
        const e = this.value;
        this._multiplier = t, this.cancelScheduledValues(0), this.setValueAtTime(e, 0);
      }

    }

    class Ft extends Rt {
      constructor() {
        super(q(Ft.getDefaults(), arguments, ["value"])), this.name = "TickSignal";
        const t = q(Ft.getDefaults(), arguments, ["value"]);
        this.input = this._param = new It({
          context: this.context,
          convert: t.convert,
          multiplier: t.multiplier,
          param: this._constantSource.offset,
          units: t.units,
          value: t.value
        });
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          multiplier: 1,
          units: "hertz",
          value: 1
        });
      }

      ticksToTime(t, e) {
        return this._param.ticksToTime(t, e);
      }

      timeToTicks(t, e) {
        return this._param.timeToTicks(t, e);
      }

      getTimeOfTick(t) {
        return this._param.getTimeOfTick(t);
      }

      getDurationOfTicks(t, e) {
        return this._param.getDurationOfTicks(t, e);
      }

      getTicksAtTime(t) {
        return this._param.getTicksAtTime(t);
      }

      get multiplier() {
        return this._param.multiplier;
      }

      set multiplier(t) {
        this._param.multiplier = t;
      }

      dispose() {
        return super.dispose(), this._param.dispose(), this;
      }

    }

    class Vt extends Tt {
      constructor() {
        super(q(Vt.getDefaults(), arguments, ["frequency"])), this.name = "TickSource", this._state = new Ot(), this._tickOffset = new W();
        const t = q(Vt.getDefaults(), arguments, ["frequency"]);
        this.frequency = new Ft({
          context: this.context,
          units: t.units,
          value: t.frequency
        }), $(this, "frequency"), this._state.setStateAtTime("stopped", 0), this.setTicksAtTime(0, 0);
      }

      static getDefaults() {
        return Object.assign({
          frequency: 1,
          units: "hertz"
        }, Tt.getDefaults());
      }

      get state() {
        return this.getStateAtTime(this.now());
      }

      start(t, e) {
        const n = this.toSeconds(t);
        return "started" !== this._state.getValueAtTime(n) && (this._state.setStateAtTime("started", n), f(e) && this.setTicksAtTime(e, n)), this;
      }

      stop(t) {
        const e = this.toSeconds(t);

        if ("stopped" === this._state.getValueAtTime(e)) {
          const t = this._state.get(e);

          t && t.time > 0 && (this._tickOffset.cancel(t.time), this._state.cancel(t.time));
        }

        return this._state.cancel(e), this._state.setStateAtTime("stopped", e), this.setTicksAtTime(0, e), this;
      }

      pause(t) {
        const e = this.toSeconds(t);
        return "started" === this._state.getValueAtTime(e) && this._state.setStateAtTime("paused", e), this;
      }

      cancel(t) {
        return t = this.toSeconds(t), this._state.cancel(t), this._tickOffset.cancel(t), this;
      }

      getTicksAtTime(t) {
        const e = this.toSeconds(t),
              n = this._state.getLastState("stopped", e),
              s = {
          state: "paused",
          time: e
        };

        this._state.add(s);

        let i = n,
            o = 0;
        return this._state.forEachBetween(n.time, e + this.sampleTime, t => {
          let e = i.time;

          const n = this._tickOffset.get(t.time);

          n && n.time >= i.time && (o = n.ticks, e = n.time), "started" === i.state && "started" !== t.state && (o += this.frequency.getTicksAtTime(t.time) - this.frequency.getTicksAtTime(e)), i = t;
        }), this._state.remove(s), o;
      }

      get ticks() {
        return this.getTicksAtTime(this.now());
      }

      set ticks(t) {
        this.setTicksAtTime(t, this.now());
      }

      get seconds() {
        return this.getSecondsAtTime(this.now());
      }

      set seconds(t) {
        const e = this.now(),
              n = this.frequency.timeToTicks(t, e);
        this.setTicksAtTime(n, e);
      }

      getSecondsAtTime(t) {
        t = this.toSeconds(t);

        const e = this._state.getLastState("stopped", t),
              n = {
          state: "paused",
          time: t
        };

        this._state.add(n);

        let s = e,
            i = 0;
        return this._state.forEachBetween(e.time, t + this.sampleTime, t => {
          let e = s.time;

          const n = this._tickOffset.get(t.time);

          n && n.time >= s.time && (i = n.seconds, e = n.time), "started" === s.state && "started" !== t.state && (i += t.time - e), s = t;
        }), this._state.remove(n), i;
      }

      setTicksAtTime(t, e) {
        return e = this.toSeconds(e), this._tickOffset.cancel(e), this._tickOffset.add({
          seconds: this.frequency.getDurationOfTicks(t, e),
          ticks: t,
          time: e
        }), this;
      }

      getStateAtTime(t) {
        return t = this.toSeconds(t), this._state.getValueAtTime(t);
      }

      getTimeOfTick(t, e = this.now()) {
        const n = this._tickOffset.get(e),
              s = this._state.get(e),
              i = Math.max(n.time, s.time),
              o = this.frequency.getTicksAtTime(i) + t - n.ticks;

        return this.frequency.getTimeOfTick(o);
      }

      forEachTickBetween(t, e, n) {
        let s = this._state.get(t);

        this._state.forEachBetween(t, e, e => {
          s && "started" === s.state && "started" !== e.state && this.forEachTickBetween(Math.max(s.time, t), e.time - this.sampleTime, n), s = e;
        });

        let i = null;

        if (s && "started" === s.state) {
          const o = Math.max(s.time, t),
                r = this.frequency.getTicksAtTime(o),
                a = r - this.frequency.getTicksAtTime(s.time);
          let c = Math.ceil(a) - a;
          c = z(c, 1) ? 0 : c;
          let u = this.frequency.getTimeOfTick(r + c);

          for (; u < e;) {
            try {
              n(u, Math.round(this.getTicksAtTime(u)));
            } catch (t) {
              i = t;
              break;
            }

            u += this.frequency.getDurationOfTicks(1, u);
          }
        }

        if (i) throw i;
        return this;
      }

      dispose() {
        return super.dispose(), this._state.dispose(), this._tickOffset.dispose(), this.frequency.dispose(), this;
      }

    }

    class Nt extends Tt {
      constructor() {
        super(q(Nt.getDefaults(), arguments, ["callback", "frequency"])), this.name = "Clock", this.callback = K, this._lastUpdate = 0, this._state = new Ot("stopped"), this._boundLoop = this._loop.bind(this);
        const t = q(Nt.getDefaults(), arguments, ["callback", "frequency"]);
        this.callback = t.callback, this._tickSource = new Vt({
          context: this.context,
          frequency: t.frequency,
          units: t.units
        }), this._lastUpdate = 0, this.frequency = this._tickSource.frequency, $(this, "frequency"), this._state.setStateAtTime("stopped", 0), this.context.on("tick", this._boundLoop);
      }

      static getDefaults() {
        return Object.assign(Tt.getDefaults(), {
          callback: K,
          frequency: 1,
          units: "hertz"
        });
      }

      get state() {
        return this._state.getValueAtTime(this.now());
      }

      start(t, e) {
        c(this.context);
        const n = this.toSeconds(t);
        return this.log("start", n), "started" !== this._state.getValueAtTime(n) && (this._state.setStateAtTime("started", n), this._tickSource.start(n, e), n < this._lastUpdate && this.emit("start", n, e)), this;
      }

      stop(t) {
        const e = this.toSeconds(t);
        return this.log("stop", e), this._state.cancel(e), this._state.setStateAtTime("stopped", e), this._tickSource.stop(e), e < this._lastUpdate && this.emit("stop", e), this;
      }

      pause(t) {
        const e = this.toSeconds(t);
        return "started" === this._state.getValueAtTime(e) && (this._state.setStateAtTime("paused", e), this._tickSource.pause(e), e < this._lastUpdate && this.emit("pause", e)), this;
      }

      get ticks() {
        return Math.ceil(this.getTicksAtTime(this.now()));
      }

      set ticks(t) {
        this._tickSource.ticks = t;
      }

      get seconds() {
        return this._tickSource.seconds;
      }

      set seconds(t) {
        this._tickSource.seconds = t;
      }

      getSecondsAtTime(t) {
        return this._tickSource.getSecondsAtTime(t);
      }

      setTicksAtTime(t, e) {
        return this._tickSource.setTicksAtTime(t, e), this;
      }

      getTimeOfTick(t, e = this.now()) {
        return this._tickSource.getTimeOfTick(t, e);
      }

      getTicksAtTime(t) {
        return this._tickSource.getTicksAtTime(t);
      }

      nextTickTime(t, e) {
        const n = this.toSeconds(e),
              s = this.getTicksAtTime(n);
        return this._tickSource.getTimeOfTick(s + t, n);
      }

      _loop() {
        const t = this._lastUpdate,
              e = this.now();
        this._lastUpdate = e, this.log("loop", t, e), t !== e && (this._state.forEachBetween(t, e, t => {
          switch (t.state) {
            case "started":
              const e = this._tickSource.getTicksAtTime(t.time);

              this.emit("start", t.time, e);
              break;

            case "stopped":
              0 !== t.time && this.emit("stop", t.time);
              break;

            case "paused":
              this.emit("pause", t.time);
          }
        }), this._tickSource.forEachTickBetween(t, e, (t, e) => {
          this.callback(t, e);
        }));
      }

      getStateAtTime(t) {
        const e = this.toSeconds(t);
        return this._state.getValueAtTime(e);
      }

      dispose() {
        return super.dispose(), this.context.off("tick", this._boundLoop), this._tickSource.dispose(), this._state.dispose(), this;
      }

    }

    Z.mixin(Nt);

    class Pt extends V {
      constructor(t) {
        super(), this.name = "TimelineValue", this._timeline = new W({
          memory: 10
        }), this._initialValue = t;
      }

      set(t, e) {
        return this._timeline.add({
          value: t,
          time: e
        }), this;
      }

      get(t) {
        const e = this._timeline.get(t);

        return e ? e.value : this._initialValue;
      }

    }

    class Lt extends xt {
      constructor() {
        super(...arguments), this.name = "Ticks", this.defaultUnits = "i";
      }

      _now() {
        return this.context.transport.ticks;
      }

      _beatsToUnits(t) {
        return this._getPPQ() * t;
      }

      _secondsToUnits(t) {
        return Math.floor(t / (60 / this._getBpm()) * this._getPPQ());
      }

      _ticksToUnits(t) {
        return t;
      }

      toTicks() {
        return this.valueOf();
      }

      toSeconds() {
        return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
      }

    }

    function zt(t, e) {
      return new Lt(it(), t, e);
    }

    class Bt extends V {
      constructor() {
        super(...arguments), this.name = "IntervalTimeline", this._root = null, this._length = 0;
      }

      add(t) {
        r(f(t.time), "Events must have a time property"), r(f(t.duration), "Events must have a duration parameter"), t.time = t.time.valueOf();
        let e = new Wt(t.time, t.time + t.duration, t);

        for (null === this._root ? this._root = e : this._root.insert(e), this._length++; null !== e;) e.updateHeight(), e.updateMax(), this._rebalance(e), e = e.parent;

        return this;
      }

      remove(t) {
        if (null !== this._root) {
          const e = [];

          this._root.search(t.time, e);

          for (const n of e) if (n.event === t) {
            this._removeNode(n), this._length--;
            break;
          }
        }

        return this;
      }

      get length() {
        return this._length;
      }

      cancel(t) {
        return this.forEachFrom(t, t => this.remove(t)), this;
      }

      _setRoot(t) {
        this._root = t, null !== this._root && (this._root.parent = null);
      }

      _replaceNodeInParent(t, e) {
        null !== t.parent ? (t.isLeftChild() ? t.parent.left = e : t.parent.right = e, this._rebalance(t.parent)) : this._setRoot(e);
      }

      _removeNode(t) {
        if (null === t.left && null === t.right) this._replaceNodeInParent(t, null);else if (null === t.right) this._replaceNodeInParent(t, t.left);else if (null === t.left) this._replaceNodeInParent(t, t.right);else {
          let e,
              n = null;
          if (t.getBalance() > 0) {
            if (null === t.left.right) e = t.left, e.right = t.right, n = e;else {
              for (e = t.left.right; null !== e.right;) e = e.right;

              e.parent && (e.parent.right = e.left, n = e.parent, e.left = t.left, e.right = t.right);
            }
          } else if (null === t.right.left) e = t.right, e.left = t.left, n = e;else {
            for (e = t.right.left; null !== e.left;) e = e.left;

            e.parent && (e.parent.left = e.right, n = e.parent, e.left = t.left, e.right = t.right);
          }
          null !== t.parent ? t.isLeftChild() ? t.parent.left = e : t.parent.right = e : this._setRoot(e), n && this._rebalance(n);
        }
        t.dispose();
      }

      _rotateLeft(t) {
        const e = t.parent,
              n = t.isLeftChild(),
              s = t.right;
        s && (t.right = s.left, s.left = t), null !== e ? n ? e.left = s : e.right = s : this._setRoot(s);
      }

      _rotateRight(t) {
        const e = t.parent,
              n = t.isLeftChild(),
              s = t.left;
        s && (t.left = s.right, s.right = t), null !== e ? n ? e.left = s : e.right = s : this._setRoot(s);
      }

      _rebalance(t) {
        const e = t.getBalance();
        e > 1 && t.left ? t.left.getBalance() < 0 ? this._rotateLeft(t.left) : this._rotateRight(t) : e < -1 && t.right && (t.right.getBalance() > 0 ? this._rotateRight(t.right) : this._rotateLeft(t));
      }

      get(t) {
        if (null !== this._root) {
          const e = [];

          if (this._root.search(t, e), e.length > 0) {
            let t = e[0];

            for (let n = 1; n < e.length; n++) e[n].low > t.low && (t = e[n]);

            return t.event;
          }
        }

        return null;
      }

      forEach(t) {
        if (null !== this._root) {
          const e = [];
          this._root.traverse(t => e.push(t)), e.forEach(e => {
            e.event && t(e.event);
          });
        }

        return this;
      }

      forEachAtTime(t, e) {
        if (null !== this._root) {
          const n = [];
          this._root.search(t, n), n.forEach(t => {
            t.event && e(t.event);
          });
        }

        return this;
      }

      forEachFrom(t, e) {
        if (null !== this._root) {
          const n = [];
          this._root.searchAfter(t, n), n.forEach(t => {
            t.event && e(t.event);
          });
        }

        return this;
      }

      dispose() {
        return super.dispose(), null !== this._root && this._root.traverse(t => t.dispose()), this._root = null, this;
      }

    }

    class Wt {
      constructor(t, e, n) {
        this._left = null, this._right = null, this.parent = null, this.height = 0, this.event = n, this.low = t, this.high = e, this.max = this.high;
      }

      insert(t) {
        t.low <= this.low ? null === this.left ? this.left = t : this.left.insert(t) : null === this.right ? this.right = t : this.right.insert(t);
      }

      search(t, e) {
        t > this.max || (null !== this.left && this.left.search(t, e), this.low <= t && this.high > t && e.push(this), this.low > t || null !== this.right && this.right.search(t, e));
      }

      searchAfter(t, e) {
        this.low >= t && (e.push(this), null !== this.left && this.left.searchAfter(t, e)), null !== this.right && this.right.searchAfter(t, e);
      }

      traverse(t) {
        t(this), null !== this.left && this.left.traverse(t), null !== this.right && this.right.traverse(t);
      }

      updateHeight() {
        null !== this.left && null !== this.right ? this.height = Math.max(this.left.height, this.right.height) + 1 : null !== this.right ? this.height = this.right.height + 1 : null !== this.left ? this.height = this.left.height + 1 : this.height = 0;
      }

      updateMax() {
        this.max = this.high, null !== this.left && (this.max = Math.max(this.max, this.left.max)), null !== this.right && (this.max = Math.max(this.max, this.right.max));
      }

      getBalance() {
        let t = 0;
        return null !== this.left && null !== this.right ? t = this.left.height - this.right.height : null !== this.left ? t = this.left.height + 1 : null !== this.right && (t = -(this.right.height + 1)), t;
      }

      isLeftChild() {
        return null !== this.parent && this.parent.left === this;
      }

      get left() {
        return this._left;
      }

      set left(t) {
        this._left = t, null !== t && (t.parent = this), this.updateHeight(), this.updateMax();
      }

      get right() {
        return this._right;
      }

      set right(t) {
        this._right = t, null !== t && (t.parent = this), this.updateHeight(), this.updateMax();
      }

      dispose() {
        this.parent = null, this._left = null, this._right = null, this.event = null;
      }

    }

    class Ut {
      constructor(t, e) {
        this.id = Ut._eventId++;
        const n = Object.assign(Ut.getDefaults(), e);
        this.transport = t, this.callback = n.callback, this._once = n.once, this.time = n.time;
      }

      static getDefaults() {
        return {
          callback: K,
          once: !1,
          time: 0
        };
      }

      invoke(t) {
        this.callback && (this.callback(t), this._once && this.transport.clear(this.id));
      }

      dispose() {
        return this.callback = void 0, this;
      }

    }

    Ut._eventId = 0;

    class Gt extends Ut {
      constructor(t, e) {
        super(t, e), this._currentId = -1, this._nextId = -1, this._nextTick = this.time, this._boundRestart = this._restart.bind(this);
        const n = Object.assign(Gt.getDefaults(), e);
        this.duration = new Lt(t.context, n.duration).valueOf(), this._interval = new Lt(t.context, n.interval).valueOf(), this._nextTick = n.time, this.transport.on("start", this._boundRestart), this.transport.on("loopStart", this._boundRestart), this.context = this.transport.context, this._restart();
      }

      static getDefaults() {
        return Object.assign({}, Ut.getDefaults(), {
          duration: 1 / 0,
          interval: 1,
          once: !1
        });
      }

      invoke(t) {
        this._createEvents(t), super.invoke(t);
      }

      _createEvents(t) {
        const e = this.transport.getTicksAtTime(t);
        e >= this.time && e >= this._nextTick && this._nextTick + this._interval < this.time + this.duration && (this._nextTick += this._interval, this._currentId = this._nextId, this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new Lt(this.context, this._nextTick).toSeconds()));
      }

      _restart(t) {
        this.transport.clear(this._currentId), this.transport.clear(this._nextId), this._nextTick = this.time;
        const e = this.transport.getTicksAtTime(t);
        e > this.time && (this._nextTick = this.time + Math.ceil((e - this.time) / this._interval) * this._interval), this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new Lt(this.context, this._nextTick).toSeconds()), this._nextTick += this._interval, this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new Lt(this.context, this._nextTick).toSeconds());
      }

      dispose() {
        return super.dispose(), this.transport.clear(this._currentId), this.transport.clear(this._nextId), this.transport.off("start", this._boundRestart), this.transport.off("loopStart", this._boundRestart), this;
      }

    }

    class Yt extends Tt {
      constructor() {
        super(q(Yt.getDefaults(), arguments)), this.name = "Transport", this._loop = new Pt(!1), this._loopStart = 0, this._loopEnd = 0, this._scheduledEvents = {}, this._timeline = new W(), this._repeatedEvents = new Bt(), this._syncedSignals = [], this._swingAmount = 0;
        const t = q(Yt.getDefaults(), arguments);
        this._ppq = t.ppq, this._clock = new Nt({
          callback: this._processTick.bind(this),
          context: this.context,
          frequency: 0,
          units: "bpm"
        }), this._bindClockEvents(), this.bpm = this._clock.frequency, this._clock.frequency.multiplier = t.ppq, this.bpm.setValueAtTime(t.bpm, 0), $(this, "bpm"), this._timeSignature = t.timeSignature, this._swingTicks = t.ppq / 2;
      }

      static getDefaults() {
        return Object.assign(Tt.getDefaults(), {
          bpm: 120,
          loopEnd: "4m",
          loopStart: 0,
          ppq: 192,
          swing: 0,
          swingSubdivision: "8n",
          timeSignature: 4
        });
      }

      _processTick(t, e) {
        if (this._swingAmount > 0 && e % this._ppq != 0 && e % (2 * this._swingTicks) != 0) {
          const n = e % (2 * this._swingTicks) / (2 * this._swingTicks),
                s = Math.sin(n * Math.PI) * this._swingAmount;

          t += new Lt(this.context, 2 * this._swingTicks / 3).toSeconds() * s;
        }

        this._loop.get(t) && e >= this._loopEnd && (this.emit("loopEnd", t), this._clock.setTicksAtTime(this._loopStart, t), e = this._loopStart, this.emit("loopStart", t, this._clock.getSecondsAtTime(t)), this.emit("loop", t)), this._timeline.forEachAtTime(e, e => e.invoke(t));
      }

      schedule(t, e) {
        const n = new Ut(this, {
          callback: t,
          time: new xt(this.context, e).toTicks()
        });
        return this._addEvent(n, this._timeline);
      }

      scheduleRepeat(t, e, n, s = 1 / 0) {
        const i = new Gt(this, {
          callback: t,
          duration: new _t(this.context, s).toTicks(),
          interval: new _t(this.context, e).toTicks(),
          time: new xt(this.context, n).toTicks()
        });
        return this._addEvent(i, this._repeatedEvents);
      }

      scheduleOnce(t, e) {
        const n = new Ut(this, {
          callback: t,
          once: !0,
          time: new xt(this.context, e).toTicks()
        });
        return this._addEvent(n, this._timeline);
      }

      clear(t) {
        if (this._scheduledEvents.hasOwnProperty(t)) {
          const e = this._scheduledEvents[t.toString()];

          e.timeline.remove(e.event), e.event.dispose(), delete this._scheduledEvents[t.toString()];
        }

        return this;
      }

      _addEvent(t, e) {
        return this._scheduledEvents[t.id.toString()] = {
          event: t,
          timeline: e
        }, e.add(t), t.id;
      }

      cancel(t = 0) {
        const e = this.toTicks(t);
        return this._timeline.forEachFrom(e, t => this.clear(t.id)), this._repeatedEvents.forEachFrom(e, t => this.clear(t.id)), this;
      }

      _bindClockEvents() {
        this._clock.on("start", (t, e) => {
          e = new Lt(this.context, e).toSeconds(), this.emit("start", t, e);
        }), this._clock.on("stop", t => {
          this.emit("stop", t);
        }), this._clock.on("pause", t => {
          this.emit("pause", t);
        });
      }

      get state() {
        return this._clock.getStateAtTime(this.now());
      }

      start(t, e) {
        let n;
        return f(e) && (n = this.toTicks(e)), this._clock.start(t, n), this;
      }

      stop(t) {
        return this._clock.stop(t), this;
      }

      pause(t) {
        return this._clock.pause(t), this;
      }

      toggle(t) {
        return t = this.toSeconds(t), "started" !== this._clock.getStateAtTime(t) ? this.start(t) : this.stop(t), this;
      }

      get timeSignature() {
        return this._timeSignature;
      }

      set timeSignature(t) {
        y(t) && (t = t[0] / t[1] * 4), this._timeSignature = t;
      }

      get loopStart() {
        return new _t(this.context, this._loopStart, "i").toSeconds();
      }

      set loopStart(t) {
        this._loopStart = this.toTicks(t);
      }

      get loopEnd() {
        return new _t(this.context, this._loopEnd, "i").toSeconds();
      }

      set loopEnd(t) {
        this._loopEnd = this.toTicks(t);
      }

      get loop() {
        return this._loop.get(this.now());
      }

      set loop(t) {
        this._loop.set(t, this.now());
      }

      setLoopPoints(t, e) {
        return this.loopStart = t, this.loopEnd = e, this;
      }

      get swing() {
        return this._swingAmount;
      }

      set swing(t) {
        this._swingAmount = t;
      }

      get swingSubdivision() {
        return new Lt(this.context, this._swingTicks).toNotation();
      }

      set swingSubdivision(t) {
        this._swingTicks = this.toTicks(t);
      }

      get position() {
        const t = this.now(),
              e = this._clock.getTicksAtTime(t);

        return new Lt(this.context, e).toBarsBeatsSixteenths();
      }

      set position(t) {
        const e = this.toTicks(t);
        this.ticks = e;
      }

      get seconds() {
        return this._clock.seconds;
      }

      set seconds(t) {
        const e = this.now(),
              n = this._clock.frequency.timeToTicks(t, e);

        this.ticks = n;
      }

      get progress() {
        if (this.loop) {
          const t = this.now();
          return (this._clock.getTicksAtTime(t) - this._loopStart) / (this._loopEnd - this._loopStart);
        }

        return 0;
      }

      get ticks() {
        return this._clock.ticks;
      }

      set ticks(t) {
        if (this._clock.ticks !== t) {
          const e = this.now();

          if ("started" === this.state) {
            const n = this._clock.getTicksAtTime(e),
                  s = this._clock.getTimeOfTick(Math.ceil(n));

            this.emit("stop", s), this._clock.setTicksAtTime(t, s), this.emit("start", s, this._clock.getSecondsAtTime(s));
          } else this._clock.setTicksAtTime(t, e);
        }
      }

      getTicksAtTime(t) {
        return Math.round(this._clock.getTicksAtTime(t));
      }

      getSecondsAtTime(t) {
        return this._clock.getSecondsAtTime(t);
      }

      get PPQ() {
        return this._clock.frequency.multiplier;
      }

      set PPQ(t) {
        this._clock.frequency.multiplier = t;
      }

      nextSubdivision(t) {
        if (t = this.toTicks(t), "started" !== this.state) return 0;
        {
          const e = this.now(),
                n = t - this.getTicksAtTime(e) % t;
          return this._clock.nextTickTime(n, e);
        }
      }

      syncSignal(t, e) {
        if (!e) {
          const n = this.now();

          if (0 !== t.getValueAtTime(n)) {
            const s = 1 / (60 / this.bpm.getValueAtTime(n) / this.PPQ);
            e = t.getValueAtTime(n) / s;
          } else e = 0;
        }

        const n = new Mt(e);
        return this.bpm.connect(n), n.connect(t._param), this._syncedSignals.push({
          initial: t.value,
          ratio: n,
          signal: t
        }), t.value = 0, this;
      }

      unsyncSignal(t) {
        for (let e = this._syncedSignals.length - 1; e >= 0; e--) {
          const n = this._syncedSignals[e];
          n.signal === t && (n.ratio.dispose(), n.signal.value = n.initial, this._syncedSignals.splice(e, 1));
        }

        return this;
      }

      dispose() {
        return super.dispose(), this._clock.dispose(), J(this, "bpm"), this._timeline.dispose(), this._repeatedEvents.dispose(), this;
      }

    }

    Z.mixin(Yt), G(t => {
      t.transport = new Yt({
        context: t
      });
    }), Q(t => {
      t.transport.dispose();
    });

    class Qt extends Ct {
      constructor() {
        super(q(Qt.getDefaults(), arguments, ["delayTime", "maxDelay"])), this.name = "Delay";
        const t = q(Qt.getDefaults(), arguments, ["delayTime", "maxDelay"]),
              e = this.toSeconds(t.maxDelay);
        this._maxDelay = Math.max(e, this.toSeconds(t.delayTime)), this._delayNode = this.input = this.output = this.context.createDelay(e), this.delayTime = new St({
          context: this.context,
          param: this._delayNode.delayTime,
          units: "time",
          value: t.delayTime,
          minValue: 0,
          maxValue: this.maxDelay
        }), $(this, "delayTime");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          delayTime: 0,
          maxDelay: 1
        });
      }

      get maxDelay() {
        return this._maxDelay;
      }

      dispose() {
        return super.dispose(), this._delayNode.disconnect(), this.delayTime.dispose(), this;
      }

    }

    class Zt extends Ct {
      constructor() {
        super(q(Zt.getDefaults(), arguments, ["volume"])), this.name = "Volume";
        const t = q(Zt.getDefaults(), arguments, ["volume"]);
        this.input = this.output = new Mt({
          context: this.context,
          gain: t.volume,
          units: "decibels"
        }), this.volume = this.output.gain, $(this, "volume"), this._unmutedVolume = t.volume, this.mute = t.mute;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mute: !1,
          volume: 0
        });
      }

      get mute() {
        return this.volume.value === -1 / 0;
      }

      set mute(t) {
        !this.mute && t ? (this._unmutedVolume = this.volume.value, this.volume.value = -1 / 0) : this.mute && !t && (this.volume.value = this._unmutedVolume);
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this.volume.dispose(), this;
      }

    }

    class Xt extends Ct {
      constructor() {
        super(q(Xt.getDefaults(), arguments)), this.name = "Destination", this.input = new Zt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this.volume = this.input.volume;
        const t = q(Xt.getDefaults(), arguments);
        kt(this.input, this.output, this.context.rawContext.destination), this.mute = t.mute, this._internalChannels = [this.input, this.context.rawContext.destination, this.output];
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mute: !1,
          volume: 0
        });
      }

      get mute() {
        return this.input.mute;
      }

      set mute(t) {
        this.input.mute = t;
      }

      chain(...t) {
        return this.input.disconnect(), t.unshift(this.input), t.push(this.output), kt(...t), this;
      }

      get maxChannelCount() {
        return this.context.rawContext.destination.maxChannelCount;
      }

      dispose() {
        return super.dispose(), this.volume.dispose(), this;
      }

    }

    function Ht(t, e, n = 2, s = it().sampleRate) {
      return S(this, void 0, void 0, function* () {
        const i = it(),
              o = new et(n, e, s);
        ot(o), yield t(o);
        const r = o.render();
        ot(i);
        const a = yield r;
        return new tt(a);
      });
    }

    G(t => {
      t.destination = new Xt({
        context: t
      });
    }), Q(t => {
      t.destination.dispose();
    });

    class $t extends V {
      constructor() {
        super(), this.name = "ToneAudioBuffers", this._buffers = new Map(), this._loadingCount = 0;
        const t = q($t.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
        this.baseUrl = t.baseUrl, Object.keys(t.urls).forEach(e => {
          this._loadingCount++;
          const n = t.urls[e];
          this.add(e, n, this._bufferLoaded.bind(this, t.onload), t.onerror);
        });
      }

      static getDefaults() {
        return {
          baseUrl: "",
          onerror: K,
          onload: K,
          urls: {}
        };
      }

      has(t) {
        return this._buffers.has(t.toString());
      }

      get(t) {
        return r(this.has(t), "ToneAudioBuffers has no buffer named: " + t), this._buffers.get(t.toString());
      }

      _bufferLoaded(t) {
        this._loadingCount--, 0 === this._loadingCount && t && t();
      }

      get loaded() {
        return Array.from(this._buffers).every(([t, e]) => e.loaded);
      }

      add(t, e, n = K, s = K) {
        return b(e) ? this._buffers.set(t.toString(), new tt(this.baseUrl + e, n, s)) : this._buffers.set(t.toString(), new tt(e, n, s)), this;
      }

      dispose() {
        return super.dispose(), this._buffers.forEach(t => t.dispose()), this._buffers.clear(), this;
      }

    }

    class Jt extends gt {
      constructor() {
        super(...arguments), this.name = "MidiClass", this.defaultUnits = "midi";
      }

      _frequencyToUnits(t) {
        return lt(super._frequencyToUnits(t));
      }

      _ticksToUnits(t) {
        return lt(super._ticksToUnits(t));
      }

      _beatsToUnits(t) {
        return lt(super._beatsToUnits(t));
      }

      _secondsToUnits(t) {
        return lt(super._secondsToUnits(t));
      }

      toMidi() {
        return this.valueOf();
      }

      toFrequency() {
        return pt(this.toMidi());
      }

      transpose(t) {
        return new Jt(this.context, this.toMidi() + t);
      }

    }

    function Kt(t, e) {
      return new Jt(it(), t, e);
    }

    class te extends Tt {
      constructor() {
        super(...arguments), this.name = "Draw", this.expiration = .25, this.anticipation = .008, this._events = new W(), this._boundDrawLoop = this._drawLoop.bind(this), this._animationFrame = -1;
      }

      schedule(t, e) {
        return this._events.add({
          callback: t,
          time: this.toSeconds(e)
        }), 1 === this._events.length && (this._animationFrame = requestAnimationFrame(this._boundDrawLoop)), this;
      }

      cancel(t) {
        return this._events.cancel(this.toSeconds(t)), this;
      }

      _drawLoop() {
        const t = this.context.currentTime;

        for (; this._events.length && this._events.peek().time - this.anticipation <= t;) {
          const e = this._events.shift();

          e && t - e.time <= this.expiration && e.callback();
        }

        this._events.length > 0 && (this._animationFrame = requestAnimationFrame(this._boundDrawLoop));
      }

      dispose() {
        return super.dispose(), this._events.dispose(), cancelAnimationFrame(this._animationFrame), this;
      }

    }

    G(t => {
      t.draw = new te({
        context: t
      });
    }), Q(t => {
      t.draw.dispose();
    });
    var ee = n(515);

    class ne extends Ct {
      constructor(t) {
        super(t), this.input = void 0, this._state = new Ot("stopped"), this._synced = !1, this._scheduled = [], this._syncedStart = K, this._syncedStop = K, this._state.memory = 100, this._state.increasing = !0, this._volume = this.output = new Zt({
          context: this.context,
          mute: t.mute,
          volume: t.volume
        }), this.volume = this._volume.volume, $(this, "volume"), this.onstop = t.onstop;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mute: !1,
          onstop: K,
          volume: 0
        });
      }

      get state() {
        return this._synced ? "started" === this.context.transport.state ? this._state.getValueAtTime(this.context.transport.seconds) : "stopped" : this._state.getValueAtTime(this.now());
      }

      get mute() {
        return this._volume.mute;
      }

      set mute(t) {
        this._volume.mute = t;
      }

      _clampToCurrentTime(t) {
        return this._synced ? t : Math.max(t, this.context.currentTime);
      }

      start(t, e, n) {
        let s = p(t) && this._synced ? this.context.transport.seconds : this.toSeconds(t);
        if (s = this._clampToCurrentTime(s), this._synced || "started" !== this._state.getValueAtTime(s)) {
          if (this.log("start", s), this._state.setStateAtTime("started", s), this._synced) {
            const t = this._state.get(s);

            t && (t.offset = this.toSeconds(I(e, 0)), t.duration = n ? this.toSeconds(n) : void 0);
            const i = this.context.transport.schedule(t => {
              this._start(t, e, n);
            }, s);
            this._scheduled.push(i), "started" === this.context.transport.state && this.context.transport.getSecondsAtTime(this.immediate()) > s && this._syncedStart(this.now(), this.context.transport.seconds);
          } else c(this.context), this._start(s, e, n);
        } else r(N(s, this._state.get(s).time), "Start time must be strictly greater than previous start time"), this._state.cancel(s), this._state.setStateAtTime("started", s), this.log("restart", s), this.restart(s, e, n);
        return this;
      }

      stop(t) {
        let e = p(t) && this._synced ? this.context.transport.seconds : this.toSeconds(t);

        if (e = this._clampToCurrentTime(e), "started" === this._state.getValueAtTime(e) || f(this._state.getNextState("started", e))) {
          if (this.log("stop", e), this._synced) {
            const t = this.context.transport.schedule(this._stop.bind(this), e);

            this._scheduled.push(t);
          } else this._stop(e);

          this._state.cancel(e), this._state.setStateAtTime("stopped", e);
        }

        return this;
      }

      restart(t, e, n) {
        return t = this.toSeconds(t), "started" === this._state.getValueAtTime(t) && (this._state.cancel(t), this._restart(t, e, n)), this;
      }

      sync() {
        return this._synced || (this._synced = !0, this._syncedStart = (t, e) => {
          if (e > 0) {
            const n = this._state.get(e);

            if (n && "started" === n.state && n.time !== e) {
              const s = e - this.toSeconds(n.time);
              let i;
              n.duration && (i = this.toSeconds(n.duration) - s), this._start(t, this.toSeconds(n.offset) + s, i);
            }
          }
        }, this._syncedStop = t => {
          const e = this.context.transport.getSecondsAtTime(Math.max(t - this.sampleTime, 0));
          "started" === this._state.getValueAtTime(e) && this._stop(t);
        }, this.context.transport.on("start", this._syncedStart), this.context.transport.on("loopStart", this._syncedStart), this.context.transport.on("stop", this._syncedStop), this.context.transport.on("pause", this._syncedStop), this.context.transport.on("loopEnd", this._syncedStop)), this;
      }

      unsync() {
        return this._synced && (this.context.transport.off("stop", this._syncedStop), this.context.transport.off("pause", this._syncedStop), this.context.transport.off("loopEnd", this._syncedStop), this.context.transport.off("start", this._syncedStart), this.context.transport.off("loopStart", this._syncedStart)), this._synced = !1, this._scheduled.forEach(t => this.context.transport.clear(t)), this._scheduled = [], this._state.cancel(0), this._stop(0), this;
      }

      dispose() {
        return super.dispose(), this.onstop = K, this.unsync(), this._volume.dispose(), this._state.dispose(), this;
      }

    }

    class se extends jt {
      constructor() {
        super(q(se.getDefaults(), arguments, ["url", "onload"])), this.name = "ToneBufferSource", this._source = this.context.createBufferSource(), this._internalChannels = [this._source], this._sourceStarted = !1, this._sourceStopped = !1;
        const t = q(se.getDefaults(), arguments, ["url", "onload"]);
        At(this._source, this._gainNode), this._source.onended = () => this._stopSource(), this.playbackRate = new St({
          context: this.context,
          param: this._source.playbackRate,
          units: "positive",
          value: t.playbackRate
        }), this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this._buffer = new tt(t.url, t.onload, t.onerror), this._internalChannels.push(this._source);
      }

      static getDefaults() {
        return Object.assign(jt.getDefaults(), {
          url: new tt(),
          loop: !1,
          loopEnd: 0,
          loopStart: 0,
          onload: K,
          onerror: K,
          playbackRate: 1
        });
      }

      get fadeIn() {
        return this._fadeIn;
      }

      set fadeIn(t) {
        this._fadeIn = t;
      }

      get fadeOut() {
        return this._fadeOut;
      }

      set fadeOut(t) {
        this._fadeOut = t;
      }

      get curve() {
        return this._curve;
      }

      set curve(t) {
        this._curve = t;
      }

      start(t, e, n, s = 1) {
        r(this.buffer.loaded, "buffer is either not set or not loaded");
        const i = this.toSeconds(t);
        this._startGain(i, s), e = this.loop ? I(e, this.loopStart) : I(e, 0);
        let o = Math.max(this.toSeconds(e), 0);

        if (this.loop) {
          const t = this.toSeconds(this.loopEnd) || this.buffer.duration,
                e = this.toSeconds(this.loopStart),
                n = t - e;
          P(o, t) && (o = (o - e) % n + e), z(o, this.buffer.duration) && (o = 0);
        }

        if (this._source.buffer = this.buffer.get(), this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration, L(o, this.buffer.duration) && (this._sourceStarted = !0, this._source.start(i, o)), f(n)) {
          let t = this.toSeconds(n);
          t = Math.max(t, 0), this.stop(i + t);
        }

        return this;
      }

      _stopSource(t) {
        !this._sourceStopped && this._sourceStarted && (this._sourceStopped = !0, this._source.stop(this.toSeconds(t)), this._onended());
      }

      get loopStart() {
        return this._source.loopStart;
      }

      set loopStart(t) {
        this._source.loopStart = this.toSeconds(t);
      }

      get loopEnd() {
        return this._source.loopEnd;
      }

      set loopEnd(t) {
        this._source.loopEnd = this.toSeconds(t);
      }

      get buffer() {
        return this._buffer;
      }

      set buffer(t) {
        this._buffer.set(t);
      }

      get loop() {
        return this._source.loop;
      }

      set loop(t) {
        this._source.loop = t, this._sourceStarted && this.cancelStop();
      }

      dispose() {
        return super.dispose(), this._source.onended = null, this._source.disconnect(), this._buffer.dispose(), this.playbackRate.dispose(), this;
      }

    }

    class ie extends ne {
      constructor() {
        super(q(ie.getDefaults(), arguments, ["type"])), this.name = "Noise", this._source = null;
        const t = q(ie.getDefaults(), arguments, ["type"]);
        this._playbackRate = t.playbackRate, this.type = t.type, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut;
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          fadeIn: 0,
          fadeOut: 0,
          playbackRate: 1,
          type: "white"
        });
      }

      get type() {
        return this._type;
      }

      set type(t) {
        if (r(t in re, "Noise: invalid type: " + t), this._type !== t && (this._type = t, "started" === this.state)) {
          const t = this.now();
          this._stop(t), this._start(t);
        }
      }

      get playbackRate() {
        return this._playbackRate;
      }

      set playbackRate(t) {
        this._playbackRate = t, this._source && (this._source.playbackRate.value = t);
      }

      _start(t) {
        const e = re[this._type];
        this._source = new se({
          url: e,
          context: this.context,
          fadeIn: this._fadeIn,
          fadeOut: this._fadeOut,
          loop: !0,
          onended: () => this.onstop(this),
          playbackRate: this._playbackRate
        }).connect(this.output), this._source.start(this.toSeconds(t), Math.random() * (e.duration - .001));
      }

      _stop(t) {
        this._source && (this._source.stop(this.toSeconds(t)), this._source = null);
      }

      get fadeIn() {
        return this._fadeIn;
      }

      set fadeIn(t) {
        this._fadeIn = t, this._source && (this._source.fadeIn = this._fadeIn);
      }

      get fadeOut() {
        return this._fadeOut;
      }

      set fadeOut(t) {
        this._fadeOut = t, this._source && (this._source.fadeOut = this._fadeOut);
      }

      _restart(t) {
        this._stop(t), this._start(t);
      }

      dispose() {
        return super.dispose(), this._source && this._source.disconnect(), this;
      }

    }

    const oe = {
      brown: null,
      pink: null,
      white: null
    },
          re = {
      get brown() {
        if (!oe.brown) {
          const t = [];

          for (let e = 0; e < 2; e++) {
            const n = new Float32Array(220500);
            t[e] = n;
            let s = 0;

            for (let t = 0; t < 220500; t++) {
              const e = 2 * Math.random() - 1;
              n[t] = (s + .02 * e) / 1.02, s = n[t], n[t] *= 3.5;
            }
          }

          oe.brown = new tt().fromArray(t);
        }

        return oe.brown;
      },

      get pink() {
        if (!oe.pink) {
          const t = [];

          for (let e = 0; e < 2; e++) {
            const n = new Float32Array(220500);
            let s, i, o, r, a, c, u;
            t[e] = n, s = i = o = r = a = c = u = 0;

            for (let t = 0; t < 220500; t++) {
              const e = 2 * Math.random() - 1;
              s = .99886 * s + .0555179 * e, i = .99332 * i + .0750759 * e, o = .969 * o + .153852 * e, r = .8665 * r + .3104856 * e, a = .55 * a + .5329522 * e, c = -.7616 * c - .016898 * e, n[t] = s + i + o + r + a + c + u + .5362 * e, n[t] *= .11, u = .115926 * e;
            }
          }

          oe.pink = new tt().fromArray(t);
        }

        return oe.pink;
      },

      get white() {
        if (!oe.white) {
          const t = [];

          for (let e = 0; e < 2; e++) {
            const n = new Float32Array(220500);
            t[e] = n;

            for (let t = 0; t < 220500; t++) n[t] = 2 * Math.random() - 1;
          }

          oe.white = new tt().fromArray(t);
        }

        return oe.white;
      }

    };

    class ae extends Ct {
      constructor() {
        super(q(ae.getDefaults(), arguments, ["volume"])), this.name = "UserMedia";
        const t = q(ae.getDefaults(), arguments, ["volume"]);
        this._volume = this.output = new Zt({
          context: this.context,
          volume: t.volume
        }), this.volume = this._volume.volume, $(this, "volume"), this.mute = t.mute;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mute: !1,
          volume: 0
        });
      }

      open(t) {
        return S(this, void 0, void 0, function* () {
          r(ae.supported, "UserMedia is not supported"), "started" === this.state && this.close();
          const e = yield ae.enumerateDevices();
          m(t) ? this._device = e[t] : (this._device = e.find(e => e.label === t || e.deviceId === t), !this._device && e.length > 0 && (this._device = e[0]), r(f(this._device), "No matching device " + t));
          const n = {
            audio: {
              echoCancellation: !1,
              sampleRate: this.context.sampleRate,
              noiseSuppression: !1,
              mozNoiseSuppression: !1
            }
          };
          this._device && (n.audio.deviceId = this._device.deviceId);
          const s = yield navigator.mediaDevices.getUserMedia(n);

          if (!this._stream) {
            this._stream = s;
            const t = this.context.createMediaStreamSource(s);
            At(t, this.output), this._mediaStream = t;
          }

          return this;
        });
      }

      close() {
        return this._stream && this._mediaStream && (this._stream.getAudioTracks().forEach(t => {
          t.stop();
        }), this._stream = void 0, this._mediaStream.disconnect(), this._mediaStream = void 0), this._device = void 0, this;
      }

      static enumerateDevices() {
        return S(this, void 0, void 0, function* () {
          return (yield navigator.mediaDevices.enumerateDevices()).filter(t => "audioinput" === t.kind);
        });
      }

      get state() {
        return this._stream && this._stream.active ? "started" : "stopped";
      }

      get deviceId() {
        return this._device ? this._device.deviceId : void 0;
      }

      get groupId() {
        return this._device ? this._device.groupId : void 0;
      }

      get label() {
        return this._device ? this._device.label : void 0;
      }

      get mute() {
        return this._volume.mute;
      }

      set mute(t) {
        this._volume.mute = t;
      }

      dispose() {
        return super.dispose(), this.close(), this._volume.dispose(), this.volume.dispose(), this;
      }

      static get supported() {
        return f(navigator.mediaDevices) && f(navigator.mediaDevices.getUserMedia);
      }

    }

    function ce(t, e) {
      return S(this, void 0, void 0, function* () {
        const n = e / t.context.sampleRate,
              s = new et(1, n, t.context.sampleRate);
        return new t.constructor(Object.assign(t.get(), {
          frequency: 2 / n,
          detune: 0,
          context: s
        })).toDestination().start(0), (yield s.render()).getChannelData(0);
      });
    }

    class ue extends jt {
      constructor() {
        super(q(ue.getDefaults(), arguments, ["frequency", "type"])), this.name = "ToneOscillatorNode", this._oscillator = this.context.createOscillator(), this._internalChannels = [this._oscillator];
        const t = q(ue.getDefaults(), arguments, ["frequency", "type"]);
        At(this._oscillator, this._gainNode), this.type = t.type, this.frequency = new St({
          context: this.context,
          param: this._oscillator.frequency,
          units: "frequency",
          value: t.frequency
        }), this.detune = new St({
          context: this.context,
          param: this._oscillator.detune,
          units: "cents",
          value: t.detune
        }), $(this, ["frequency", "detune"]);
      }

      static getDefaults() {
        return Object.assign(jt.getDefaults(), {
          detune: 0,
          frequency: 440,
          type: "sine"
        });
      }

      start(t) {
        const e = this.toSeconds(t);
        return this.log("start", e), this._startGain(e), this._oscillator.start(e), this;
      }

      _stopSource(t) {
        this._oscillator.stop(t);
      }

      setPeriodicWave(t) {
        return this._oscillator.setPeriodicWave(t), this;
      }

      get type() {
        return this._oscillator.type;
      }

      set type(t) {
        this._oscillator.type = t;
      }

      dispose() {
        return super.dispose(), "started" === this.state && this.stop(), this._oscillator.disconnect(), this.frequency.dispose(), this.detune.dispose(), this;
      }

    }

    class he extends ne {
      constructor() {
        super(q(he.getDefaults(), arguments, ["frequency", "type"])), this.name = "Oscillator", this._oscillator = null;
        const t = q(he.getDefaults(), arguments, ["frequency", "type"]);
        this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency
        }), $(this, "frequency"), this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), $(this, "detune"), this._partials = t.partials, this._partialCount = t.partialCount, this._type = t.type, t.partialCount && "custom" !== t.type && (this._type = this.baseType + t.partialCount.toString()), this.phase = t.phase;
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          detune: 0,
          frequency: 440,
          partialCount: 0,
          partials: [],
          phase: 0,
          type: "sine"
        });
      }

      _start(t) {
        const e = this.toSeconds(t),
              n = new ue({
          context: this.context,
          onended: () => this.onstop(this)
        });
        this._oscillator = n, this._wave ? this._oscillator.setPeriodicWave(this._wave) : this._oscillator.type = this._type, this._oscillator.connect(this.output), this.frequency.connect(this._oscillator.frequency), this.detune.connect(this._oscillator.detune), this._oscillator.start(e);
      }

      _stop(t) {
        const e = this.toSeconds(t);
        this._oscillator && this._oscillator.stop(e);
      }

      _restart(t) {
        const e = this.toSeconds(t);
        return this.log("restart", e), this._oscillator && this._oscillator.cancelStop(), this._state.cancel(e), this;
      }

      syncFrequency() {
        return this.context.transport.syncSignal(this.frequency), this;
      }

      unsyncFrequency() {
        return this.context.transport.unsyncSignal(this.frequency), this;
      }

      _getCachedPeriodicWave() {
        if ("custom" === this._type) {
          return he._periodicWaveCache.find(t => {
            return t.phase === this._phase && (e = t.partials, n = this._partials, e.length === n.length && e.every((t, e) => n[e] === t));
            var e, n;
          });
        }

        {
          const t = he._periodicWaveCache.find(t => t.type === this._type && t.phase === this._phase);

          return this._partialCount = t ? t.partialCount : this._partialCount, t;
        }
      }

      get type() {
        return this._type;
      }

      set type(t) {
        this._type = t;
        const e = -1 !== ["sine", "square", "sawtooth", "triangle"].indexOf(t);
        if (0 === this._phase && e) this._wave = void 0, this._partialCount = 0, null !== this._oscillator && (this._oscillator.type = t);else {
          const e = this._getCachedPeriodicWave();

          if (f(e)) {
            const {
              partials: t,
              wave: n
            } = e;
            this._wave = n, this._partials = t, null !== this._oscillator && this._oscillator.setPeriodicWave(this._wave);
          } else {
            const [e, n] = this._getRealImaginary(t, this._phase),
                  s = this.context.createPeriodicWave(e, n);

            this._wave = s, null !== this._oscillator && this._oscillator.setPeriodicWave(this._wave), he._periodicWaveCache.push({
              imag: n,
              partialCount: this._partialCount,
              partials: this._partials,
              phase: this._phase,
              real: e,
              type: this._type,
              wave: this._wave
            }), he._periodicWaveCache.length > 100 && he._periodicWaveCache.shift();
          }
        }
      }

      get baseType() {
        return this._type.replace(this.partialCount.toString(), "");
      }

      set baseType(t) {
        this.partialCount && "custom" !== this._type && "custom" !== t ? this.type = t + this.partialCount : this.type = t;
      }

      get partialCount() {
        return this._partialCount;
      }

      set partialCount(t) {
        a(t, 0);
        let e = this._type;
        const n = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);
        if (n && (e = n[1]), "custom" !== this._type) this.type = 0 === t ? e : e + t.toString();else {
          const e = new Float32Array(t);
          this._partials.forEach((t, n) => e[n] = t), this._partials = Array.from(e), this.type = this._type;
        }
      }

      _getRealImaginary(t, e) {
        let n = 2048;
        const s = new Float32Array(n),
              i = new Float32Array(n);
        let o = 1;

        if ("custom" === t) {
          if (o = this._partials.length + 1, this._partialCount = this._partials.length, n = o, 0 === this._partials.length) return [s, i];
        } else {
          const e = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);
          e ? (o = parseInt(e[2], 10) + 1, this._partialCount = parseInt(e[2], 10), t = e[1], o = Math.max(o, 2), n = o) : this._partialCount = 0, this._partials = [];
        }

        for (let r = 1; r < n; ++r) {
          const n = 2 / (r * Math.PI);
          let a;

          switch (t) {
            case "sine":
              a = r <= o ? 1 : 0, this._partials[r - 1] = a;
              break;

            case "square":
              a = 1 & r ? 2 * n : 0, this._partials[r - 1] = a;
              break;

            case "sawtooth":
              a = n * (1 & r ? 1 : -1), this._partials[r - 1] = a;
              break;

            case "triangle":
              a = 1 & r ? n * n * 2 * (r - 1 >> 1 & 1 ? -1 : 1) : 0, this._partials[r - 1] = a;
              break;

            case "custom":
              a = this._partials[r - 1];
              break;

            default:
              throw new TypeError("Oscillator: invalid type: " + t);
          }

          0 !== a ? (s[r] = -a * Math.sin(e * r), i[r] = a * Math.cos(e * r)) : (s[r] = 0, i[r] = 0);
        }

        return [s, i];
      }

      _inverseFFT(t, e, n) {
        let s = 0;
        const i = t.length;

        for (let o = 0; o < i; o++) s += t[o] * Math.cos(o * n) + e[o] * Math.sin(o * n);

        return s;
      }

      getInitialValue() {
        const [t, e] = this._getRealImaginary(this._type, 0);

        let n = 0;
        const s = 2 * Math.PI;

        for (let i = 0; i < 32; i++) n = Math.max(this._inverseFFT(t, e, i / 32 * s), n);

        return B(-this._inverseFFT(t, e, this._phase) / n, -1, 1);
      }

      get partials() {
        return this._partials.slice(0, this.partialCount);
      }

      set partials(t) {
        this._partials = t, this._partialCount = this._partials.length, t.length && (this.type = "custom");
      }

      get phase() {
        return this._phase * (180 / Math.PI);
      }

      set phase(t) {
        this._phase = t * Math.PI / 180, this.type = this._type;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), null !== this._oscillator && this._oscillator.dispose(), this._wave = void 0, this.frequency.dispose(), this.detune.dispose(), this;
      }

    }

    he._periodicWaveCache = [];

    class le extends Ct {
      constructor() {
        super(Object.assign(q(le.getDefaults(), arguments, ["context"])));
      }

      connect(t, e = 0, n = 0) {
        return qt(this, t, e, n), this;
      }

    }

    class de extends le {
      constructor() {
        super(Object.assign(q(de.getDefaults(), arguments, ["mapping", "length"]))), this.name = "WaveShaper", this._shaper = this.context.createWaveShaper(), this.input = this._shaper, this.output = this._shaper;
        const t = q(de.getDefaults(), arguments, ["mapping", "length"]);
        y(t.mapping) || t.mapping instanceof Float32Array ? this.curve = Float32Array.from(t.mapping) : _(t.mapping) && this.setMap(t.mapping, t.length);
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          length: 1024
        });
      }

      setMap(t, e = 1024) {
        const n = new Float32Array(e);

        for (let s = 0, i = e; s < i; s++) {
          const e = s / (i - 1) * 2 - 1;
          n[s] = t(e, s);
        }

        return this.curve = n, this;
      }

      get curve() {
        return this._shaper.curve;
      }

      set curve(t) {
        this._shaper.curve = t;
      }

      get oversample() {
        return this._shaper.oversample;
      }

      set oversample(t) {
        r(["none", "2x", "4x"].some(e => e.includes(t)), "oversampling must be either 'none', '2x', or '4x'"), this._shaper.oversample = t;
      }

      dispose() {
        return super.dispose(), this._shaper.disconnect(), this;
      }

    }

    class pe extends le {
      constructor() {
        super(...arguments), this.name = "AudioToGain", this._norm = new de({
          context: this.context,
          mapping: t => (t + 1) / 2
        }), this.input = this._norm, this.output = this._norm;
      }

      dispose() {
        return super.dispose(), this._norm.dispose(), this;
      }

    }

    class fe extends Rt {
      constructor() {
        super(Object.assign(q(fe.getDefaults(), arguments, ["value"]))), this.name = "Multiply", this.override = !1;
        const t = q(fe.getDefaults(), arguments, ["value"]);
        this._mult = this.input = this.output = new Mt({
          context: this.context,
          minValue: t.minValue,
          maxValue: t.maxValue
        }), this.factor = this._param = this._mult.gain, this.factor.setValueAtTime(t.value, 0);
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          value: 0
        });
      }

      dispose() {
        return super.dispose(), this._mult.dispose(), this;
      }

    }

    class _e extends ne {
      constructor() {
        super(q(_e.getDefaults(), arguments, ["frequency", "type", "modulationType"])), this.name = "AMOscillator", this._modulationScale = new pe({
          context: this.context
        }), this._modulationNode = new Mt({
          context: this.context
        });
        const t = q(_e.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
        this._carrier = new he({
          context: this.context,
          detune: t.detune,
          frequency: t.frequency,
          onstop: () => this.onstop(this),
          phase: t.phase,
          type: t.type
        }), this.frequency = this._carrier.frequency, this.detune = this._carrier.detune, this._modulator = new he({
          context: this.context,
          phase: t.phase,
          type: t.modulationType
        }), this.harmonicity = new fe({
          context: this.context,
          units: "positive",
          value: t.harmonicity
        }), this.frequency.chain(this.harmonicity, this._modulator.frequency), this._modulator.chain(this._modulationScale, this._modulationNode.gain), this._carrier.chain(this._modulationNode, this.output), $(this, ["frequency", "detune", "harmonicity"]);
      }

      static getDefaults() {
        return Object.assign(he.getDefaults(), {
          harmonicity: 1,
          modulationType: "square"
        });
      }

      _start(t) {
        this._modulator.start(t), this._carrier.start(t);
      }

      _stop(t) {
        this._modulator.stop(t), this._carrier.stop(t);
      }

      _restart(t) {
        this._modulator.restart(t), this._carrier.restart(t);
      }

      get type() {
        return this._carrier.type;
      }

      set type(t) {
        this._carrier.type = t;
      }

      get baseType() {
        return this._carrier.baseType;
      }

      set baseType(t) {
        this._carrier.baseType = t;
      }

      get partialCount() {
        return this._carrier.partialCount;
      }

      set partialCount(t) {
        this._carrier.partialCount = t;
      }

      get modulationType() {
        return this._modulator.type;
      }

      set modulationType(t) {
        this._modulator.type = t;
      }

      get phase() {
        return this._carrier.phase;
      }

      set phase(t) {
        this._carrier.phase = t, this._modulator.phase = t;
      }

      get partials() {
        return this._carrier.partials;
      }

      set partials(t) {
        this._carrier.partials = t;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this.frequency.dispose(), this.detune.dispose(), this.harmonicity.dispose(), this._carrier.dispose(), this._modulator.dispose(), this._modulationNode.dispose(), this._modulationScale.dispose(), this;
      }

    }

    class me extends ne {
      constructor() {
        super(q(me.getDefaults(), arguments, ["frequency", "type", "modulationType"])), this.name = "FMOscillator", this._modulationNode = new Mt({
          context: this.context,
          gain: 0
        });
        const t = q(me.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
        this._carrier = new he({
          context: this.context,
          detune: t.detune,
          frequency: 0,
          onstop: () => this.onstop(this),
          phase: t.phase,
          type: t.type
        }), this.detune = this._carrier.detune, this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency
        }), this._modulator = new he({
          context: this.context,
          phase: t.phase,
          type: t.modulationType
        }), this.harmonicity = new fe({
          context: this.context,
          units: "positive",
          value: t.harmonicity
        }), this.modulationIndex = new fe({
          context: this.context,
          units: "positive",
          value: t.modulationIndex
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.frequency.chain(this.modulationIndex, this._modulationNode), this._modulator.connect(this._modulationNode.gain), this._modulationNode.connect(this._carrier.frequency), this._carrier.connect(this.output), this.detune.connect(this._modulator.detune), $(this, ["modulationIndex", "frequency", "detune", "harmonicity"]);
      }

      static getDefaults() {
        return Object.assign(he.getDefaults(), {
          harmonicity: 1,
          modulationIndex: 2,
          modulationType: "square"
        });
      }

      _start(t) {
        this._modulator.start(t), this._carrier.start(t);
      }

      _stop(t) {
        this._modulator.stop(t), this._carrier.stop(t);
      }

      _restart(t) {
        return this._modulator.restart(t), this._carrier.restart(t), this;
      }

      get type() {
        return this._carrier.type;
      }

      set type(t) {
        this._carrier.type = t;
      }

      get baseType() {
        return this._carrier.baseType;
      }

      set baseType(t) {
        this._carrier.baseType = t;
      }

      get partialCount() {
        return this._carrier.partialCount;
      }

      set partialCount(t) {
        this._carrier.partialCount = t;
      }

      get modulationType() {
        return this._modulator.type;
      }

      set modulationType(t) {
        this._modulator.type = t;
      }

      get phase() {
        return this._carrier.phase;
      }

      set phase(t) {
        this._carrier.phase = t, this._modulator.phase = t;
      }

      get partials() {
        return this._carrier.partials;
      }

      set partials(t) {
        this._carrier.partials = t;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this.frequency.dispose(), this.harmonicity.dispose(), this._carrier.dispose(), this._modulator.dispose(), this._modulationNode.dispose(), this.modulationIndex.dispose(), this;
      }

    }

    class ge extends ne {
      constructor() {
        super(q(ge.getDefaults(), arguments, ["frequency", "width"])), this.name = "PulseOscillator", this._widthGate = new Mt({
          context: this.context,
          gain: 0
        }), this._thresh = new de({
          context: this.context,
          mapping: t => t <= 0 ? -1 : 1
        });
        const t = q(ge.getDefaults(), arguments, ["frequency", "width"]);
        this.width = new Rt({
          context: this.context,
          units: "audioRange",
          value: t.width
        }), this._triangle = new he({
          context: this.context,
          detune: t.detune,
          frequency: t.frequency,
          onstop: () => this.onstop(this),
          phase: t.phase,
          type: "triangle"
        }), this.frequency = this._triangle.frequency, this.detune = this._triangle.detune, this._triangle.chain(this._thresh, this.output), this.width.chain(this._widthGate, this._thresh), $(this, ["width", "frequency", "detune"]);
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          detune: 0,
          frequency: 440,
          phase: 0,
          type: "pulse",
          width: .2
        });
      }

      _start(t) {
        t = this.toSeconds(t), this._triangle.start(t), this._widthGate.gain.setValueAtTime(1, t);
      }

      _stop(t) {
        t = this.toSeconds(t), this._triangle.stop(t), this._widthGate.gain.cancelScheduledValues(t), this._widthGate.gain.setValueAtTime(0, t);
      }

      _restart(t) {
        this._triangle.restart(t), this._widthGate.gain.cancelScheduledValues(t), this._widthGate.gain.setValueAtTime(1, t);
      }

      get phase() {
        return this._triangle.phase;
      }

      set phase(t) {
        this._triangle.phase = t;
      }

      get type() {
        return "pulse";
      }

      get baseType() {
        return "pulse";
      }

      get partials() {
        return [];
      }

      get partialCount() {
        return 0;
      }

      set carrierType(t) {
        this._triangle.type = t;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this._triangle.dispose(), this.width.dispose(), this._widthGate.dispose(), this._thresh.dispose(), this;
      }

    }

    class ve extends ne {
      constructor() {
        super(q(ve.getDefaults(), arguments, ["frequency", "type", "spread"])), this.name = "FatOscillator", this._oscillators = [];
        const t = q(ve.getDefaults(), arguments, ["frequency", "type", "spread"]);
        this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency
        }), this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), this._spread = t.spread, this._type = t.type, this._phase = t.phase, this._partials = t.partials, this._partialCount = t.partialCount, this.count = t.count, $(this, ["frequency", "detune"]);
      }

      static getDefaults() {
        return Object.assign(he.getDefaults(), {
          count: 3,
          spread: 20,
          type: "sawtooth"
        });
      }

      _start(t) {
        t = this.toSeconds(t), this._forEach(e => e.start(t));
      }

      _stop(t) {
        t = this.toSeconds(t), this._forEach(e => e.stop(t));
      }

      _restart(t) {
        this._forEach(e => e.restart(t));
      }

      _forEach(t) {
        for (let e = 0; e < this._oscillators.length; e++) t(this._oscillators[e], e);
      }

      get type() {
        return this._type;
      }

      set type(t) {
        this._type = t, this._forEach(e => e.type = t);
      }

      get spread() {
        return this._spread;
      }

      set spread(t) {
        if (this._spread = t, this._oscillators.length > 1) {
          const e = -t / 2,
                n = t / (this._oscillators.length - 1);

          this._forEach((t, s) => t.detune.value = e + n * s);
        }
      }

      get count() {
        return this._oscillators.length;
      }

      set count(t) {
        if (a(t, 1), this._oscillators.length !== t) {
          this._forEach(t => t.dispose()), this._oscillators = [];

          for (let e = 0; e < t; e++) {
            const n = new he({
              context: this.context,
              volume: -6 - 1.1 * t,
              type: this._type,
              phase: this._phase + e / t * 360,
              partialCount: this._partialCount,
              onstop: 0 === e ? () => this.onstop(this) : K
            });
            "custom" === this.type && (n.partials = this._partials), this.frequency.connect(n.frequency), this.detune.connect(n.detune), n.detune.overridden = !1, n.connect(this.output), this._oscillators[e] = n;
          }

          this.spread = this._spread, "started" === this.state && this._forEach(t => t.start());
        }
      }

      get phase() {
        return this._phase;
      }

      set phase(t) {
        this._phase = t, this._forEach(e => e.phase = t);
      }

      get baseType() {
        return this._oscillators[0].baseType;
      }

      set baseType(t) {
        this._forEach(e => e.baseType = t), this._type = this._oscillators[0].type;
      }

      get partials() {
        return this._oscillators[0].partials;
      }

      set partials(t) {
        this._partials = t, this._partialCount = this._partials.length, t.length && (this._type = "custom", this._forEach(e => e.partials = t));
      }

      get partialCount() {
        return this._oscillators[0].partialCount;
      }

      set partialCount(t) {
        this._partialCount = t, this._forEach(e => e.partialCount = t), this._type = this._oscillators[0].type;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this.frequency.dispose(), this.detune.dispose(), this._forEach(t => t.dispose()), this;
      }

    }

    class ye extends ne {
      constructor() {
        super(q(ye.getDefaults(), arguments, ["frequency", "modulationFrequency"])), this.name = "PWMOscillator", this.sourceType = "pwm", this._scale = new fe({
          context: this.context,
          value: 2
        });
        const t = q(ye.getDefaults(), arguments, ["frequency", "modulationFrequency"]);
        this._pulse = new ge({
          context: this.context,
          frequency: t.modulationFrequency
        }), this._pulse.carrierType = "sine", this.modulationFrequency = this._pulse.frequency, this._modulator = new he({
          context: this.context,
          detune: t.detune,
          frequency: t.frequency,
          onstop: () => this.onstop(this),
          phase: t.phase
        }), this.frequency = this._modulator.frequency, this.detune = this._modulator.detune, this._modulator.chain(this._scale, this._pulse.width), this._pulse.connect(this.output), $(this, ["modulationFrequency", "frequency", "detune"]);
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          detune: 0,
          frequency: 440,
          modulationFrequency: .4,
          phase: 0,
          type: "pwm"
        });
      }

      _start(t) {
        t = this.toSeconds(t), this._modulator.start(t), this._pulse.start(t);
      }

      _stop(t) {
        t = this.toSeconds(t), this._modulator.stop(t), this._pulse.stop(t);
      }

      _restart(t) {
        this._modulator.restart(t), this._pulse.restart(t);
      }

      get type() {
        return "pwm";
      }

      get baseType() {
        return "pwm";
      }

      get partials() {
        return [];
      }

      get partialCount() {
        return 0;
      }

      get phase() {
        return this._modulator.phase;
      }

      set phase(t) {
        this._modulator.phase = t;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this._pulse.dispose(), this._scale.dispose(), this._modulator.dispose(), this;
      }

    }

    const be = {
      am: _e,
      fat: ve,
      fm: me,
      oscillator: he,
      pulse: ge,
      pwm: ye
    };

    class xe extends ne {
      constructor() {
        super(q(xe.getDefaults(), arguments, ["frequency", "type"])), this.name = "OmniOscillator";
        const t = q(xe.getDefaults(), arguments, ["frequency", "type"]);
        this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency
        }), this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), $(this, ["frequency", "detune"]), this.set(t);
      }

      static getDefaults() {
        return Object.assign(he.getDefaults(), me.getDefaults(), _e.getDefaults(), ve.getDefaults(), ge.getDefaults(), ye.getDefaults());
      }

      _start(t) {
        this._oscillator.start(t);
      }

      _stop(t) {
        this._oscillator.stop(t);
      }

      _restart(t) {
        return this._oscillator.restart(t), this;
      }

      get type() {
        let t = "";
        return ["am", "fm", "fat"].some(t => this._sourceType === t) && (t = this._sourceType), t + this._oscillator.type;
      }

      set type(t) {
        "fm" === t.substr(0, 2) ? (this._createNewOscillator("fm"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(2)) : "am" === t.substr(0, 2) ? (this._createNewOscillator("am"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(2)) : "fat" === t.substr(0, 3) ? (this._createNewOscillator("fat"), this._oscillator = this._oscillator, this._oscillator.type = t.substr(3)) : "pwm" === t ? (this._createNewOscillator("pwm"), this._oscillator = this._oscillator) : "pulse" === t ? this._createNewOscillator("pulse") : (this._createNewOscillator("oscillator"), this._oscillator = this._oscillator, this._oscillator.type = t);
      }

      get partials() {
        return this._oscillator.partials;
      }

      set partials(t) {
        this._getOscType(this._oscillator, "pulse") || this._getOscType(this._oscillator, "pwm") || (this._oscillator.partials = t);
      }

      get partialCount() {
        return this._oscillator.partialCount;
      }

      set partialCount(t) {
        this._getOscType(this._oscillator, "pulse") || this._getOscType(this._oscillator, "pwm") || (this._oscillator.partialCount = t);
      }

      set(t) {
        return Reflect.has(t, "type") && t.type && (this.type = t.type), super.set(t), this;
      }

      _createNewOscillator(t) {
        if (t !== this._sourceType) {
          this._sourceType = t;
          const e = be[t],
                n = this.now();

          if (this._oscillator) {
            const t = this._oscillator;
            t.stop(n), this.context.setTimeout(() => t.dispose(), this.blockTime);
          }

          this._oscillator = new e({
            context: this.context
          }), this.frequency.connect(this._oscillator.frequency), this.detune.connect(this._oscillator.detune), this._oscillator.connect(this.output), this._oscillator.onstop = () => this.onstop(this), "started" === this.state && this._oscillator.start(n);
        }
      }

      get phase() {
        return this._oscillator.phase;
      }

      set phase(t) {
        this._oscillator.phase = t;
      }

      get sourceType() {
        return this._sourceType;
      }

      set sourceType(t) {
        let e = "sine";
        "pwm" !== this._oscillator.type && "pulse" !== this._oscillator.type && (e = this._oscillator.type), "fm" === t ? this.type = "fm" + e : "am" === t ? this.type = "am" + e : "fat" === t ? this.type = "fat" + e : "oscillator" === t ? this.type = e : "pulse" === t ? this.type = "pulse" : "pwm" === t && (this.type = "pwm");
      }

      _getOscType(t, e) {
        return t instanceof be[e];
      }

      get baseType() {
        return this._oscillator.baseType;
      }

      set baseType(t) {
        this._getOscType(this._oscillator, "pulse") || this._getOscType(this._oscillator, "pwm") || "pulse" === t || "pwm" === t || (this._oscillator.baseType = t);
      }

      get width() {
        return this._getOscType(this._oscillator, "pulse") ? this._oscillator.width : void 0;
      }

      get count() {
        return this._getOscType(this._oscillator, "fat") ? this._oscillator.count : void 0;
      }

      set count(t) {
        this._getOscType(this._oscillator, "fat") && m(t) && (this._oscillator.count = t);
      }

      get spread() {
        return this._getOscType(this._oscillator, "fat") ? this._oscillator.spread : void 0;
      }

      set spread(t) {
        this._getOscType(this._oscillator, "fat") && m(t) && (this._oscillator.spread = t);
      }

      get modulationType() {
        return this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am") ? this._oscillator.modulationType : void 0;
      }

      set modulationType(t) {
        (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) && b(t) && (this._oscillator.modulationType = t);
      }

      get modulationIndex() {
        return this._getOscType(this._oscillator, "fm") ? this._oscillator.modulationIndex : void 0;
      }

      get harmonicity() {
        return this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am") ? this._oscillator.harmonicity : void 0;
      }

      get modulationFrequency() {
        return this._getOscType(this._oscillator, "pwm") ? this._oscillator.modulationFrequency : void 0;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          return ce(this, t);
        });
      }

      dispose() {
        return super.dispose(), this.detune.dispose(), this.frequency.dispose(), this._oscillator.dispose(), this;
      }

    }

    class we extends Rt {
      constructor() {
        super(Object.assign(q(we.getDefaults(), arguments, ["value"]))), this.override = !1, this.name = "Add", this._sum = new Mt({
          context: this.context
        }), this.input = this._sum, this.output = this._sum, this.addend = this._param, kt(this._constantSource, this._sum);
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          value: 0
        });
      }

      dispose() {
        return super.dispose(), this._sum.dispose(), this;
      }

    }

    class Te extends le {
      constructor() {
        super(Object.assign(q(Te.getDefaults(), arguments, ["min", "max"]))), this.name = "Scale";
        const t = q(Te.getDefaults(), arguments, ["min", "max"]);
        this._mult = this.input = new fe({
          context: this.context,
          value: t.max - t.min
        }), this._add = this.output = new we({
          context: this.context,
          value: t.min
        }), this._min = t.min, this._max = t.max, this.input.connect(this.output);
      }

      static getDefaults() {
        return Object.assign(le.getDefaults(), {
          max: 1,
          min: 0
        });
      }

      get min() {
        return this._min;
      }

      set min(t) {
        this._min = t, this._setRange();
      }

      get max() {
        return this._max;
      }

      set max(t) {
        this._max = t, this._setRange();
      }

      _setRange() {
        this._add.value = this._min, this._mult.value = this._max - this._min;
      }

      dispose() {
        return super.dispose(), this._add.dispose(), this._mult.dispose(), this;
      }

    }

    class Oe extends le {
      constructor() {
        super(Object.assign(q(Oe.getDefaults(), arguments))), this.name = "Zero", this._gain = new Mt({
          context: this.context
        }), this.output = this._gain, this.input = void 0, At(this.context.getConstant(0), this._gain);
      }

      dispose() {
        return super.dispose(), Dt(this.context.getConstant(0), this._gain), this;
      }

    }

    class Se extends Ct {
      constructor() {
        super(q(Se.getDefaults(), arguments, ["frequency", "min", "max"])), this.name = "LFO", this._stoppedValue = 0, this._units = "number", this.convert = !0, this._fromType = St.prototype._fromType, this._toType = St.prototype._toType, this._is = St.prototype._is, this._clampValue = St.prototype._clampValue;
        const t = q(Se.getDefaults(), arguments, ["frequency", "min", "max"]);
        this._oscillator = new he({
          context: this.context,
          frequency: t.frequency,
          type: t.type
        }), this.frequency = this._oscillator.frequency, this._amplitudeGain = new Mt({
          context: this.context,
          gain: t.amplitude,
          units: "normalRange"
        }), this.amplitude = this._amplitudeGain.gain, this._stoppedSignal = new Rt({
          context: this.context,
          units: "audioRange",
          value: 0
        }), this._zeros = new Oe({
          context: this.context
        }), this._a2g = new pe({
          context: this.context
        }), this._scaler = this.output = new Te({
          context: this.context,
          max: t.max,
          min: t.min
        }), this.units = t.units, this.min = t.min, this.max = t.max, this._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler), this._zeros.connect(this._a2g), this._stoppedSignal.connect(this._a2g), $(this, ["amplitude", "frequency"]), this.phase = t.phase;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          amplitude: 1,
          frequency: "4n",
          max: 1,
          min: 0,
          phase: 0,
          type: "sine",
          units: "number"
        });
      }

      start(t) {
        return t = this.toSeconds(t), this._stoppedSignal.setValueAtTime(0, t), this._oscillator.start(t), this;
      }

      stop(t) {
        return t = this.toSeconds(t), this._stoppedSignal.setValueAtTime(this._stoppedValue, t), this._oscillator.stop(t), this;
      }

      sync() {
        return this._oscillator.sync(), this._oscillator.syncFrequency(), this;
      }

      unsync() {
        return this._oscillator.unsync(), this._oscillator.unsyncFrequency(), this;
      }

      get min() {
        return this._toType(this._scaler.min);
      }

      set min(t) {
        t = this._fromType(t), this._scaler.min = t;
      }

      get max() {
        return this._toType(this._scaler.max);
      }

      set max(t) {
        t = this._fromType(t), this._scaler.max = t;
      }

      get type() {
        return this._oscillator.type;
      }

      set type(t) {
        this._oscillator.type = t, this._stoppedValue = this._oscillator.getInitialValue(), this._stoppedSignal.value = this._stoppedValue;
      }

      get phase() {
        return this._oscillator.phase;
      }

      set phase(t) {
        this._oscillator.phase = t, this._stoppedValue = this._oscillator.getInitialValue(), this._stoppedSignal.value = this._stoppedValue;
      }

      get units() {
        return this._units;
      }

      set units(t) {
        const e = this.min,
              n = this.max;
        this._units = t, this.min = e, this.max = n;
      }

      get state() {
        return this._oscillator.state;
      }

      connect(t, e, n) {
        return (t instanceof St || t instanceof Rt) && (this.convert = t.convert, this.units = t.units), qt(this, t, e, n), this;
      }

      dispose() {
        return super.dispose(), this._oscillator.dispose(), this._stoppedSignal.dispose(), this._zeros.dispose(), this._scaler.dispose(), this._a2g.dispose(), this._amplitudeGain.dispose(), this.amplitude.dispose(), this;
      }

    }

    function Ce(t, e = 1 / 0) {
      const n = new WeakMap();
      return function (s, i) {
        Reflect.defineProperty(s, i, {
          configurable: !0,
          enumerable: !0,
          get: function () {
            return n.get(this);
          },
          set: function (s) {
            a(s, t, e), n.set(this, s);
          }
        });
      };
    }

    function ke(t, e = 1 / 0) {
      const n = new WeakMap();
      return function (s, i) {
        Reflect.defineProperty(s, i, {
          configurable: !0,
          enumerable: !0,
          get: function () {
            return n.get(this);
          },
          set: function (s) {
            a(this.toSeconds(s), t, e), n.set(this, s);
          }
        });
      };
    }

    class Ae extends ne {
      constructor() {
        super(q(Ae.getDefaults(), arguments, ["url", "onload"])), this.name = "Player", this._activeSources = new Set();
        const t = q(Ae.getDefaults(), arguments, ["url", "onload"]);
        this._buffer = new tt({
          onload: this._onload.bind(this, t.onload),
          onerror: t.onerror,
          reverse: t.reverse,
          url: t.url
        }), this.autostart = t.autostart, this._loop = t.loop, this._loopStart = t.loopStart, this._loopEnd = t.loopEnd, this._playbackRate = t.playbackRate, this.fadeIn = t.fadeIn, this.fadeOut = t.fadeOut;
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          autostart: !1,
          fadeIn: 0,
          fadeOut: 0,
          loop: !1,
          loopEnd: 0,
          loopStart: 0,
          onload: K,
          onerror: K,
          playbackRate: 1,
          reverse: !1
        });
      }

      load(t) {
        return S(this, void 0, void 0, function* () {
          return yield this._buffer.load(t), this._onload(), this;
        });
      }

      _onload(t = K) {
        t(), this.autostart && this.start();
      }

      _onSourceEnd(t) {
        this.onstop(this), this._activeSources.delete(t), 0 !== this._activeSources.size || this._synced || "started" !== this._state.getValueAtTime(this.now()) || this._state.setStateAtTime("stopped", this.now());
      }

      start(t, e, n) {
        return super.start(t, e, n), this;
      }

      _start(t, e, n) {
        e = this._loop ? I(e, this._loopStart) : I(e, 0);
        let s = this.toSeconds(e);
        this._synced && (s *= this._playbackRate);
        const i = n;
        n = I(n, Math.max(this._buffer.duration - s, 0));
        let o = this.toSeconds(n);
        o /= this._playbackRate, t = this.toSeconds(t);
        const r = new se({
          url: this._buffer,
          context: this.context,
          fadeIn: this.fadeIn,
          fadeOut: this.fadeOut,
          loop: this._loop,
          loopEnd: this._loopEnd,
          loopStart: this._loopStart,
          onended: this._onSourceEnd.bind(this),
          playbackRate: this._playbackRate
        }).connect(this.output);
        this._loop || this._synced || (this._state.cancel(t + o), this._state.setStateAtTime("stopped", t + o, {
          implicitEnd: !0
        })), this._activeSources.add(r), this._loop && p(i) ? r.start(t, s) : r.start(t, s, o - this.toSeconds(this.fadeOut));
      }

      _stop(t) {
        const e = this.toSeconds(t);

        this._activeSources.forEach(t => t.stop(e));
      }

      restart(t, e, n) {
        return super.restart(t, e, n), this;
      }

      _restart(t, e, n) {
        this._stop(t), this._start(t, e, n);
      }

      seek(t, e) {
        const n = this.toSeconds(e);

        if ("started" === this._state.getValueAtTime(n)) {
          const e = this.toSeconds(t);
          this._stop(n), this._start(n, e);
        }

        return this;
      }

      setLoopPoints(t, e) {
        return this.loopStart = t, this.loopEnd = e, this;
      }

      get loopStart() {
        return this._loopStart;
      }

      set loopStart(t) {
        this._loopStart = t, this.buffer.loaded && a(this.toSeconds(t), 0, this.buffer.duration), this._activeSources.forEach(e => {
          e.loopStart = t;
        });
      }

      get loopEnd() {
        return this._loopEnd;
      }

      set loopEnd(t) {
        this._loopEnd = t, this.buffer.loaded && a(this.toSeconds(t), 0, this.buffer.duration), this._activeSources.forEach(e => {
          e.loopEnd = t;
        });
      }

      get buffer() {
        return this._buffer;
      }

      set buffer(t) {
        this._buffer.set(t);
      }

      get loop() {
        return this._loop;
      }

      set loop(t) {
        if (this._loop !== t && (this._loop = t, this._activeSources.forEach(e => {
          e.loop = t;
        }), t)) {
          const t = this._state.getNextState("stopped", this.now());

          t && this._state.cancel(t.time);
        }
      }

      get playbackRate() {
        return this._playbackRate;
      }

      set playbackRate(t) {
        this._playbackRate = t;

        const e = this.now(),
              n = this._state.getNextState("stopped", e);

        n && n.implicitEnd && (this._state.cancel(n.time), this._activeSources.forEach(t => t.cancelStop())), this._activeSources.forEach(n => {
          n.playbackRate.setValueAtTime(t, e);
        });
      }

      get reverse() {
        return this._buffer.reverse;
      }

      set reverse(t) {
        this._buffer.reverse = t;
      }

      get loaded() {
        return this._buffer.loaded;
      }

      dispose() {
        return super.dispose(), this._activeSources.forEach(t => t.dispose()), this._activeSources.clear(), this._buffer.dispose(), this;
      }

    }

    O([ke(0)], Ae.prototype, "fadeIn", void 0), O([ke(0)], Ae.prototype, "fadeOut", void 0);

    class De extends Ct {
      constructor() {
        super(q(De.getDefaults(), arguments, ["urls", "onload"], "urls")), this.name = "Players", this.input = void 0, this._players = new Map();
        const t = q(De.getDefaults(), arguments, ["urls", "onload"], "urls");
        this._volume = this.output = new Zt({
          context: this.context,
          volume: t.volume
        }), this.volume = this._volume.volume, $(this, "volume"), this._buffers = new $t({
          urls: t.urls,
          onload: t.onload,
          baseUrl: t.baseUrl,
          onerror: t.onerror
        }), this.mute = t.mute, this._fadeIn = t.fadeIn, this._fadeOut = t.fadeOut;
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          baseUrl: "",
          fadeIn: 0,
          fadeOut: 0,
          mute: !1,
          onload: K,
          onerror: K,
          urls: {},
          volume: 0
        });
      }

      get mute() {
        return this._volume.mute;
      }

      set mute(t) {
        this._volume.mute = t;
      }

      get fadeIn() {
        return this._fadeIn;
      }

      set fadeIn(t) {
        this._fadeIn = t, this._players.forEach(e => {
          e.fadeIn = t;
        });
      }

      get fadeOut() {
        return this._fadeOut;
      }

      set fadeOut(t) {
        this._fadeOut = t, this._players.forEach(e => {
          e.fadeOut = t;
        });
      }

      get state() {
        return Array.from(this._players).some(([t, e]) => "started" === e.state) ? "started" : "stopped";
      }

      has(t) {
        return this._buffers.has(t);
      }

      player(t) {
        if (r(this.has(t), `No Player with the name ${t} exists on this object`), !this._players.has(t)) {
          const e = new Ae({
            context: this.context,
            fadeIn: this._fadeIn,
            fadeOut: this._fadeOut,
            url: this._buffers.get(t)
          }).connect(this.output);

          this._players.set(t, e);
        }

        return this._players.get(t);
      }

      get loaded() {
        return this._buffers.loaded;
      }

      add(t, e, n) {
        return r(!this._buffers.has(t), "A buffer with that name already exists on this object"), this._buffers.add(t, e, n), this;
      }

      stopAll(t) {
        return this._players.forEach(e => e.stop(t)), this;
      }

      dispose() {
        return super.dispose(), this._volume.dispose(), this.volume.dispose(), this._players.forEach(t => t.dispose()), this._buffers.dispose(), this;
      }

    }

    class Me extends ne {
      constructor() {
        super(q(Me.getDefaults(), arguments, ["url", "onload"])), this.name = "GrainPlayer", this._loopStart = 0, this._loopEnd = 0, this._activeSources = [];
        const t = q(Me.getDefaults(), arguments, ["url", "onload"]);
        this.buffer = new tt({
          onload: t.onload,
          onerror: t.onerror,
          reverse: t.reverse,
          url: t.url
        }), this._clock = new Nt({
          context: this.context,
          callback: this._tick.bind(this),
          frequency: 1 / t.grainSize
        }), this._playbackRate = t.playbackRate, this._grainSize = t.grainSize, this._overlap = t.overlap, this.detune = t.detune, this.overlap = t.overlap, this.loop = t.loop, this.playbackRate = t.playbackRate, this.grainSize = t.grainSize, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.reverse = t.reverse, this._clock.on("stop", this._onstop.bind(this));
      }

      static getDefaults() {
        return Object.assign(ne.getDefaults(), {
          onload: K,
          onerror: K,
          overlap: .1,
          grainSize: .2,
          playbackRate: 1,
          detune: 0,
          loop: !1,
          loopStart: 0,
          loopEnd: 0,
          reverse: !1
        });
      }

      _start(t, e, n) {
        e = I(e, 0), e = this.toSeconds(e), t = this.toSeconds(t);

        const s = 1 / this._clock.frequency.getValueAtTime(t);

        this._clock.start(t, e / s), n && this.stop(t + this.toSeconds(n));
      }

      restart(t, e, n) {
        return super.restart(t, e, n), this;
      }

      _restart(t, e, n) {
        this._stop(t), this._start(t, e, n);
      }

      _stop(t) {
        this._clock.stop(t);
      }

      _onstop(t) {
        this._activeSources.forEach(e => {
          e.fadeOut = 0, e.stop(t);
        }), this.onstop(this);
      }

      _tick(t) {
        const e = this._clock.getTicksAtTime(t),
              n = e * this._grainSize;

        if (this.log("offset", n), !this.loop && n > this.buffer.duration) return void this.stop(t);
        const s = n < this._overlap ? 0 : this._overlap,
              i = new se({
          context: this.context,
          url: this.buffer,
          fadeIn: s,
          fadeOut: this._overlap,
          loop: this.loop,
          loopStart: this._loopStart,
          loopEnd: this._loopEnd,
          playbackRate: ut(this.detune / 100)
        }).connect(this.output);
        i.start(t, this._grainSize * e), i.stop(t + this._grainSize / this.playbackRate), this._activeSources.push(i), i.onended = () => {
          const t = this._activeSources.indexOf(i);

          -1 !== t && this._activeSources.splice(t, 1);
        };
      }

      get playbackRate() {
        return this._playbackRate;
      }

      set playbackRate(t) {
        a(t, .001), this._playbackRate = t, this.grainSize = this._grainSize;
      }

      get loopStart() {
        return this._loopStart;
      }

      set loopStart(t) {
        this.buffer.loaded && a(this.toSeconds(t), 0, this.buffer.duration), this._loopStart = this.toSeconds(t);
      }

      get loopEnd() {
        return this._loopEnd;
      }

      set loopEnd(t) {
        this.buffer.loaded && a(this.toSeconds(t), 0, this.buffer.duration), this._loopEnd = this.toSeconds(t);
      }

      get reverse() {
        return this.buffer.reverse;
      }

      set reverse(t) {
        this.buffer.reverse = t;
      }

      get grainSize() {
        return this._grainSize;
      }

      set grainSize(t) {
        this._grainSize = this.toSeconds(t), this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());
      }

      get overlap() {
        return this._overlap;
      }

      set overlap(t) {
        const e = this.toSeconds(t);
        a(e, 0), this._overlap = e;
      }

      get loaded() {
        return this.buffer.loaded;
      }

      dispose() {
        return super.dispose(), this.buffer.dispose(), this._clock.dispose(), this._activeSources.forEach(t => t.dispose()), this;
      }

    }

    class je extends le {
      constructor() {
        super(...arguments), this.name = "Abs", this._abs = new de({
          context: this.context,
          mapping: t => Math.abs(t) < .001 ? 0 : Math.abs(t)
        }), this.input = this._abs, this.output = this._abs;
      }

      dispose() {
        return super.dispose(), this._abs.dispose(), this;
      }

    }

    class Ee extends le {
      constructor() {
        super(...arguments), this.name = "GainToAudio", this._norm = new de({
          context: this.context,
          mapping: t => 2 * Math.abs(t) - 1
        }), this.input = this._norm, this.output = this._norm;
      }

      dispose() {
        return super.dispose(), this._norm.dispose(), this;
      }

    }

    class Re extends le {
      constructor() {
        super(...arguments), this.name = "Negate", this._multiply = new fe({
          context: this.context,
          value: -1
        }), this.input = this._multiply, this.output = this._multiply;
      }

      dispose() {
        return super.dispose(), this._multiply.dispose(), this;
      }

    }

    class qe extends Rt {
      constructor() {
        super(Object.assign(q(qe.getDefaults(), arguments, ["value"]))), this.override = !1, this.name = "Subtract", this._sum = new Mt({
          context: this.context
        }), this.input = this._sum, this.output = this._sum, this._neg = new Re({
          context: this.context
        }), this.subtrahend = this._param, kt(this._constantSource, this._neg, this._sum);
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          value: 0
        });
      }

      dispose() {
        return super.dispose(), this._neg.dispose(), this._sum.dispose(), this;
      }

    }

    class Ie extends le {
      constructor() {
        super(Object.assign(q(Ie.getDefaults(), arguments))), this.name = "GreaterThanZero", this._thresh = this.output = new de({
          context: this.context,
          length: 127,
          mapping: t => t <= 0 ? 0 : 1
        }), this._scale = this.input = new fe({
          context: this.context,
          value: 1e4
        }), this._scale.connect(this._thresh);
      }

      dispose() {
        return super.dispose(), this._scale.dispose(), this._thresh.dispose(), this;
      }

    }

    class Fe extends Rt {
      constructor() {
        super(Object.assign(q(Fe.getDefaults(), arguments, ["value"]))), this.name = "GreaterThan", this.override = !1;
        const t = q(Fe.getDefaults(), arguments, ["value"]);
        this._subtract = this.input = new qe({
          context: this.context,
          value: t.value
        }), this._gtz = this.output = new Ie({
          context: this.context
        }), this.comparator = this._param = this._subtract.subtrahend, $(this, "comparator"), this._subtract.connect(this._gtz);
      }

      static getDefaults() {
        return Object.assign(Rt.getDefaults(), {
          value: 0
        });
      }

      dispose() {
        return super.dispose(), this._gtz.dispose(), this._subtract.dispose(), this.comparator.dispose(), this;
      }

    }

    class Ve extends le {
      constructor() {
        super(Object.assign(q(Ve.getDefaults(), arguments, ["value"]))), this.name = "Pow";
        const t = q(Ve.getDefaults(), arguments, ["value"]);
        this._exponentScaler = this.input = this.output = new de({
          context: this.context,
          mapping: this._expFunc(t.value),
          length: 8192
        }), this._exponent = t.value;
      }

      static getDefaults() {
        return Object.assign(le.getDefaults(), {
          value: 1
        });
      }

      _expFunc(t) {
        return e => Math.pow(Math.abs(e), t);
      }

      get value() {
        return this._exponent;
      }

      set value(t) {
        this._exponent = t, this._exponentScaler.setMap(this._expFunc(this._exponent));
      }

      dispose() {
        return super.dispose(), this._exponentScaler.dispose(), this;
      }

    }

    class Ne extends Te {
      constructor() {
        super(Object.assign(q(Ne.getDefaults(), arguments, ["min", "max", "exponent"]))), this.name = "ScaleExp";
        const t = q(Ne.getDefaults(), arguments, ["min", "max", "exponent"]);
        this.input = this._exp = new Ve({
          context: this.context,
          value: t.exponent
        }), this._exp.connect(this._mult);
      }

      static getDefaults() {
        return Object.assign(Te.getDefaults(), {
          exponent: 1
        });
      }

      get exponent() {
        return this._exp.value;
      }

      set exponent(t) {
        this._exp.value = t;
      }

      dispose() {
        return super.dispose(), this._exp.dispose(), this;
      }

    }

    class Pe extends Rt {
      constructor() {
        super(q(Rt.getDefaults(), arguments, ["value", "units"])), this.name = "SyncedSignal", this.override = !1;
        const t = q(Rt.getDefaults(), arguments, ["value", "units"]);
        this._lastVal = t.value, this._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), "1i"), this._syncedCallback = this._anchorValue.bind(this), this.context.transport.on("start", this._syncedCallback), this.context.transport.on("pause", this._syncedCallback), this.context.transport.on("stop", this._syncedCallback), this._constantSource.disconnect(), this._constantSource.stop(0), this._constantSource = this.output = new Et({
          context: this.context,
          offset: t.value,
          units: t.units
        }).start(0), this.setValueAtTime(t.value, 0);
      }

      _onTick(t) {
        const e = super.getValueAtTime(this.context.transport.seconds);
        this._lastVal !== e && (this._lastVal = e, this._constantSource.offset.setValueAtTime(e, t));
      }

      _anchorValue(t) {
        const e = super.getValueAtTime(this.context.transport.seconds);
        this._lastVal = e, this._constantSource.offset.cancelAndHoldAtTime(t), this._constantSource.offset.setValueAtTime(e, t);
      }

      getValueAtTime(t) {
        const e = new xt(this.context, t).toSeconds();
        return super.getValueAtTime(e);
      }

      setValueAtTime(t, e) {
        const n = new xt(this.context, e).toSeconds();
        return super.setValueAtTime(t, n), this;
      }

      linearRampToValueAtTime(t, e) {
        const n = new xt(this.context, e).toSeconds();
        return super.linearRampToValueAtTime(t, n), this;
      }

      exponentialRampToValueAtTime(t, e) {
        const n = new xt(this.context, e).toSeconds();
        return super.exponentialRampToValueAtTime(t, n), this;
      }

      setTargetAtTime(t, e, n) {
        const s = new xt(this.context, e).toSeconds();
        return super.setTargetAtTime(t, s, n), this;
      }

      cancelScheduledValues(t) {
        const e = new xt(this.context, t).toSeconds();
        return super.cancelScheduledValues(e), this;
      }

      setValueCurveAtTime(t, e, n, s) {
        const i = new xt(this.context, e).toSeconds();
        return n = this.toSeconds(n), super.setValueCurveAtTime(t, i, n, s), this;
      }

      cancelAndHoldAtTime(t) {
        const e = new xt(this.context, t).toSeconds();
        return super.cancelAndHoldAtTime(e), this;
      }

      setRampPoint(t) {
        const e = new xt(this.context, t).toSeconds();
        return super.setRampPoint(e), this;
      }

      exponentialRampTo(t, e, n) {
        const s = new xt(this.context, n).toSeconds();
        return super.exponentialRampTo(t, e, s), this;
      }

      linearRampTo(t, e, n) {
        const s = new xt(this.context, n).toSeconds();
        return super.linearRampTo(t, e, s), this;
      }

      targetRampTo(t, e, n) {
        const s = new xt(this.context, n).toSeconds();
        return super.targetRampTo(t, e, s), this;
      }

      dispose() {
        return super.dispose(), this.context.transport.clear(this._synced), this.context.transport.off("start", this._syncedCallback), this.context.transport.off("pause", this._syncedCallback), this.context.transport.off("stop", this._syncedCallback), this._constantSource.dispose(), this;
      }

    }

    class Le extends Ct {
      constructor() {
        super(q(Le.getDefaults(), arguments, ["attack", "decay", "sustain", "release"])), this.name = "Envelope", this._sig = new Rt({
          context: this.context,
          value: 0
        }), this.output = this._sig, this.input = void 0;
        const t = q(Le.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
        this.attack = t.attack, this.decay = t.decay, this.sustain = t.sustain, this.release = t.release, this.attackCurve = t.attackCurve, this.releaseCurve = t.releaseCurve, this.decayCurve = t.decayCurve;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          attack: .01,
          attackCurve: "linear",
          decay: .1,
          decayCurve: "exponential",
          release: 1,
          releaseCurve: "exponential",
          sustain: .5
        });
      }

      get value() {
        return this.getValueAtTime(this.now());
      }

      _getCurve(t, e) {
        if (b(t)) return t;
        {
          let n;

          for (n in ze) if (ze[n][e] === t) return n;

          return t;
        }
      }

      _setCurve(t, e, n) {
        if (b(n) && Reflect.has(ze, n)) {
          const s = ze[n];
          g(s) ? "_decayCurve" !== t && (this[t] = s[e]) : this[t] = s;
        } else {
          if (!y(n) || "_decayCurve" === t) throw new Error("Envelope: invalid curve: " + n);
          this[t] = n;
        }
      }

      get attackCurve() {
        return this._getCurve(this._attackCurve, "In");
      }

      set attackCurve(t) {
        this._setCurve("_attackCurve", "In", t);
      }

      get releaseCurve() {
        return this._getCurve(this._releaseCurve, "Out");
      }

      set releaseCurve(t) {
        this._setCurve("_releaseCurve", "Out", t);
      }

      get decayCurve() {
        return this._decayCurve;
      }

      set decayCurve(t) {
        r(["linear", "exponential"].some(e => e === t), "Invalid envelope curve: " + t), this._decayCurve = t;
      }

      triggerAttack(t, e = 1) {
        this.log("triggerAttack", t, e), t = this.toSeconds(t);
        let n = this.toSeconds(this.attack);
        const s = this.toSeconds(this.decay),
              i = this.getValueAtTime(t);

        if (i > 0) {
          n = (1 - i) / (1 / n);
        }

        if (n < this.sampleTime) this._sig.cancelScheduledValues(t), this._sig.setValueAtTime(e, t);else if ("linear" === this._attackCurve) this._sig.linearRampTo(e, n, t);else if ("exponential" === this._attackCurve) this._sig.targetRampTo(e, n, t);else {
          this._sig.cancelAndHoldAtTime(t);

          let s = this._attackCurve;

          for (let t = 1; t < s.length; t++) if (s[t - 1] <= i && i <= s[t]) {
            s = this._attackCurve.slice(t), s[0] = i;
            break;
          }

          this._sig.setValueCurveAtTime(s, t, n, e);
        }

        if (s && this.sustain < 1) {
          const i = e * this.sustain,
                o = t + n;
          this.log("decay", o), "linear" === this._decayCurve ? this._sig.linearRampToValueAtTime(i, s + o) : this._sig.exponentialApproachValueAtTime(i, o, s);
        }

        return this;
      }

      triggerRelease(t) {
        this.log("triggerRelease", t), t = this.toSeconds(t);
        const e = this.getValueAtTime(t);

        if (e > 0) {
          const n = this.toSeconds(this.release);
          n < this.sampleTime ? this._sig.setValueAtTime(0, t) : "linear" === this._releaseCurve ? this._sig.linearRampTo(0, n, t) : "exponential" === this._releaseCurve ? this._sig.targetRampTo(0, n, t) : (r(y(this._releaseCurve), "releaseCurve must be either 'linear', 'exponential' or an array"), this._sig.cancelAndHoldAtTime(t), this._sig.setValueCurveAtTime(this._releaseCurve, t, n, e));
        }

        return this;
      }

      getValueAtTime(t) {
        return this._sig.getValueAtTime(t);
      }

      triggerAttackRelease(t, e, n = 1) {
        return e = this.toSeconds(e), this.triggerAttack(e, n), this.triggerRelease(e + this.toSeconds(t)), this;
      }

      cancel(t) {
        return this._sig.cancelScheduledValues(this.toSeconds(t)), this;
      }

      connect(t, e = 0, n = 0) {
        return qt(this, t, e, n), this;
      }

      asArray(t = 1024) {
        return S(this, void 0, void 0, function* () {
          const e = t / this.context.sampleRate,
                n = new et(1, e, this.context.sampleRate),
                s = this.toSeconds(this.attack) + this.toSeconds(this.decay),
                i = s + this.toSeconds(this.release),
                o = .1 * i,
                r = i + o,
                a = new this.constructor(Object.assign(this.get(), {
            attack: e * this.toSeconds(this.attack) / r,
            decay: e * this.toSeconds(this.decay) / r,
            release: e * this.toSeconds(this.release) / r,
            context: n
          }));
          return a._sig.toDestination(), a.triggerAttackRelease(e * (s + o) / r, 0), (yield n.render()).getChannelData(0);
        });
      }

      dispose() {
        return super.dispose(), this._sig.dispose(), this;
      }

    }

    O([ke(0)], Le.prototype, "attack", void 0), O([ke(0)], Le.prototype, "decay", void 0), O([Ce(0, 1)], Le.prototype, "sustain", void 0), O([ke(0)], Le.prototype, "release", void 0);

    const ze = (() => {
      let t, e;
      const n = [];

      for (t = 0; t < 128; t++) n[t] = Math.sin(t / 127 * (Math.PI / 2));

      const s = [];

      for (t = 0; t < 127; t++) {
        e = t / 127;
        const n = Math.sin(e * (2 * Math.PI) * 6.4 - Math.PI / 2) + 1;
        s[t] = n / 10 + .83 * e;
      }

      s[127] = 1;
      const i = [];

      for (t = 0; t < 128; t++) i[t] = Math.ceil(t / 127 * 5) / 5;

      const o = [];

      for (t = 0; t < 128; t++) e = t / 127, o[t] = .5 * (1 - Math.cos(Math.PI * e));

      const r = [];

      for (t = 0; t < 128; t++) {
        e = t / 127;
        const n = 4 * Math.pow(e, 3) + .2,
              s = Math.cos(n * Math.PI * 2 * e);
        r[t] = Math.abs(s * (1 - e));
      }

      function a(t) {
        const e = new Array(t.length);

        for (let n = 0; n < t.length; n++) e[n] = 1 - t[n];

        return e;
      }

      return {
        bounce: {
          In: a(r),
          Out: r
        },
        cosine: {
          In: n,
          Out: (c = n, c.slice(0).reverse())
        },
        exponential: "exponential",
        linear: "linear",
        ripple: {
          In: s,
          Out: a(s)
        },
        sine: {
          In: o,
          Out: a(o)
        },
        step: {
          In: i,
          Out: a(i)
        }
      };
      var c;
    })();

    class Be extends Ct {
      constructor() {
        super(q(Be.getDefaults(), arguments)), this._scheduledEvents = [], this._synced = !1, this._original_triggerAttack = this.triggerAttack, this._original_triggerRelease = this.triggerRelease;
        const t = q(Be.getDefaults(), arguments);
        this._volume = this.output = new Zt({
          context: this.context,
          volume: t.volume
        }), this.volume = this._volume.volume, $(this, "volume");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          volume: 0
        });
      }

      sync() {
        return this._synced || (this._synced = !0, this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 0)), this;
      }

      _syncMethod(t, e) {
        const n = this["_original_" + t] = this[t];

        this[t] = (...t) => {
          const s = t[e],
                i = this.context.transport.schedule(s => {
            t[e] = s, n.apply(this, t);
          }, s);

          this._scheduledEvents.push(i);
        };
      }

      unsync() {
        return this._scheduledEvents.forEach(t => this.context.transport.clear(t)), this._scheduledEvents = [], this._synced && (this._synced = !1, this.triggerAttack = this._original_triggerAttack, this.triggerRelease = this._original_triggerRelease), this;
      }

      triggerAttackRelease(t, e, n, s) {
        const i = this.toSeconds(n),
              o = this.toSeconds(e);
        return this.triggerAttack(t, i, s), this.triggerRelease(i + o), this;
      }

      dispose() {
        return super.dispose(), this._volume.dispose(), this.unsync(), this._scheduledEvents = [], this;
      }

    }

    class We extends Be {
      constructor() {
        super(q(We.getDefaults(), arguments));
        const t = q(We.getDefaults(), arguments);
        this.portamento = t.portamento, this.onsilence = t.onsilence;
      }

      static getDefaults() {
        return Object.assign(Be.getDefaults(), {
          detune: 0,
          onsilence: K,
          portamento: 0
        });
      }

      triggerAttack(t, e, n = 1) {
        this.log("triggerAttack", t, e, n);
        const s = this.toSeconds(e);
        return this._triggerEnvelopeAttack(s, n), this.setNote(t, s), this;
      }

      triggerRelease(t) {
        this.log("triggerRelease", t);
        const e = this.toSeconds(t);
        return this._triggerEnvelopeRelease(e), this;
      }

      setNote(t, e) {
        const n = this.toSeconds(e),
              s = t instanceof gt ? t.toFrequency() : t;

        if (this.portamento > 0 && this.getLevelAtTime(n) > .05) {
          const t = this.toSeconds(this.portamento);
          this.frequency.exponentialRampTo(s, t, n);
        } else this.frequency.setValueAtTime(s, n);

        return this;
      }

    }

    O([ke(0)], We.prototype, "portamento", void 0);

    class Ue extends Le {
      constructor() {
        super(q(Ue.getDefaults(), arguments, ["attack", "decay", "sustain", "release"])), this.name = "AmplitudeEnvelope", this._gainNode = new Mt({
          context: this.context,
          gain: 0
        }), this.output = this._gainNode, this.input = this._gainNode, this._sig.connect(this._gainNode.gain), this.output = this._gainNode, this.input = this._gainNode;
      }

      dispose() {
        return super.dispose(), this._gainNode.dispose(), this;
      }

    }

    class Ge extends We {
      constructor() {
        super(q(Ge.getDefaults(), arguments)), this.name = "Synth";
        const t = q(Ge.getDefaults(), arguments);
        this.oscillator = new xe(Object.assign({
          context: this.context,
          detune: t.detune,
          onstop: () => this.onsilence(this)
        }, t.oscillator)), this.frequency = this.oscillator.frequency, this.detune = this.oscillator.detune, this.envelope = new Ue(Object.assign({
          context: this.context
        }, t.envelope)), this.oscillator.chain(this.envelope, this.output), $(this, ["oscillator", "frequency", "detune", "envelope"]);
      }

      static getDefaults() {
        return Object.assign(We.getDefaults(), {
          envelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .005,
            decay: .1,
            release: 1,
            sustain: .3
          }),
          oscillator: Object.assign(F(xe.getDefaults(), [...Object.keys(ne.getDefaults()), "frequency", "detune"]), {
            type: "triangle"
          })
        });
      }

      _triggerEnvelopeAttack(t, e) {
        if (this.envelope.triggerAttack(t, e), this.oscillator.start(t), 0 === this.envelope.sustain) {
          const e = this.toSeconds(this.envelope.attack),
                n = this.toSeconds(this.envelope.decay);
          this.oscillator.stop(t + e + n);
        }
      }

      _triggerEnvelopeRelease(t) {
        this.envelope.triggerRelease(t), this.oscillator.stop(t + this.toSeconds(this.envelope.release));
      }

      getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
      }

      dispose() {
        return super.dispose(), this.oscillator.dispose(), this.envelope.dispose(), this;
      }

    }

    class Ye extends We {
      constructor() {
        super(q(Ye.getDefaults(), arguments)), this.name = "ModulationSynth";
        const t = q(Ye.getDefaults(), arguments);
        this._carrier = new Ge({
          context: this.context,
          oscillator: t.oscillator,
          envelope: t.envelope,
          onsilence: () => this.onsilence(this),
          volume: -10
        }), this._modulator = new Ge({
          context: this.context,
          oscillator: t.modulation,
          envelope: t.modulationEnvelope,
          volume: -10
        }), this.oscillator = this._carrier.oscillator, this.envelope = this._carrier.envelope, this.modulation = this._modulator.oscillator, this.modulationEnvelope = this._modulator.envelope, this.frequency = new Rt({
          context: this.context,
          units: "frequency"
        }), this.detune = new Rt({
          context: this.context,
          value: t.detune,
          units: "cents"
        }), this.harmonicity = new fe({
          context: this.context,
          value: t.harmonicity,
          minValue: 0
        }), this._modulationNode = new Mt({
          context: this.context,
          gain: 0
        }), $(this, ["frequency", "harmonicity", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);
      }

      static getDefaults() {
        return Object.assign(We.getDefaults(), {
          harmonicity: 3,
          oscillator: Object.assign(F(xe.getDefaults(), [...Object.keys(ne.getDefaults()), "frequency", "detune"]), {
            type: "sine"
          }),
          envelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .01,
            decay: .01,
            sustain: 1,
            release: .5
          }),
          modulation: Object.assign(F(xe.getDefaults(), [...Object.keys(ne.getDefaults()), "frequency", "detune"]), {
            type: "square"
          }),
          modulationEnvelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .5,
            decay: 0,
            sustain: 1,
            release: .5
          })
        });
      }

      _triggerEnvelopeAttack(t, e) {
        this._carrier._triggerEnvelopeAttack(t, e), this._modulator._triggerEnvelopeAttack(t, e);
      }

      _triggerEnvelopeRelease(t) {
        return this._carrier._triggerEnvelopeRelease(t), this._modulator._triggerEnvelopeRelease(t), this;
      }

      getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
      }

      dispose() {
        return super.dispose(), this._carrier.dispose(), this._modulator.dispose(), this.frequency.dispose(), this.detune.dispose(), this.harmonicity.dispose(), this._modulationNode.dispose(), this;
      }

    }

    class Qe extends Ye {
      constructor() {
        super(q(Qe.getDefaults(), arguments)), this.name = "AMSynth", this._modulationScale = new pe({
          context: this.context
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.detune.fan(this._carrier.detune, this._modulator.detune), this._modulator.chain(this._modulationScale, this._modulationNode.gain), this._carrier.chain(this._modulationNode, this.output);
      }

      dispose() {
        return super.dispose(), this._modulationScale.dispose(), this;
      }

    }

    class Ze extends Ct {
      constructor() {
        super(q(Ze.getDefaults(), arguments, ["frequency", "type"])), this.name = "BiquadFilter";
        const t = q(Ze.getDefaults(), arguments, ["frequency", "type"]);
        this._filter = this.context.createBiquadFilter(), this.input = this.output = this._filter, this.Q = new St({
          context: this.context,
          units: "number",
          value: t.Q,
          param: this._filter.Q
        }), this.frequency = new St({
          context: this.context,
          units: "frequency",
          value: t.frequency,
          param: this._filter.frequency
        }), this.detune = new St({
          context: this.context,
          units: "cents",
          value: t.detune,
          param: this._filter.detune
        }), this.gain = new St({
          context: this.context,
          units: "gain",
          value: t.gain,
          param: this._filter.gain
        }), this.type = t.type;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          Q: 1,
          type: "lowpass",
          frequency: 350,
          detune: 0,
          gain: 0
        });
      }

      get type() {
        return this._filter.type;
      }

      set type(t) {
        r(-1 !== ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"].indexOf(t), "Invalid filter type: " + t), this._filter.type = t;
      }

      getFrequencyResponse(t = 128) {
        const e = new Float32Array(t);

        for (let n = 0; n < t; n++) {
          const s = 19980 * Math.pow(n / t, 2) + 20;
          e[n] = s;
        }

        const n = new Float32Array(t),
              s = new Float32Array(t),
              i = this.context.createBiquadFilter();
        return i.type = this.type, i.Q.value = this.Q.value, i.frequency.value = this.frequency.value, i.gain.value = this.gain.value, i.getFrequencyResponse(e, n, s), n;
      }

      dispose() {
        return super.dispose(), this._filter.disconnect(), this.Q.dispose(), this.frequency.dispose(), this.gain.dispose(), this.detune.dispose(), this;
      }

    }

    class Xe extends Ct {
      constructor() {
        super(q(Xe.getDefaults(), arguments, ["frequency", "type", "rolloff"])), this.name = "Filter", this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this._filters = [];
        const t = q(Xe.getDefaults(), arguments, ["frequency", "type", "rolloff"]);
        this._filters = [], this.Q = new Rt({
          context: this.context,
          units: "positive",
          value: t.Q
        }), this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency
        }), this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), this.gain = new Rt({
          context: this.context,
          units: "decibels",
          value: t.gain
        }), this._type = t.type, this.rolloff = t.rolloff, $(this, ["detune", "frequency", "gain", "Q"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          Q: 1,
          detune: 0,
          frequency: 350,
          gain: 0,
          rolloff: -12,
          type: "lowpass"
        });
      }

      get type() {
        return this._type;
      }

      set type(t) {
        r(-1 !== ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"].indexOf(t), "Invalid filter type: " + t), this._type = t, this._filters.forEach(e => e.type = t);
      }

      get rolloff() {
        return this._rolloff;
      }

      set rolloff(t) {
        const e = m(t) ? t : parseInt(t, 10),
              n = [-12, -24, -48, -96];
        let s = n.indexOf(e);
        r(-1 !== s, "rolloff can only be " + n.join(", ")), s += 1, this._rolloff = e, this.input.disconnect(), this._filters.forEach(t => t.disconnect()), this._filters = new Array(s);

        for (let t = 0; t < s; t++) {
          const e = new Ze({
            context: this.context
          });
          e.type = this._type, this.frequency.connect(e.frequency), this.detune.connect(e.detune), this.Q.connect(e.Q), this.gain.connect(e.gain), this._filters[t] = e;
        }

        this._internalChannels = this._filters, kt(this.input, ...this._internalChannels, this.output);
      }

      getFrequencyResponse(t = 128) {
        const e = new Ze({
          frequency: this.frequency.value,
          gain: this.gain.value,
          Q: this.Q.value,
          type: this._type,
          detune: this.detune.value
        }),
              n = new Float32Array(t).map(() => 1);
        return this._filters.forEach(() => {
          e.getFrequencyResponse(t).forEach((t, e) => n[e] *= t);
        }), e.dispose(), n;
      }

      dispose() {
        return super.dispose(), this._filters.forEach(t => {
          t.dispose();
        }), J(this, ["detune", "frequency", "gain", "Q"]), this.frequency.dispose(), this.Q.dispose(), this.detune.dispose(), this.gain.dispose(), this;
      }

    }

    class He extends Le {
      constructor() {
        super(q(He.getDefaults(), arguments, ["attack", "decay", "sustain", "release"])), this.name = "FrequencyEnvelope";
        const t = q(He.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
        this._octaves = t.octaves, this._baseFrequency = this.toFrequency(t.baseFrequency), this._exponent = this.input = new Ve({
          context: this.context,
          value: t.exponent
        }), this._scale = this.output = new Te({
          context: this.context,
          min: this._baseFrequency,
          max: this._baseFrequency * Math.pow(2, this._octaves)
        }), this._sig.chain(this._exponent, this._scale);
      }

      static getDefaults() {
        return Object.assign(Le.getDefaults(), {
          baseFrequency: 200,
          exponent: 1,
          octaves: 4
        });
      }

      get baseFrequency() {
        return this._baseFrequency;
      }

      set baseFrequency(t) {
        const e = this.toFrequency(t);
        a(e, 0), this._baseFrequency = e, this._scale.min = this._baseFrequency, this.octaves = this._octaves;
      }

      get octaves() {
        return this._octaves;
      }

      set octaves(t) {
        a(t, 0), this._octaves = t, this._scale.max = this._baseFrequency * Math.pow(2, t);
      }

      get exponent() {
        return this._exponent.value;
      }

      set exponent(t) {
        this._exponent.value = t;
      }

      dispose() {
        return super.dispose(), this._exponent.dispose(), this._scale.dispose(), this;
      }

    }

    class $e extends We {
      constructor() {
        super(q($e.getDefaults(), arguments)), this.name = "MonoSynth";
        const t = q($e.getDefaults(), arguments);
        this.oscillator = new xe(Object.assign(t.oscillator, {
          context: this.context,
          detune: t.detune,
          onstop: () => this.onsilence(this)
        })), this.frequency = this.oscillator.frequency, this.detune = this.oscillator.detune, this.filter = new Xe(Object.assign(t.filter, {
          context: this.context
        })), this.filterEnvelope = new He(Object.assign(t.filterEnvelope, {
          context: this.context
        })), this.envelope = new Ue(Object.assign(t.envelope, {
          context: this.context
        })), this.oscillator.chain(this.filter, this.envelope, this.output), this.filterEnvelope.connect(this.filter.frequency), $(this, ["oscillator", "frequency", "detune", "filter", "filterEnvelope", "envelope"]);
      }

      static getDefaults() {
        return Object.assign(We.getDefaults(), {
          envelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .005,
            decay: .1,
            release: 1,
            sustain: .9
          }),
          filter: Object.assign(F(Xe.getDefaults(), Object.keys(Ct.getDefaults())), {
            Q: 1,
            rolloff: -12,
            type: "lowpass"
          }),
          filterEnvelope: Object.assign(F(He.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .6,
            baseFrequency: 200,
            decay: .2,
            exponent: 2,
            octaves: 3,
            release: 2,
            sustain: .5
          }),
          oscillator: Object.assign(F(xe.getDefaults(), Object.keys(ne.getDefaults())), {
            type: "sawtooth"
          })
        });
      }

      _triggerEnvelopeAttack(t, e = 1) {
        if (this.envelope.triggerAttack(t, e), this.filterEnvelope.triggerAttack(t), this.oscillator.start(t), 0 === this.envelope.sustain) {
          const e = this.toSeconds(this.envelope.attack),
                n = this.toSeconds(this.envelope.decay);
          this.oscillator.stop(t + e + n);
        }
      }

      _triggerEnvelopeRelease(t) {
        this.envelope.triggerRelease(t), this.filterEnvelope.triggerRelease(t), this.oscillator.stop(t + this.toSeconds(this.envelope.release));
      }

      getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
      }

      dispose() {
        return super.dispose(), this.oscillator.dispose(), this.envelope.dispose(), this.filterEnvelope.dispose(), this.filter.dispose(), this;
      }

    }

    class Je extends We {
      constructor() {
        super(q(Je.getDefaults(), arguments)), this.name = "DuoSynth";
        const t = q(Je.getDefaults(), arguments);
        this.voice0 = new $e(Object.assign(t.voice0, {
          context: this.context,
          onsilence: () => this.onsilence(this)
        })), this.voice1 = new $e(Object.assign(t.voice1, {
          context: this.context
        })), this.harmonicity = new fe({
          context: this.context,
          units: "positive",
          value: t.harmonicity
        }), this._vibrato = new Se({
          frequency: t.vibratoRate,
          context: this.context,
          min: -50,
          max: 50
        }), this._vibrato.start(), this.vibratoRate = this._vibrato.frequency, this._vibratoGain = new Mt({
          context: this.context,
          units: "normalRange",
          gain: t.vibratoAmount
        }), this.vibratoAmount = this._vibratoGain.gain, this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: 440
        }), this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), this.frequency.connect(this.voice0.frequency), this.frequency.chain(this.harmonicity, this.voice1.frequency), this._vibrato.connect(this._vibratoGain), this._vibratoGain.fan(this.voice0.detune, this.voice1.detune), this.detune.fan(this.voice0.detune, this.voice1.detune), this.voice0.connect(this.output), this.voice1.connect(this.output), $(this, ["voice0", "voice1", "frequency", "vibratoAmount", "vibratoRate"]);
      }

      getLevelAtTime(t) {
        return t = this.toSeconds(t), this.voice0.envelope.getValueAtTime(t) + this.voice1.envelope.getValueAtTime(t);
      }

      static getDefaults() {
        return R(We.getDefaults(), {
          vibratoAmount: .5,
          vibratoRate: 5,
          harmonicity: 1.5,
          voice0: R(F($e.getDefaults(), Object.keys(We.getDefaults())), {
            filterEnvelope: {
              attack: .01,
              decay: 0,
              sustain: 1,
              release: .5
            },
            envelope: {
              attack: .01,
              decay: 0,
              sustain: 1,
              release: .5
            }
          }),
          voice1: R(F($e.getDefaults(), Object.keys(We.getDefaults())), {
            filterEnvelope: {
              attack: .01,
              decay: 0,
              sustain: 1,
              release: .5
            },
            envelope: {
              attack: .01,
              decay: 0,
              sustain: 1,
              release: .5
            }
          })
        });
      }

      _triggerEnvelopeAttack(t, e) {
        this.voice0._triggerEnvelopeAttack(t, e), this.voice1._triggerEnvelopeAttack(t, e);
      }

      _triggerEnvelopeRelease(t) {
        return this.voice0._triggerEnvelopeRelease(t), this.voice1._triggerEnvelopeRelease(t), this;
      }

      dispose() {
        return super.dispose(), this.voice0.dispose(), this.voice1.dispose(), this.frequency.dispose(), this.detune.dispose(), this._vibrato.dispose(), this.vibratoRate.dispose(), this._vibratoGain.dispose(), this.harmonicity.dispose(), this;
      }

    }

    class Ke extends Ye {
      constructor() {
        super(q(Ke.getDefaults(), arguments)), this.name = "FMSynth";
        const t = q(Ke.getDefaults(), arguments);
        this.modulationIndex = new fe({
          context: this.context,
          value: t.modulationIndex
        }), this.frequency.connect(this._carrier.frequency), this.frequency.chain(this.harmonicity, this._modulator.frequency), this.frequency.chain(this.modulationIndex, this._modulationNode), this.detune.fan(this._carrier.detune, this._modulator.detune), this._modulator.connect(this._modulationNode.gain), this._modulationNode.connect(this._carrier.frequency), this._carrier.connect(this.output);
      }

      static getDefaults() {
        return Object.assign(Ye.getDefaults(), {
          modulationIndex: 10
        });
      }

      dispose() {
        return super.dispose(), this.modulationIndex.dispose(), this;
      }

    }

    const tn = [1, 1.483, 1.932, 2.546, 2.63, 3.897];

    class en extends We {
      constructor() {
        super(q(en.getDefaults(), arguments)), this.name = "MetalSynth", this._oscillators = [], this._freqMultipliers = [];
        const t = q(en.getDefaults(), arguments);
        this.detune = new Rt({
          context: this.context,
          units: "cents",
          value: t.detune
        }), this.frequency = new Rt({
          context: this.context,
          units: "frequency"
        }), this._amplitude = new Mt({
          context: this.context,
          gain: 0
        }).connect(this.output), this._highpass = new Xe({
          Q: 0,
          context: this.context,
          type: "highpass"
        }).connect(this._amplitude);

        for (let e = 0; e < tn.length; e++) {
          const n = new me({
            context: this.context,
            harmonicity: t.harmonicity,
            modulationIndex: t.modulationIndex,
            modulationType: "square",
            onstop: 0 === e ? () => this.onsilence(this) : K,
            type: "square"
          });
          n.connect(this._highpass), this._oscillators[e] = n;
          const s = new fe({
            context: this.context,
            value: tn[e]
          });
          this._freqMultipliers[e] = s, this.frequency.chain(s, n.frequency), this.detune.connect(n.detune);
        }

        this._filterFreqScaler = new Te({
          context: this.context,
          max: 7e3,
          min: this.toFrequency(t.resonance)
        }), this.envelope = new Le({
          attack: t.envelope.attack,
          attackCurve: "linear",
          context: this.context,
          decay: t.envelope.decay,
          release: t.envelope.release,
          sustain: 0
        }), this.envelope.chain(this._filterFreqScaler, this._highpass.frequency), this.envelope.connect(this._amplitude.gain), this._octaves = t.octaves, this.octaves = t.octaves;
      }

      static getDefaults() {
        return R(We.getDefaults(), {
          envelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            attack: .001,
            decay: 1.4,
            release: .2
          }),
          harmonicity: 5.1,
          modulationIndex: 32,
          octaves: 1.5,
          resonance: 4e3
        });
      }

      _triggerEnvelopeAttack(t, e = 1) {
        return this.envelope.triggerAttack(t, e), this._oscillators.forEach(e => e.start(t)), 0 === this.envelope.sustain && this._oscillators.forEach(e => {
          e.stop(t + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
        }), this;
      }

      _triggerEnvelopeRelease(t) {
        return this.envelope.triggerRelease(t), this._oscillators.forEach(e => e.stop(t + this.toSeconds(this.envelope.release))), this;
      }

      getLevelAtTime(t) {
        return t = this.toSeconds(t), this.envelope.getValueAtTime(t);
      }

      get modulationIndex() {
        return this._oscillators[0].modulationIndex.value;
      }

      set modulationIndex(t) {
        this._oscillators.forEach(e => e.modulationIndex.value = t);
      }

      get harmonicity() {
        return this._oscillators[0].harmonicity.value;
      }

      set harmonicity(t) {
        this._oscillators.forEach(e => e.harmonicity.value = t);
      }

      get resonance() {
        return this._filterFreqScaler.min;
      }

      set resonance(t) {
        this._filterFreqScaler.min = this.toFrequency(t), this.octaves = this._octaves;
      }

      get octaves() {
        return this._octaves;
      }

      set octaves(t) {
        this._octaves = t, this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, t);
      }

      dispose() {
        return super.dispose(), this._oscillators.forEach(t => t.dispose()), this._freqMultipliers.forEach(t => t.dispose()), this.frequency.dispose(), this.detune.dispose(), this._filterFreqScaler.dispose(), this._amplitude.dispose(), this.envelope.dispose(), this._highpass.dispose(), this;
      }

    }

    class nn extends Ge {
      constructor() {
        super(q(nn.getDefaults(), arguments)), this.name = "MembraneSynth", this.portamento = 0;
        const t = q(nn.getDefaults(), arguments);
        this.pitchDecay = t.pitchDecay, this.octaves = t.octaves, $(this, ["oscillator", "envelope"]);
      }

      static getDefaults() {
        return R(We.getDefaults(), Ge.getDefaults(), {
          envelope: {
            attack: .001,
            attackCurve: "exponential",
            decay: .4,
            release: 1.4,
            sustain: .01
          },
          octaves: 10,
          oscillator: {
            type: "sine"
          },
          pitchDecay: .05
        });
      }

      setNote(t, e) {
        const n = this.toSeconds(e),
              s = this.toFrequency(t instanceof gt ? t.toFrequency() : t),
              i = s * this.octaves;
        return this.oscillator.frequency.setValueAtTime(i, n), this.oscillator.frequency.exponentialRampToValueAtTime(s, n + this.toSeconds(this.pitchDecay)), this;
      }

      dispose() {
        return super.dispose(), this;
      }

    }

    O([Ce(0)], nn.prototype, "octaves", void 0), O([ke(0)], nn.prototype, "pitchDecay", void 0);

    class sn extends Be {
      constructor() {
        super(q(sn.getDefaults(), arguments)), this.name = "NoiseSynth";
        const t = q(sn.getDefaults(), arguments);
        this.noise = new ie(Object.assign({
          context: this.context
        }, t.noise)), this.envelope = new Ue(Object.assign({
          context: this.context
        }, t.envelope)), this.noise.chain(this.envelope, this.output);
      }

      static getDefaults() {
        return Object.assign(Be.getDefaults(), {
          envelope: Object.assign(F(Le.getDefaults(), Object.keys(Ct.getDefaults())), {
            decay: .1,
            sustain: 0
          }),
          noise: Object.assign(F(ie.getDefaults(), Object.keys(ne.getDefaults())), {
            type: "white"
          })
        });
      }

      triggerAttack(t, e = 1) {
        return t = this.toSeconds(t), this.envelope.triggerAttack(t, e), this.noise.start(t), 0 === this.envelope.sustain && this.noise.stop(t + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay)), this;
      }

      triggerRelease(t) {
        return t = this.toSeconds(t), this.envelope.triggerRelease(t), this.noise.stop(t + this.toSeconds(this.envelope.release)), this;
      }

      sync() {
        return this._syncMethod("triggerAttack", 0), this._syncMethod("triggerRelease", 0), this;
      }

      triggerAttackRelease(t, e, n = 1) {
        return e = this.toSeconds(e), t = this.toSeconds(t), this.triggerAttack(e, n), this.triggerRelease(e + t), this;
      }

      dispose() {
        return super.dispose(), this.noise.dispose(), this.envelope.dispose(), this;
      }

    }

    const on = new Set();

    function rn(t) {
      on.add(t);
    }

    function an(t, e) {
      const n = `registerProcessor("${t}", ${e})`;
      on.add(n);
    }

    class cn extends Ct {
      constructor(t) {
        super(t), this.name = "ToneAudioWorklet", this.workletOptions = {}, this.onprocessorerror = K;

        const e = URL.createObjectURL(new Blob([Array.from(on).join("\n")], {
          type: "text/javascript"
        })),
              n = this._audioWorkletName();

        this._dummyGain = this.context.createGain(), this._dummyParam = this._dummyGain.gain, this.context.addAudioWorkletModule(e, n).then(() => {
          this.disposed || (this._worklet = this.context.createAudioWorkletNode(n, this.workletOptions), this._worklet.onprocessorerror = this.onprocessorerror.bind(this), this.onReady(this._worklet));
        });
      }

      dispose() {
        return super.dispose(), this._dummyGain.disconnect(), this._worklet && (this._worklet.port.postMessage("dispose"), this._worklet.disconnect()), this;
      }

    }

    rn('\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it\'s disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === "dispose") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n');
    rn("\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n");
    rn("\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n");
    an("feedback-comb-filter", '\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: "delayTime",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}, {\n\t\t\t\tname: "feedback",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n');

    class un extends cn {
      constructor() {
        super(q(un.getDefaults(), arguments, ["delayTime", "resonance"])), this.name = "FeedbackCombFilter";
        const t = q(un.getDefaults(), arguments, ["delayTime", "resonance"]);
        this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this.delayTime = new St({
          context: this.context,
          value: t.delayTime,
          units: "time",
          minValue: 0,
          maxValue: 1,
          param: this._dummyParam,
          swappable: !0
        }), this.resonance = new St({
          context: this.context,
          value: t.resonance,
          units: "normalRange",
          param: this._dummyParam,
          swappable: !0
        }), $(this, ["resonance", "delayTime"]);
      }

      _audioWorkletName() {
        return "feedback-comb-filter";
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          delayTime: .1,
          resonance: .5
        });
      }

      onReady(t) {
        kt(this.input, t, this.output);
        const e = t.parameters.get("delayTime");
        this.delayTime.setParam(e);
        const n = t.parameters.get("feedback");
        this.resonance.setParam(n);
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.delayTime.dispose(), this.resonance.dispose(), this;
      }

    }

    class hn extends Ct {
      constructor() {
        super(q(hn.getDefaults(), arguments, ["frequency", "type"])), this.name = "OnePoleFilter";
        const t = q(hn.getDefaults(), arguments, ["frequency", "type"]);
        this._frequency = t.frequency, this._type = t.type, this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this._createFilter();
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          frequency: 880,
          type: "lowpass"
        });
      }

      _createFilter() {
        const t = this._filter,
              e = this.toFrequency(this._frequency),
              n = 1 / (2 * Math.PI * e);

        if ("lowpass" === this._type) {
          const t = 1 / (n * this.context.sampleRate),
                e = t - 1;
          this._filter = this.context.createIIRFilter([t, 0], [1, e]);
        } else {
          const t = 1 / (n * this.context.sampleRate) - 1;
          this._filter = this.context.createIIRFilter([1, -1], [1, t]);
        }

        this.input.chain(this._filter, this.output), t && this.context.setTimeout(() => {
          this.disposed || (this.input.disconnect(t), t.disconnect());
        }, this.blockTime);
      }

      get frequency() {
        return this._frequency;
      }

      set frequency(t) {
        this._frequency = t, this._createFilter();
      }

      get type() {
        return this._type;
      }

      set type(t) {
        this._type = t, this._createFilter();
      }

      getFrequencyResponse(t = 128) {
        const e = new Float32Array(t);

        for (let n = 0; n < t; n++) {
          const s = 19980 * Math.pow(n / t, 2) + 20;
          e[n] = s;
        }

        const n = new Float32Array(t),
              s = new Float32Array(t);
        return this._filter.getFrequencyResponse(e, n, s), n;
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this._filter.disconnect(), this;
      }

    }

    class ln extends Ct {
      constructor() {
        super(q(ln.getDefaults(), arguments, ["delayTime", "resonance", "dampening"])), this.name = "LowpassCombFilter";
        const t = q(ln.getDefaults(), arguments, ["delayTime", "resonance", "dampening"]);
        this._combFilter = this.output = new un({
          context: this.context,
          delayTime: t.delayTime,
          resonance: t.resonance
        }), this.delayTime = this._combFilter.delayTime, this.resonance = this._combFilter.resonance, this._lowpass = this.input = new hn({
          context: this.context,
          frequency: t.dampening,
          type: "lowpass"
        }), this._lowpass.connect(this._combFilter);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          dampening: 3e3,
          delayTime: .1,
          resonance: .5
        });
      }

      get dampening() {
        return this._lowpass.frequency;
      }

      set dampening(t) {
        this._lowpass.frequency = t;
      }

      dispose() {
        return super.dispose(), this._combFilter.dispose(), this._lowpass.dispose(), this;
      }

    }

    class dn extends Be {
      constructor() {
        super(q(dn.getDefaults(), arguments)), this.name = "PluckSynth";
        const t = q(dn.getDefaults(), arguments);
        this._noise = new ie({
          context: this.context,
          type: "pink"
        }), this.attackNoise = t.attackNoise, this._lfcf = new ln({
          context: this.context,
          dampening: t.dampening,
          resonance: t.resonance
        }), this.resonance = t.resonance, this.release = t.release, this._noise.connect(this._lfcf), this._lfcf.connect(this.output);
      }

      static getDefaults() {
        return R(Be.getDefaults(), {
          attackNoise: 1,
          dampening: 4e3,
          resonance: .7,
          release: 1
        });
      }

      get dampening() {
        return this._lfcf.dampening;
      }

      set dampening(t) {
        this._lfcf.dampening = t;
      }

      triggerAttack(t, e) {
        const n = this.toFrequency(t);
        e = this.toSeconds(e);
        const s = 1 / n;
        return this._lfcf.delayTime.setValueAtTime(s, e), this._noise.start(e), this._noise.stop(e + s * this.attackNoise), this._lfcf.resonance.cancelScheduledValues(e), this._lfcf.resonance.setValueAtTime(this.resonance, e), this;
      }

      triggerRelease(t) {
        return this._lfcf.resonance.linearRampTo(0, this.release, t), this;
      }

      dispose() {
        return super.dispose(), this._noise.dispose(), this._lfcf.dispose(), this;
      }

    }

    class pn extends Be {
      constructor() {
        super(q(pn.getDefaults(), arguments, ["voice", "options"])), this.name = "PolySynth", this._availableVoices = [], this._activeVoices = [], this._voices = [], this._gcTimeout = -1, this._averageActiveVoices = 0;
        const t = q(pn.getDefaults(), arguments, ["voice", "options"]);
        r(!m(t.voice), "DEPRECATED: The polyphony count is no longer the first argument.");
        const e = t.voice.getDefaults();
        this.options = Object.assign(e, t.options), this.voice = t.voice, this.maxPolyphony = t.maxPolyphony, this._dummyVoice = this._getNextAvailableVoice();

        const n = this._voices.indexOf(this._dummyVoice);

        this._voices.splice(n, 1), this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);
      }

      static getDefaults() {
        return Object.assign(Be.getDefaults(), {
          maxPolyphony: 32,
          options: {},
          voice: Ge
        });
      }

      get activeVoices() {
        return this._activeVoices.length;
      }

      _makeVoiceAvailable(t) {
        this._availableVoices.push(t);

        const e = this._activeVoices.findIndex(e => e.voice === t);

        this._activeVoices.splice(e, 1);
      }

      _getNextAvailableVoice() {
        if (this._availableVoices.length) return this._availableVoices.shift();

        if (this._voices.length < this.maxPolyphony) {
          const t = new this.voice(Object.assign(this.options, {
            context: this.context,
            onsilence: this._makeVoiceAvailable.bind(this)
          }));
          return t.connect(this.output), this._voices.push(t), t;
        }

        d("Max polyphony exceeded. Note dropped.");
      }

      _collectGarbage() {
        if (this._averageActiveVoices = Math.max(.95 * this._averageActiveVoices, this.activeVoices), this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {
          const t = this._availableVoices.shift(),
                e = this._voices.indexOf(t);

          this._voices.splice(e, 1), this.context.isOffline || t.dispose();
        }
      }

      _triggerAttack(t, e, n) {
        t.forEach(t => {
          const s = new Jt(this.context, t).toMidi(),
                i = this._getNextAvailableVoice();

          i && (i.triggerAttack(t, e, n), this._activeVoices.push({
            midi: s,
            voice: i,
            released: !1
          }), this.log("triggerAttack", t, e));
        });
      }

      _triggerRelease(t, e) {
        t.forEach(t => {
          const n = new Jt(this.context, t).toMidi(),
                s = this._activeVoices.find(({
            midi: t,
            released: e
          }) => t === n && !e);

          s && (s.voice.triggerRelease(e), s.released = !0, this.log("triggerRelease", t, e));
        });
      }

      _scheduleEvent(t, e, n, s) {
        r(!this.disposed, "Synth was already disposed"), n <= this.now() ? "attack" === t ? this._triggerAttack(e, n, s) : this._triggerRelease(e, n) : this.context.setTimeout(() => {
          this._scheduleEvent(t, e, n, s);
        }, n - this.now());
      }

      triggerAttack(t, e, n) {
        Array.isArray(t) || (t = [t]);
        const s = this.toSeconds(e);
        return this._scheduleEvent("attack", t, s, n), this;
      }

      triggerRelease(t, e) {
        Array.isArray(t) || (t = [t]);
        const n = this.toSeconds(e);
        return this._scheduleEvent("release", t, n), this;
      }

      triggerAttackRelease(t, e, n, s) {
        const i = this.toSeconds(n);

        if (this.triggerAttack(t, i, s), y(e)) {
          r(y(t), "If the duration is an array, the notes must also be an array"), t = t;

          for (let n = 0; n < t.length; n++) {
            const s = e[Math.min(n, e.length - 1)],
                  o = this.toSeconds(s);
            r(o > 0, "The duration must be greater than 0"), this.triggerRelease(t[n], i + o);
          }
        } else {
          const n = this.toSeconds(e);
          r(n > 0, "The duration must be greater than 0"), this.triggerRelease(t, i + n);
        }

        return this;
      }

      sync() {
        return this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 1), this;
      }

      set(t) {
        const e = F(t, ["onsilence", "context"]);
        return this.options = R(this.options, e), this._voices.forEach(t => t.set(e)), this._dummyVoice.set(e), this;
      }

      get() {
        return this._dummyVoice.get();
      }

      releaseAll(t) {
        const e = this.toSeconds(t);
        return this._activeVoices.forEach(({
          voice: t
        }) => {
          t.triggerRelease(e);
        }), this;
      }

      dispose() {
        return super.dispose(), this._dummyVoice.dispose(), this._voices.forEach(t => t.dispose()), this._activeVoices = [], this._availableVoices = [], this.context.clearInterval(this._gcTimeout), this;
      }

    }

    class fn extends Be {
      constructor() {
        super(q(fn.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls")), this.name = "Sampler", this._activeSources = new Map();
        const t = q(fn.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls"),
              e = {};
        Object.keys(t.urls).forEach(n => {
          const s = parseInt(n, 10);

          if (r(x(n) || m(s) && isFinite(s), "url key is neither a note or midi pitch: " + n), x(n)) {
            const s = new gt(this.context, n).toMidi();
            e[s] = t.urls[n];
          } else m(s) && isFinite(s) && (e[s] = t.urls[s]);
        }), this._buffers = new $t({
          urls: e,
          onload: t.onload,
          baseUrl: t.baseUrl,
          onerror: t.onerror
        }), this.attack = t.attack, this.release = t.release, this.curve = t.curve, this._buffers.loaded && Promise.resolve().then(t.onload);
      }

      static getDefaults() {
        return Object.assign(Be.getDefaults(), {
          attack: 0,
          baseUrl: "",
          curve: "exponential",
          onload: K,
          onerror: K,
          release: .1,
          urls: {}
        });
      }

      _findClosest(t) {
        let e = 0;

        for (; e < 96;) {
          if (this._buffers.has(t + e)) return -e;
          if (this._buffers.has(t - e)) return e;
          e++;
        }

        throw new Error("No available buffers for note: " + t);
      }

      triggerAttack(t, e, n = 1) {
        return this.log("triggerAttack", t, e, n), Array.isArray(t) || (t = [t]), t.forEach(t => {
          const s = dt(new gt(this.context, t).toFrequency()),
                i = Math.round(s),
                o = s - i,
                r = this._findClosest(i),
                a = i - r,
                c = this._buffers.get(a),
                u = ut(r + o),
                h = new se({
            url: c,
            context: this.context,
            curve: this.curve,
            fadeIn: this.attack,
            fadeOut: this.release,
            playbackRate: u
          }).connect(this.output);

          h.start(e, 0, c.duration / u, n), y(this._activeSources.get(i)) || this._activeSources.set(i, []), this._activeSources.get(i).push(h), h.onended = () => {
            if (this._activeSources && this._activeSources.has(i)) {
              const t = this._activeSources.get(i),
                    e = t.indexOf(h);

              -1 !== e && t.splice(e, 1);
            }
          };
        }), this;
      }

      triggerRelease(t, e) {
        return this.log("triggerRelease", t, e), Array.isArray(t) || (t = [t]), t.forEach(t => {
          const n = new gt(this.context, t).toMidi();

          if (this._activeSources.has(n) && this._activeSources.get(n).length) {
            const t = this._activeSources.get(n);

            e = this.toSeconds(e), t.forEach(t => {
              t.stop(e);
            }), this._activeSources.set(n, []);
          }
        }), this;
      }

      releaseAll(t) {
        const e = this.toSeconds(t);
        return this._activeSources.forEach(t => {
          for (; t.length;) {
            t.shift().stop(e);
          }
        }), this;
      }

      sync() {
        return this._syncMethod("triggerAttack", 1), this._syncMethod("triggerRelease", 1), this;
      }

      triggerAttackRelease(t, e, n, s = 1) {
        const i = this.toSeconds(n);
        return this.triggerAttack(t, i, s), y(e) ? (r(y(t), "notes must be an array when duration is array"), t.forEach((t, n) => {
          const s = e[Math.min(n, e.length - 1)];
          this.triggerRelease(t, i + this.toSeconds(s));
        })) : this.triggerRelease(t, i + this.toSeconds(e)), this;
      }

      add(t, e, n) {
        if (r(x(t) || isFinite(t), "note must be a pitch or midi: " + t), x(t)) {
          const s = new gt(this.context, t).toMidi();

          this._buffers.add(s, e, n);
        } else this._buffers.add(t, e, n);

        return this;
      }

      get loaded() {
        return this._buffers.loaded;
      }

      dispose() {
        return super.dispose(), this._buffers.dispose(), this._activeSources.forEach(t => {
          t.forEach(t => t.dispose());
        }), this._activeSources.clear(), this;
      }

    }

    O([ke(0)], fn.prototype, "attack", void 0), O([ke(0)], fn.prototype, "release", void 0);

    class _n extends Tt {
      constructor() {
        super(q(_n.getDefaults(), arguments, ["callback", "value"])), this.name = "ToneEvent", this._state = new Ot("stopped"), this._startOffset = 0;
        const t = q(_n.getDefaults(), arguments, ["callback", "value"]);
        this._loop = t.loop, this.callback = t.callback, this.value = t.value, this._loopStart = this.toTicks(t.loopStart), this._loopEnd = this.toTicks(t.loopEnd), this._playbackRate = t.playbackRate, this._probability = t.probability, this._humanize = t.humanize, this.mute = t.mute, this._playbackRate = t.playbackRate, this._state.increasing = !0, this._rescheduleEvents();
      }

      static getDefaults() {
        return Object.assign(Tt.getDefaults(), {
          callback: K,
          humanize: !1,
          loop: !1,
          loopEnd: "1m",
          loopStart: 0,
          mute: !1,
          playbackRate: 1,
          probability: 1,
          value: null
        });
      }

      _rescheduleEvents(t = -1) {
        this._state.forEachFrom(t, t => {
          let e;

          if ("started" === t.state) {
            -1 !== t.id && this.context.transport.clear(t.id);
            const n = t.time + Math.round(this.startOffset / this._playbackRate);

            if (!0 === this._loop || m(this._loop) && this._loop > 1) {
              e = 1 / 0, m(this._loop) && (e = this._loop * this._getLoopDuration());

              const s = this._state.getAfter(n);

              null !== s && (e = Math.min(e, s.time - n)), e !== 1 / 0 && (this._state.setStateAtTime("stopped", n + e + 1, {
                id: -1
              }), e = new Lt(this.context, e));
              const i = new Lt(this.context, this._getLoopDuration());
              t.id = this.context.transport.scheduleRepeat(this._tick.bind(this), i, new Lt(this.context, n), e);
            } else t.id = this.context.transport.schedule(this._tick.bind(this), new Lt(this.context, n));
          }
        });
      }

      get state() {
        return this._state.getValueAtTime(this.context.transport.ticks);
      }

      get startOffset() {
        return this._startOffset;
      }

      set startOffset(t) {
        this._startOffset = t;
      }

      get probability() {
        return this._probability;
      }

      set probability(t) {
        this._probability = t;
      }

      get humanize() {
        return this._humanize;
      }

      set humanize(t) {
        this._humanize = t;
      }

      start(t) {
        const e = this.toTicks(t);
        return "stopped" === this._state.getValueAtTime(e) && (this._state.add({
          id: -1,
          state: "started",
          time: e
        }), this._rescheduleEvents(e)), this;
      }

      stop(t) {
        this.cancel(t);
        const e = this.toTicks(t);

        if ("started" === this._state.getValueAtTime(e)) {
          this._state.setStateAtTime("stopped", e, {
            id: -1
          });

          const t = this._state.getBefore(e);

          let n = e;
          null !== t && (n = t.time), this._rescheduleEvents(n);
        }

        return this;
      }

      cancel(t) {
        t = I(t, -1 / 0);
        const e = this.toTicks(t);
        return this._state.forEachFrom(e, t => {
          this.context.transport.clear(t.id);
        }), this._state.cancel(e), this;
      }

      _tick(t) {
        const e = this.context.transport.getTicksAtTime(t);

        if (!this.mute && "started" === this._state.getValueAtTime(e)) {
          if (this.probability < 1 && Math.random() > this.probability) return;

          if (this.humanize) {
            let e = .02;
            v(this.humanize) || (e = this.toSeconds(this.humanize)), t += (2 * Math.random() - 1) * e;
          }

          this.callback(t, this.value);
        }
      }

      _getLoopDuration() {
        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
      }

      get loop() {
        return this._loop;
      }

      set loop(t) {
        this._loop = t, this._rescheduleEvents();
      }

      get playbackRate() {
        return this._playbackRate;
      }

      set playbackRate(t) {
        this._playbackRate = t, this._rescheduleEvents();
      }

      get loopEnd() {
        return new Lt(this.context, this._loopEnd).toSeconds();
      }

      set loopEnd(t) {
        this._loopEnd = this.toTicks(t), this._loop && this._rescheduleEvents();
      }

      get loopStart() {
        return new Lt(this.context, this._loopStart).toSeconds();
      }

      set loopStart(t) {
        this._loopStart = this.toTicks(t), this._loop && this._rescheduleEvents();
      }

      get progress() {
        if (this._loop) {
          const t = this.context.transport.ticks,
                e = this._state.get(t);

          if (null !== e && "started" === e.state) {
            const n = this._getLoopDuration();

            return (t - e.time) % n / n;
          }

          return 0;
        }

        return 0;
      }

      dispose() {
        return super.dispose(), this.cancel(), this._state.dispose(), this;
      }

    }

    class mn extends Tt {
      constructor() {
        super(q(mn.getDefaults(), arguments, ["callback", "interval"])), this.name = "Loop";
        const t = q(mn.getDefaults(), arguments, ["callback", "interval"]);
        this._event = new _n({
          context: this.context,
          callback: this._tick.bind(this),
          loop: !0,
          loopEnd: t.interval,
          playbackRate: t.playbackRate,
          probability: t.probability
        }), this.callback = t.callback, this.iterations = t.iterations;
      }

      static getDefaults() {
        return Object.assign(Tt.getDefaults(), {
          interval: "4n",
          callback: K,
          playbackRate: 1,
          iterations: 1 / 0,
          probability: 1,
          mute: !1,
          humanize: !1
        });
      }

      start(t) {
        return this._event.start(t), this;
      }

      stop(t) {
        return this._event.stop(t), this;
      }

      cancel(t) {
        return this._event.cancel(t), this;
      }

      _tick(t) {
        this.callback(t);
      }

      get state() {
        return this._event.state;
      }

      get progress() {
        return this._event.progress;
      }

      get interval() {
        return this._event.loopEnd;
      }

      set interval(t) {
        this._event.loopEnd = t;
      }

      get playbackRate() {
        return this._event.playbackRate;
      }

      set playbackRate(t) {
        this._event.playbackRate = t;
      }

      get humanize() {
        return this._event.humanize;
      }

      set humanize(t) {
        this._event.humanize = t;
      }

      get probability() {
        return this._event.probability;
      }

      set probability(t) {
        this._event.probability = t;
      }

      get mute() {
        return this._event.mute;
      }

      set mute(t) {
        this._event.mute = t;
      }

      get iterations() {
        return !0 === this._event.loop ? 1 / 0 : this._event.loop;
      }

      set iterations(t) {
        this._event.loop = t === 1 / 0 || t;
      }

      dispose() {
        return super.dispose(), this._event.dispose(), this;
      }

    }

    class gn extends _n {
      constructor() {
        super(q(gn.getDefaults(), arguments, ["callback", "events"])), this.name = "Part", this._state = new Ot("stopped"), this._events = new Set();
        const t = q(gn.getDefaults(), arguments, ["callback", "events"]);
        this._state.increasing = !0, t.events.forEach(t => {
          y(t) ? this.add(t[0], t[1]) : this.add(t);
        });
      }

      static getDefaults() {
        return Object.assign(_n.getDefaults(), {
          events: []
        });
      }

      start(t, e) {
        const n = this.toTicks(t);

        if ("started" !== this._state.getValueAtTime(n)) {
          e = I(e, this._loop ? this._loopStart : 0), e = this._loop ? I(e, this._loopStart) : I(e, 0);
          const t = this.toTicks(e);
          this._state.add({
            id: -1,
            offset: t,
            state: "started",
            time: n
          }), this._forEach(e => {
            this._startNote(e, n, t);
          });
        }

        return this;
      }

      _startNote(t, e, n) {
        e -= n, this._loop ? t.startOffset >= this._loopStart && t.startOffset < this._loopEnd ? (t.startOffset < n && (e += this._getLoopDuration()), t.start(new Lt(this.context, e))) : t.startOffset < this._loopStart && t.startOffset >= n && (t.loop = !1, t.start(new Lt(this.context, e))) : t.startOffset >= n && t.start(new Lt(this.context, e));
      }

      get startOffset() {
        return this._startOffset;
      }

      set startOffset(t) {
        this._startOffset = t, this._forEach(t => {
          t.startOffset += this._startOffset;
        });
      }

      stop(t) {
        const e = this.toTicks(t);
        return this._state.cancel(e), this._state.setStateAtTime("stopped", e), this._forEach(e => {
          e.stop(t);
        }), this;
      }

      at(t, e) {
        const n = new xt(this.context, t).toTicks(),
              s = new Lt(this.context, 1).toSeconds(),
              i = this._events.values();

        let o = i.next();

        for (; !o.done;) {
          const t = o.value;
          if (Math.abs(n - t.startOffset) < s) return f(e) && (t.value = e), t;
          o = i.next();
        }

        return f(e) ? (this.add(t, e), this.at(t)) : null;
      }

      add(t, e) {
        t instanceof Object && Reflect.has(t, "time") && (t = (e = t).time);
        const n = this.toTicks(t);
        let s;
        return e instanceof _n ? (s = e, s.callback = this._tick.bind(this)) : s = new _n({
          callback: this._tick.bind(this),
          context: this.context,
          value: e
        }), s.startOffset = n, s.set({
          humanize: this.humanize,
          loop: this.loop,
          loopEnd: this.loopEnd,
          loopStart: this.loopStart,
          playbackRate: this.playbackRate,
          probability: this.probability
        }), this._events.add(s), this._restartEvent(s), this;
      }

      _restartEvent(t) {
        this._state.forEach(e => {
          "started" === e.state ? this._startNote(t, e.time, e.offset) : t.stop(new Lt(this.context, e.time));
        });
      }

      remove(t, e) {
        return g(t) && t.hasOwnProperty("time") && (t = (e = t).time), t = this.toTicks(t), this._events.forEach(n => {
          n.startOffset === t && (p(e) || f(e) && n.value === e) && (this._events.delete(n), n.dispose());
        }), this;
      }

      clear() {
        return this._forEach(t => t.dispose()), this._events.clear(), this;
      }

      cancel(t) {
        return this._forEach(e => e.cancel(t)), this._state.cancel(this.toTicks(t)), this;
      }

      _forEach(t) {
        return this._events && this._events.forEach(e => {
          e instanceof gn ? e._forEach(t) : t(e);
        }), this;
      }

      _setAll(t, e) {
        this._forEach(n => {
          n[t] = e;
        });
      }

      _tick(t, e) {
        this.mute || this.callback(t, e);
      }

      _testLoopBoundries(t) {
        this._loop && (t.startOffset < this._loopStart || t.startOffset >= this._loopEnd) ? t.cancel(0) : "stopped" === t.state && this._restartEvent(t);
      }

      get probability() {
        return this._probability;
      }

      set probability(t) {
        this._probability = t, this._setAll("probability", t);
      }

      get humanize() {
        return this._humanize;
      }

      set humanize(t) {
        this._humanize = t, this._setAll("humanize", t);
      }

      get loop() {
        return this._loop;
      }

      set loop(t) {
        this._loop = t, this._forEach(e => {
          e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.loop = t, this._testLoopBoundries(e);
        });
      }

      get loopEnd() {
        return new Lt(this.context, this._loopEnd).toSeconds();
      }

      set loopEnd(t) {
        this._loopEnd = this.toTicks(t), this._loop && this._forEach(e => {
          e.loopEnd = t, this._testLoopBoundries(e);
        });
      }

      get loopStart() {
        return new Lt(this.context, this._loopStart).toSeconds();
      }

      set loopStart(t) {
        this._loopStart = this.toTicks(t), this._loop && this._forEach(t => {
          t.loopStart = this.loopStart, this._testLoopBoundries(t);
        });
      }

      get playbackRate() {
        return this._playbackRate;
      }

      set playbackRate(t) {
        this._playbackRate = t, this._setAll("playbackRate", t);
      }

      get length() {
        return this._events.size;
      }

      dispose() {
        return super.dispose(), this.clear(), this;
      }

    }

    function* vn(t) {
      let e = 0;

      for (; e < t.length;) e = xn(e, t), yield t[e], e++;
    }

    function* yn(t) {
      let e = t.length - 1;

      for (; e >= 0;) e = xn(e, t), yield t[e], e--;
    }

    function* bn(t, e) {
      for (;;) yield* e(t);
    }

    function xn(t, e) {
      return B(t, 0, e.length - 1);
    }

    function* wn(t, e) {
      let n = e ? 0 : t.length - 1;

      for (;;) n = xn(n, t), yield t[n], e ? (n++, n >= t.length - 1 && (e = !1)) : (n--, n <= 0 && (e = !0));
    }

    function* Tn(t) {
      let e = 0,
          n = 0;

      for (; e < t.length;) e = xn(e, t), yield t[e], n++, e += n % 2 ? 2 : -1;
    }

    function* On(t) {
      let e = t.length - 1,
          n = 0;

      for (; e >= 0;) e = xn(e, t), yield t[e], n++, e += n % 2 ? -2 : 1;
    }

    function* Sn(t) {
      const e = [];

      for (let n = 0; n < t.length; n++) e.push(n);

      for (; e.length > 0;) {
        const n = xn(e.splice(Math.floor(e.length * Math.random()), 1)[0], t);
        yield t[n];
      }
    }

    function* Cn(t, e = "up", n = 0) {
      switch (r(t.length > 0, "The array must have more than one value in it"), e) {
        case "up":
          yield* bn(t, vn);

        case "down":
          yield* bn(t, yn);

        case "upDown":
          yield* wn(t, !0);

        case "downUp":
          yield* wn(t, !1);

        case "alternateUp":
          yield* bn(t, Tn);

        case "alternateDown":
          yield* bn(t, On);

        case "random":
          yield* function* (t) {
            for (;;) {
              const e = Math.floor(Math.random() * t.length);
              yield t[e];
            }
          }(t);

        case "randomOnce":
          yield* bn(t, Sn);

        case "randomWalk":
          yield* function* (t) {
            let e = Math.floor(Math.random() * t.length);

            for (;;) 0 === e ? e++ : e === t.length - 1 || Math.random() < .5 ? e-- : e++, yield t[e];
          }(t);
      }
    }

    class kn extends mn {
      constructor() {
        super(q(kn.getDefaults(), arguments, ["callback", "values", "pattern"])), this.name = "Pattern";
        const t = q(kn.getDefaults(), arguments, ["callback", "values", "pattern"]);
        this.callback = t.callback, this._values = t.values, this._pattern = Cn(t.values, t.pattern), this._type = t.pattern;
      }

      static getDefaults() {
        return Object.assign(mn.getDefaults(), {
          pattern: "up",
          values: [],
          callback: K
        });
      }

      _tick(t) {
        const e = this._pattern.next();

        this._value = e.value, this.callback(t, this._value);
      }

      get values() {
        return this._values;
      }

      set values(t) {
        this._values = t, this.pattern = this._type;
      }

      get value() {
        return this._value;
      }

      get pattern() {
        return this._type;
      }

      set pattern(t) {
        this._type = t, this._pattern = Cn(this._values, this._type);
      }

    }

    class An extends _n {
      constructor() {
        super(q(An.getDefaults(), arguments, ["callback", "events", "subdivision"])), this.name = "Sequence", this._part = new gn({
          callback: this._seqCallback.bind(this),
          context: this.context
        }), this._events = [], this._eventsArray = [];
        const t = q(An.getDefaults(), arguments, ["callback", "events", "subdivision"]);
        this._subdivision = this.toTicks(t.subdivision), this.events = t.events, this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.playbackRate = t.playbackRate, this.probability = t.probability, this.humanize = t.humanize, this.mute = t.mute, this.playbackRate = t.playbackRate;
      }

      static getDefaults() {
        return Object.assign(F(_n.getDefaults(), ["value"]), {
          events: [],
          loop: !0,
          loopEnd: 0,
          loopStart: 0,
          subdivision: "8n"
        });
      }

      _seqCallback(t, e) {
        null !== e && this.callback(t, e);
      }

      get events() {
        return this._events;
      }

      set events(t) {
        this.clear(), this._eventsArray = t, this._events = this._createSequence(this._eventsArray), this._eventsUpdated();
      }

      start(t, e) {
        return this._part.start(t, e ? this._indexTime(e) : e), this;
      }

      stop(t) {
        return this._part.stop(t), this;
      }

      get subdivision() {
        return new Lt(this.context, this._subdivision).toSeconds();
      }

      _createSequence(t) {
        return new Proxy(t, {
          get: (t, e) => t[e],
          set: (t, e, n) => (b(e) && isFinite(parseInt(e, 10)) && y(n) ? t[e] = this._createSequence(n) : t[e] = n, this._eventsUpdated(), !0)
        });
      }

      _eventsUpdated() {
        this._part.clear(), this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset), this.loopEnd = this.loopEnd;
      }

      _rescheduleSequence(t, e, n) {
        t.forEach((t, s) => {
          const i = s * e + n;
          if (y(t)) this._rescheduleSequence(t, e / t.length, i);else {
            const e = new Lt(this.context, i, "i").toSeconds();

            this._part.add(e, t);
          }
        });
      }

      _indexTime(t) {
        return new Lt(this.context, t * this._subdivision + this.startOffset).toSeconds();
      }

      clear() {
        return this._part.clear(), this;
      }

      dispose() {
        return super.dispose(), this._part.dispose(), this;
      }

      get loop() {
        return this._part.loop;
      }

      set loop(t) {
        this._part.loop = t;
      }

      get loopStart() {
        return this._loopStart;
      }

      set loopStart(t) {
        this._loopStart = t, this._part.loopStart = this._indexTime(t);
      }

      get loopEnd() {
        return this._loopEnd;
      }

      set loopEnd(t) {
        this._loopEnd = t, this._part.loopEnd = 0 === t ? this._indexTime(this._eventsArray.length) : this._indexTime(t);
      }

      get startOffset() {
        return this._part.startOffset;
      }

      set startOffset(t) {
        this._part.startOffset = t;
      }

      get playbackRate() {
        return this._part.playbackRate;
      }

      set playbackRate(t) {
        this._part.playbackRate = t;
      }

      get probability() {
        return this._part.probability;
      }

      set probability(t) {
        this._part.probability = t;
      }

      get progress() {
        return this._part.progress;
      }

      get humanize() {
        return this._part.humanize;
      }

      set humanize(t) {
        this._part.humanize = t;
      }

      get length() {
        return this._part.length;
      }

    }

    class Dn extends Ct {
      constructor() {
        super(Object.assign(q(Dn.getDefaults(), arguments, ["fade"]))), this.name = "CrossFade", this._panner = this.context.createStereoPanner(), this._split = this.context.createChannelSplitter(2), this._g2a = new Ee({
          context: this.context
        }), this.a = new Mt({
          context: this.context,
          gain: 0
        }), this.b = new Mt({
          context: this.context,
          gain: 0
        }), this.output = new Mt({
          context: this.context
        }), this._internalChannels = [this.a, this.b];
        const t = q(Dn.getDefaults(), arguments, ["fade"]);
        this.fade = new Rt({
          context: this.context,
          units: "normalRange",
          value: t.fade
        }), $(this, "fade"), this.context.getConstant(1).connect(this._panner), this._panner.connect(this._split), this._panner.channelCount = 1, this._panner.channelCountMode = "explicit", At(this._split, this.a.gain, 0), At(this._split, this.b.gain, 1), this.fade.chain(this._g2a, this._panner.pan), this.a.connect(this.output), this.b.connect(this.output);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          fade: .5
        });
      }

      dispose() {
        return super.dispose(), this.a.dispose(), this.b.dispose(), this.output.dispose(), this.fade.dispose(), this._g2a.dispose(), this._panner.disconnect(), this._split.disconnect(), this;
      }

    }

    class Mn extends Ct {
      constructor(t) {
        super(t), this.name = "Effect", this._dryWet = new Dn({
          context: this.context
        }), this.wet = this._dryWet.fade, this.effectSend = new Mt({
          context: this.context
        }), this.effectReturn = new Mt({
          context: this.context
        }), this.input = new Mt({
          context: this.context
        }), this.output = this._dryWet, this.input.fan(this._dryWet.a, this.effectSend), this.effectReturn.connect(this._dryWet.b), this.wet.setValueAtTime(t.wet, 0), this._internalChannels = [this.effectReturn, this.effectSend], $(this, "wet");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          wet: 1
        });
      }

      connectEffect(t) {
        return this._internalChannels.push(t), this.effectSend.chain(t, this.effectReturn), this;
      }

      dispose() {
        return super.dispose(), this._dryWet.dispose(), this.effectSend.dispose(), this.effectReturn.dispose(), this.wet.dispose(), this;
      }

    }

    class jn extends Mn {
      constructor(t) {
        super(t), this.name = "LFOEffect", this._lfo = new Se({
          context: this.context,
          frequency: t.frequency,
          amplitude: t.depth
        }), this.depth = this._lfo.amplitude, this.frequency = this._lfo.frequency, this.type = t.type, $(this, ["frequency", "depth"]);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          frequency: 1,
          type: "sine",
          depth: 1
        });
      }

      start(t) {
        return this._lfo.start(t), this;
      }

      stop(t) {
        return this._lfo.stop(t), this;
      }

      sync() {
        return this._lfo.sync(), this;
      }

      unsync() {
        return this._lfo.unsync(), this;
      }

      get type() {
        return this._lfo.type;
      }

      set type(t) {
        this._lfo.type = t;
      }

      dispose() {
        return super.dispose(), this._lfo.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
      }

    }

    class En extends jn {
      constructor() {
        super(q(En.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"])), this.name = "AutoFilter";
        const t = q(En.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"]);
        this.filter = new Xe(Object.assign(t.filter, {
          context: this.context
        })), this.connectEffect(this.filter), this._lfo.connect(this.filter.frequency), this.octaves = t.octaves, this.baseFrequency = t.baseFrequency;
      }

      static getDefaults() {
        return Object.assign(jn.getDefaults(), {
          baseFrequency: 200,
          octaves: 2.6,
          filter: {
            type: "lowpass",
            rolloff: -12,
            Q: 1
          }
        });
      }

      get baseFrequency() {
        return this._lfo.min;
      }

      set baseFrequency(t) {
        this._lfo.min = this.toFrequency(t), this.octaves = this._octaves;
      }

      get octaves() {
        return this._octaves;
      }

      set octaves(t) {
        this._octaves = t, this._lfo.max = this._lfo.min * Math.pow(2, t);
      }

      dispose() {
        return super.dispose(), this.filter.dispose(), this;
      }

    }

    class Rn extends Ct {
      constructor() {
        super(Object.assign(q(Rn.getDefaults(), arguments, ["pan"]))), this.name = "Panner", this._panner = this.context.createStereoPanner(), this.input = this._panner, this.output = this._panner;
        const t = q(Rn.getDefaults(), arguments, ["pan"]);
        this.pan = new St({
          context: this.context,
          param: this._panner.pan,
          value: t.pan,
          minValue: -1,
          maxValue: 1
        }), this._panner.channelCount = t.channelCount, this._panner.channelCountMode = "explicit", $(this, "pan");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          pan: 0,
          channelCount: 1
        });
      }

      dispose() {
        return super.dispose(), this._panner.disconnect(), this.pan.dispose(), this;
      }

    }

    class qn extends jn {
      constructor() {
        super(q(qn.getDefaults(), arguments, ["frequency"])), this.name = "AutoPanner";
        const t = q(qn.getDefaults(), arguments, ["frequency"]);
        this._panner = new Rn({
          context: this.context,
          channelCount: t.channelCount
        }), this.connectEffect(this._panner), this._lfo.connect(this._panner.pan), this._lfo.min = -1, this._lfo.max = 1;
      }

      static getDefaults() {
        return Object.assign(jn.getDefaults(), {
          channelCount: 1
        });
      }

      dispose() {
        return super.dispose(), this._panner.dispose(), this;
      }

    }

    class In extends Ct {
      constructor() {
        super(q(In.getDefaults(), arguments, ["smoothing"])), this.name = "Follower";
        const t = q(In.getDefaults(), arguments, ["smoothing"]);
        this._abs = this.input = new je({
          context: this.context
        }), this._lowpass = this.output = new hn({
          context: this.context,
          frequency: 1 / this.toSeconds(t.smoothing),
          type: "lowpass"
        }), this._abs.connect(this._lowpass), this._smoothing = t.smoothing;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          smoothing: .05
        });
      }

      get smoothing() {
        return this._smoothing;
      }

      set smoothing(t) {
        this._smoothing = t, this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);
      }

      dispose() {
        return super.dispose(), this._abs.dispose(), this._lowpass.dispose(), this;
      }

    }

    class Fn extends Mn {
      constructor() {
        super(q(Fn.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"])), this.name = "AutoWah";
        const t = q(Fn.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"]);
        this._follower = new In({
          context: this.context,
          smoothing: t.follower
        }), this._sweepRange = new Ne({
          context: this.context,
          min: 0,
          max: 1,
          exponent: .5
        }), this._baseFrequency = this.toFrequency(t.baseFrequency), this._octaves = t.octaves, this._inputBoost = new Mt({
          context: this.context
        }), this._bandpass = new Xe({
          context: this.context,
          rolloff: -48,
          frequency: 0,
          Q: t.Q
        }), this._peaking = new Xe({
          context: this.context,
          type: "peaking"
        }), this._peaking.gain.value = t.gain, this.gain = this._peaking.gain, this.Q = this._bandpass.Q, this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange), this._sweepRange.connect(this._bandpass.frequency), this._sweepRange.connect(this._peaking.frequency), this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn), this._setSweepRange(), this.sensitivity = t.sensitivity, $(this, ["gain", "Q"]);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          baseFrequency: 100,
          octaves: 6,
          sensitivity: 0,
          Q: 2,
          gain: 2,
          follower: .2
        });
      }

      get octaves() {
        return this._octaves;
      }

      set octaves(t) {
        this._octaves = t, this._setSweepRange();
      }

      get follower() {
        return this._follower.smoothing;
      }

      set follower(t) {
        this._follower.smoothing = t;
      }

      get baseFrequency() {
        return this._baseFrequency;
      }

      set baseFrequency(t) {
        this._baseFrequency = this.toFrequency(t), this._setSweepRange();
      }

      get sensitivity() {
        return ct(1 / this._inputBoost.gain.value);
      }

      set sensitivity(t) {
        this._inputBoost.gain.value = 1 / at(t);
      }

      _setSweepRange() {
        this._sweepRange.min = this._baseFrequency, this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
      }

      dispose() {
        return super.dispose(), this._follower.dispose(), this._sweepRange.dispose(), this._bandpass.dispose(), this._peaking.dispose(), this._inputBoost.dispose(), this;
      }

    }

    an("bit-crusher", "\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n");

    class Vn extends Mn {
      constructor() {
        super(q(Vn.getDefaults(), arguments, ["bits"])), this.name = "BitCrusher";
        const t = q(Vn.getDefaults(), arguments, ["bits"]);
        this._bitCrusherWorklet = new Nn({
          context: this.context,
          bits: t.bits
        }), this.connectEffect(this._bitCrusherWorklet), this.bits = this._bitCrusherWorklet.bits;
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          bits: 4
        });
      }

      dispose() {
        return super.dispose(), this._bitCrusherWorklet.dispose(), this;
      }

    }

    class Nn extends cn {
      constructor() {
        super(q(Nn.getDefaults(), arguments)), this.name = "BitCrusherWorklet";
        const t = q(Nn.getDefaults(), arguments);
        this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this.bits = new St({
          context: this.context,
          value: t.bits,
          units: "positive",
          minValue: 1,
          maxValue: 16,
          param: this._dummyParam,
          swappable: !0
        });
      }

      static getDefaults() {
        return Object.assign(cn.getDefaults(), {
          bits: 12
        });
      }

      _audioWorkletName() {
        return "bit-crusher";
      }

      onReady(t) {
        kt(this.input, t, this.output);
        const e = t.parameters.get("bits");
        this.bits.setParam(e);
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.bits.dispose(), this;
      }

    }

    class Pn extends Mn {
      constructor() {
        super(q(Pn.getDefaults(), arguments, ["order"])), this.name = "Chebyshev";
        const t = q(Pn.getDefaults(), arguments, ["order"]);
        this._shaper = new de({
          context: this.context,
          length: 4096
        }), this._order = t.order, this.connectEffect(this._shaper), this.order = t.order, this.oversample = t.oversample;
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          order: 1,
          oversample: "none"
        });
      }

      _getCoefficient(t, e, n) {
        return n.has(e) || (0 === e ? n.set(e, 0) : 1 === e ? n.set(e, t) : n.set(e, 2 * t * this._getCoefficient(t, e - 1, n) - this._getCoefficient(t, e - 2, n))), n.get(e);
      }

      get order() {
        return this._order;
      }

      set order(t) {
        this._order = t, this._shaper.setMap(e => this._getCoefficient(e, t, new Map()));
      }

      get oversample() {
        return this._shaper.oversample;
      }

      set oversample(t) {
        this._shaper.oversample = t;
      }

      dispose() {
        return super.dispose(), this._shaper.dispose(), this;
      }

    }

    class Ln extends Ct {
      constructor() {
        super(q(Ln.getDefaults(), arguments, ["channels"])), this.name = "Split";
        const t = q(Ln.getDefaults(), arguments, ["channels"]);
        this._splitter = this.input = this.output = this.context.createChannelSplitter(t.channels), this._internalChannels = [this._splitter];
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          channels: 2
        });
      }

      dispose() {
        return super.dispose(), this._splitter.disconnect(), this;
      }

    }

    class zn extends Ct {
      constructor() {
        super(q(zn.getDefaults(), arguments, ["channels"])), this.name = "Merge";
        const t = q(zn.getDefaults(), arguments, ["channels"]);
        this._merger = this.output = this.input = this.context.createChannelMerger(t.channels);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          channels: 2
        });
      }

      dispose() {
        return super.dispose(), this._merger.disconnect(), this;
      }

    }

    class Bn extends Ct {
      constructor(t) {
        super(t), this.name = "StereoEffect", this.input = new Mt({
          context: this.context
        }), this.input.channelCount = 2, this.input.channelCountMode = "explicit", this._dryWet = this.output = new Dn({
          context: this.context,
          fade: t.wet
        }), this.wet = this._dryWet.fade, this._split = new Ln({
          context: this.context,
          channels: 2
        }), this._merge = new zn({
          context: this.context,
          channels: 2
        }), this.input.connect(this._split), this.input.connect(this._dryWet.a), this._merge.connect(this._dryWet.b), $(this, ["wet"]);
      }

      connectEffectLeft(...t) {
        this._split.connect(t[0], 0, 0), kt(...t), At(t[t.length - 1], this._merge, 0, 0);
      }

      connectEffectRight(...t) {
        this._split.connect(t[0], 1, 0), kt(...t), At(t[t.length - 1], this._merge, 0, 1);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          wet: 1
        });
      }

      dispose() {
        return super.dispose(), this._dryWet.dispose(), this._split.dispose(), this._merge.dispose(), this;
      }

    }

    class Wn extends Bn {
      constructor(t) {
        super(t), this.feedback = new Rt({
          context: this.context,
          value: t.feedback,
          units: "normalRange"
        }), this._feedbackL = new Mt({
          context: this.context
        }), this._feedbackR = new Mt({
          context: this.context
        }), this._feedbackSplit = new Ln({
          context: this.context,
          channels: 2
        }), this._feedbackMerge = new zn({
          context: this.context,
          channels: 2
        }), this._merge.connect(this._feedbackSplit), this._feedbackMerge.connect(this._split), this._feedbackSplit.connect(this._feedbackL, 0, 0), this._feedbackL.connect(this._feedbackMerge, 0, 0), this._feedbackSplit.connect(this._feedbackR, 1, 0), this._feedbackR.connect(this._feedbackMerge, 0, 1), this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain), $(this, ["feedback"]);
      }

      static getDefaults() {
        return Object.assign(Bn.getDefaults(), {
          feedback: .5
        });
      }

      dispose() {
        return super.dispose(), this.feedback.dispose(), this._feedbackL.dispose(), this._feedbackR.dispose(), this._feedbackSplit.dispose(), this._feedbackMerge.dispose(), this;
      }

    }

    class Un extends Wn {
      constructor() {
        super(q(Un.getDefaults(), arguments, ["frequency", "delayTime", "depth"])), this.name = "Chorus";
        const t = q(Un.getDefaults(), arguments, ["frequency", "delayTime", "depth"]);
        this._depth = t.depth, this._delayTime = t.delayTime / 1e3, this._lfoL = new Se({
          context: this.context,
          frequency: t.frequency,
          min: 0,
          max: 1
        }), this._lfoR = new Se({
          context: this.context,
          frequency: t.frequency,
          min: 0,
          max: 1,
          phase: 180
        }), this._delayNodeL = new Qt({
          context: this.context
        }), this._delayNodeR = new Qt({
          context: this.context
        }), this.frequency = this._lfoL.frequency, $(this, ["frequency"]), this._lfoL.frequency.connect(this._lfoR.frequency), this.connectEffectLeft(this._delayNodeL), this.connectEffectRight(this._delayNodeR), this._lfoL.connect(this._delayNodeL.delayTime), this._lfoR.connect(this._delayNodeR.delayTime), this.depth = this._depth, this.type = t.type, this.spread = t.spread;
      }

      static getDefaults() {
        return Object.assign(Wn.getDefaults(), {
          frequency: 1.5,
          delayTime: 3.5,
          depth: .7,
          type: "sine",
          spread: 180,
          feedback: 0,
          wet: .5
        });
      }

      get depth() {
        return this._depth;
      }

      set depth(t) {
        this._depth = t;
        const e = this._delayTime * t;
        this._lfoL.min = Math.max(this._delayTime - e, 0), this._lfoL.max = this._delayTime + e, this._lfoR.min = Math.max(this._delayTime - e, 0), this._lfoR.max = this._delayTime + e;
      }

      get delayTime() {
        return 1e3 * this._delayTime;
      }

      set delayTime(t) {
        this._delayTime = t / 1e3, this.depth = this._depth;
      }

      get type() {
        return this._lfoL.type;
      }

      set type(t) {
        this._lfoL.type = t, this._lfoR.type = t;
      }

      get spread() {
        return this._lfoR.phase - this._lfoL.phase;
      }

      set spread(t) {
        this._lfoL.phase = 90 - t / 2, this._lfoR.phase = t / 2 + 90;
      }

      start(t) {
        return this._lfoL.start(t), this._lfoR.start(t), this;
      }

      stop(t) {
        return this._lfoL.stop(t), this._lfoR.stop(t), this;
      }

      sync() {
        return this._lfoL.sync(), this._lfoR.sync(), this;
      }

      unsync() {
        return this._lfoL.unsync(), this._lfoR.unsync(), this;
      }

      dispose() {
        return super.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._delayNodeL.dispose(), this._delayNodeR.dispose(), this.frequency.dispose(), this;
      }

    }

    class Gn extends Mn {
      constructor() {
        super(q(Gn.getDefaults(), arguments, ["distortion"])), this.name = "Distortion";
        const t = q(Gn.getDefaults(), arguments, ["distortion"]);
        this._shaper = new de({
          context: this.context,
          length: 4096
        }), this._distortion = t.distortion, this.connectEffect(this._shaper), this.distortion = t.distortion, this.oversample = t.oversample;
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          distortion: .4,
          oversample: "none"
        });
      }

      get distortion() {
        return this._distortion;
      }

      set distortion(t) {
        this._distortion = t;
        const e = 100 * t,
              n = Math.PI / 180;

        this._shaper.setMap(t => Math.abs(t) < .001 ? 0 : (3 + e) * t * 20 * n / (Math.PI + e * Math.abs(t)));
      }

      get oversample() {
        return this._shaper.oversample;
      }

      set oversample(t) {
        this._shaper.oversample = t;
      }

      dispose() {
        return super.dispose(), this._shaper.dispose(), this;
      }

    }

    class Yn extends Mn {
      constructor(t) {
        super(t), this.name = "FeedbackEffect", this._feedbackGain = new Mt({
          context: this.context,
          gain: t.feedback,
          units: "normalRange"
        }), this.feedback = this._feedbackGain.gain, $(this, "feedback"), this.effectReturn.chain(this._feedbackGain, this.effectSend);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          feedback: .125
        });
      }

      dispose() {
        return super.dispose(), this._feedbackGain.dispose(), this.feedback.dispose(), this;
      }

    }

    class Qn extends Yn {
      constructor() {
        super(q(Qn.getDefaults(), arguments, ["delayTime", "feedback"])), this.name = "FeedbackDelay";
        const t = q(Qn.getDefaults(), arguments, ["delayTime", "feedback"]);
        this._delayNode = new Qt({
          context: this.context,
          delayTime: t.delayTime,
          maxDelay: t.maxDelay
        }), this.delayTime = this._delayNode.delayTime, this.connectEffect(this._delayNode), $(this, "delayTime");
      }

      static getDefaults() {
        return Object.assign(Yn.getDefaults(), {
          delayTime: .25,
          maxDelay: 1
        });
      }

      dispose() {
        return super.dispose(), this._delayNode.dispose(), this.delayTime.dispose(), this;
      }

    }

    class Zn extends Ct {
      constructor(t) {
        super(t), this.name = "PhaseShiftAllpass", this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this.offset90 = new Mt({
          context: this.context
        });
        this._bank0 = this._createAllPassFilterBank([.6923878, .9360654322959, .988229522686, .9987488452737]), this._bank1 = this._createAllPassFilterBank([.4021921162426, .856171088242, .9722909545651, .9952884791278]), this._oneSampleDelay = this.context.createIIRFilter([0, 1], [1, 0]), kt(this.input, ...this._bank0, this._oneSampleDelay, this.output), kt(this.input, ...this._bank1, this.offset90);
      }

      _createAllPassFilterBank(t) {
        return t.map(t => {
          const e = [[t * t, 0, -1], [1, 0, -t * t]];
          return this.context.createIIRFilter(e[0], e[1]);
        });
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this.output.dispose(), this.offset90.dispose(), this._bank0.forEach(t => t.disconnect()), this._bank1.forEach(t => t.disconnect()), this._oneSampleDelay.disconnect(), this;
      }

    }

    class Xn extends Mn {
      constructor() {
        super(q(Xn.getDefaults(), arguments, ["frequency"])), this.name = "FrequencyShifter";
        const t = q(Xn.getDefaults(), arguments, ["frequency"]);
        this.frequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.frequency,
          minValue: -this.context.sampleRate / 2,
          maxValue: this.context.sampleRate / 2
        }), this._sine = new ue({
          context: this.context,
          type: "sine"
        }), this._cosine = new he({
          context: this.context,
          phase: -90,
          type: "sine"
        }), this._sineMultiply = new fe({
          context: this.context
        }), this._cosineMultiply = new fe({
          context: this.context
        }), this._negate = new Re({
          context: this.context
        }), this._add = new we({
          context: this.context
        }), this._phaseShifter = new Zn({
          context: this.context
        }), this.effectSend.connect(this._phaseShifter), this.frequency.fan(this._sine.frequency, this._cosine.frequency), this._phaseShifter.offset90.connect(this._cosineMultiply), this._cosine.connect(this._cosineMultiply.factor), this._phaseShifter.connect(this._sineMultiply), this._sine.connect(this._sineMultiply.factor), this._sineMultiply.connect(this._negate), this._cosineMultiply.connect(this._add), this._negate.connect(this._add.addend), this._add.connect(this.effectReturn);
        const e = this.immediate();
        this._sine.start(e), this._cosine.start(e);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          frequency: 0
        });
      }

      dispose() {
        return super.dispose(), this.frequency.dispose(), this._add.dispose(), this._cosine.dispose(), this._cosineMultiply.dispose(), this._negate.dispose(), this._phaseShifter.dispose(), this._sine.dispose(), this._sineMultiply.dispose(), this;
      }

    }

    const Hn = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100],
          $n = [225, 556, 441, 341];

    class Jn extends Bn {
      constructor() {
        super(q(Jn.getDefaults(), arguments, ["roomSize", "dampening"])), this.name = "Freeverb", this._combFilters = [], this._allpassFiltersL = [], this._allpassFiltersR = [];
        const t = q(Jn.getDefaults(), arguments, ["roomSize", "dampening"]);
        this.roomSize = new Rt({
          context: this.context,
          value: t.roomSize,
          units: "normalRange"
        }), this._allpassFiltersL = $n.map(t => {
          const e = this.context.createBiquadFilter();
          return e.type = "allpass", e.frequency.value = t, e;
        }), this._allpassFiltersR = $n.map(t => {
          const e = this.context.createBiquadFilter();
          return e.type = "allpass", e.frequency.value = t, e;
        }), this._combFilters = Hn.map((e, n) => {
          const s = new ln({
            context: this.context,
            dampening: t.dampening,
            delayTime: e
          });
          return n < Hn.length / 2 ? this.connectEffectLeft(s, ...this._allpassFiltersL) : this.connectEffectRight(s, ...this._allpassFiltersR), this.roomSize.connect(s.resonance), s;
        }), $(this, ["roomSize"]);
      }

      static getDefaults() {
        return Object.assign(Bn.getDefaults(), {
          roomSize: .7,
          dampening: 3e3
        });
      }

      get dampening() {
        return this._combFilters[0].dampening;
      }

      set dampening(t) {
        this._combFilters.forEach(e => e.dampening = t);
      }

      dispose() {
        return super.dispose(), this._allpassFiltersL.forEach(t => t.disconnect()), this._allpassFiltersR.forEach(t => t.disconnect()), this._combFilters.forEach(t => t.dispose()), this.roomSize.dispose(), this;
      }

    }

    const Kn = [.06748, .06404, .08212, .09004],
          ts = [.773, .802, .753, .733],
          es = [347, 113, 37];

    class ns extends Bn {
      constructor() {
        super(q(ns.getDefaults(), arguments, ["roomSize"])), this.name = "JCReverb", this._allpassFilters = [], this._feedbackCombFilters = [];
        const t = q(ns.getDefaults(), arguments, ["roomSize"]);
        this.roomSize = new Rt({
          context: this.context,
          value: t.roomSize,
          units: "normalRange"
        }), this._scaleRoomSize = new Te({
          context: this.context,
          min: -.733,
          max: .197
        }), this._allpassFilters = es.map(t => {
          const e = this.context.createBiquadFilter();
          return e.type = "allpass", e.frequency.value = t, e;
        }), this._feedbackCombFilters = Kn.map((t, e) => {
          const n = new un({
            context: this.context,
            delayTime: t
          });
          return this._scaleRoomSize.connect(n.resonance), n.resonance.value = ts[e], e < Kn.length / 2 ? this.connectEffectLeft(...this._allpassFilters, n) : this.connectEffectRight(...this._allpassFilters, n), n;
        }), this.roomSize.connect(this._scaleRoomSize), $(this, ["roomSize"]);
      }

      static getDefaults() {
        return Object.assign(Bn.getDefaults(), {
          roomSize: .5
        });
      }

      dispose() {
        return super.dispose(), this._allpassFilters.forEach(t => t.disconnect()), this._feedbackCombFilters.forEach(t => t.dispose()), this.roomSize.dispose(), this._scaleRoomSize.dispose(), this;
      }

    }

    class ss extends Wn {
      constructor(t) {
        super(t), this._feedbackL.disconnect(), this._feedbackL.connect(this._feedbackMerge, 0, 1), this._feedbackR.disconnect(), this._feedbackR.connect(this._feedbackMerge, 0, 0), $(this, ["feedback"]);
      }

    }

    class is extends ss {
      constructor() {
        super(q(is.getDefaults(), arguments, ["delayTime", "feedback"])), this.name = "PingPongDelay";
        const t = q(is.getDefaults(), arguments, ["delayTime", "feedback"]);
        this._leftDelay = new Qt({
          context: this.context,
          maxDelay: t.maxDelay
        }), this._rightDelay = new Qt({
          context: this.context,
          maxDelay: t.maxDelay
        }), this._rightPreDelay = new Qt({
          context: this.context,
          maxDelay: t.maxDelay
        }), this.delayTime = new Rt({
          context: this.context,
          units: "time",
          value: t.delayTime
        }), this.connectEffectLeft(this._leftDelay), this.connectEffectRight(this._rightPreDelay, this._rightDelay), this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime), this._feedbackL.disconnect(), this._feedbackL.connect(this._rightDelay), $(this, ["delayTime"]);
      }

      static getDefaults() {
        return Object.assign(ss.getDefaults(), {
          delayTime: .25,
          maxDelay: 1
        });
      }

      dispose() {
        return super.dispose(), this._leftDelay.dispose(), this._rightDelay.dispose(), this._rightPreDelay.dispose(), this.delayTime.dispose(), this;
      }

    }

    class os extends Yn {
      constructor() {
        super(q(os.getDefaults(), arguments, ["pitch"])), this.name = "PitchShift";
        const t = q(os.getDefaults(), arguments, ["pitch"]);
        this._frequency = new Rt({
          context: this.context
        }), this._delayA = new Qt({
          maxDelay: 1,
          context: this.context
        }), this._lfoA = new Se({
          context: this.context,
          min: 0,
          max: .1,
          type: "sawtooth"
        }).connect(this._delayA.delayTime), this._delayB = new Qt({
          maxDelay: 1,
          context: this.context
        }), this._lfoB = new Se({
          context: this.context,
          min: 0,
          max: .1,
          type: "sawtooth",
          phase: 180
        }).connect(this._delayB.delayTime), this._crossFade = new Dn({
          context: this.context
        }), this._crossFadeLFO = new Se({
          context: this.context,
          min: 0,
          max: 1,
          type: "triangle",
          phase: 90
        }).connect(this._crossFade.fade), this._feedbackDelay = new Qt({
          delayTime: t.delayTime,
          context: this.context
        }), this.delayTime = this._feedbackDelay.delayTime, $(this, "delayTime"), this._pitch = t.pitch, this._windowSize = t.windowSize, this._delayA.connect(this._crossFade.a), this._delayB.connect(this._crossFade.b), this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency), this.effectSend.fan(this._delayA, this._delayB), this._crossFade.chain(this._feedbackDelay, this.effectReturn);
        const e = this.now();
        this._lfoA.start(e), this._lfoB.start(e), this._crossFadeLFO.start(e), this.windowSize = this._windowSize;
      }

      static getDefaults() {
        return Object.assign(Yn.getDefaults(), {
          pitch: 0,
          windowSize: .1,
          delayTime: 0,
          feedback: 0
        });
      }

      get pitch() {
        return this._pitch;
      }

      set pitch(t) {
        this._pitch = t;
        let e = 0;
        t < 0 ? (this._lfoA.min = 0, this._lfoA.max = this._windowSize, this._lfoB.min = 0, this._lfoB.max = this._windowSize, e = ut(t - 1) + 1) : (this._lfoA.min = this._windowSize, this._lfoA.max = 0, this._lfoB.min = this._windowSize, this._lfoB.max = 0, e = ut(t) - 1), this._frequency.value = e * (1.2 / this._windowSize);
      }

      get windowSize() {
        return this._windowSize;
      }

      set windowSize(t) {
        this._windowSize = this.toSeconds(t), this.pitch = this._pitch;
      }

      dispose() {
        return super.dispose(), this._frequency.dispose(), this._delayA.dispose(), this._delayB.dispose(), this._lfoA.dispose(), this._lfoB.dispose(), this._crossFade.dispose(), this._crossFadeLFO.dispose(), this._feedbackDelay.dispose(), this;
      }

    }

    class rs extends Bn {
      constructor() {
        super(q(rs.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"])), this.name = "Phaser";
        const t = q(rs.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"]);
        this._lfoL = new Se({
          context: this.context,
          frequency: t.frequency,
          min: 0,
          max: 1
        }), this._lfoR = new Se({
          context: this.context,
          frequency: t.frequency,
          min: 0,
          max: 1,
          phase: 180
        }), this._baseFrequency = this.toFrequency(t.baseFrequency), this._octaves = t.octaves, this.Q = new Rt({
          context: this.context,
          value: t.Q,
          units: "positive"
        }), this._filtersL = this._makeFilters(t.stages, this._lfoL), this._filtersR = this._makeFilters(t.stages, this._lfoR), this.frequency = this._lfoL.frequency, this.frequency.value = t.frequency, this.connectEffectLeft(...this._filtersL), this.connectEffectRight(...this._filtersR), this._lfoL.frequency.connect(this._lfoR.frequency), this.baseFrequency = t.baseFrequency, this.octaves = t.octaves, this._lfoL.start(), this._lfoR.start(), $(this, ["frequency", "Q"]);
      }

      static getDefaults() {
        return Object.assign(Bn.getDefaults(), {
          frequency: .5,
          octaves: 3,
          stages: 10,
          Q: 10,
          baseFrequency: 350
        });
      }

      _makeFilters(t, e) {
        const n = [];

        for (let s = 0; s < t; s++) {
          const t = this.context.createBiquadFilter();
          t.type = "allpass", this.Q.connect(t.Q), e.connect(t.frequency), n.push(t);
        }

        return n;
      }

      get octaves() {
        return this._octaves;
      }

      set octaves(t) {
        this._octaves = t;
        const e = this._baseFrequency * Math.pow(2, t);
        this._lfoL.max = e, this._lfoR.max = e;
      }

      get baseFrequency() {
        return this._baseFrequency;
      }

      set baseFrequency(t) {
        this._baseFrequency = this.toFrequency(t), this._lfoL.min = this._baseFrequency, this._lfoR.min = this._baseFrequency, this.octaves = this._octaves;
      }

      dispose() {
        return super.dispose(), this.Q.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._filtersL.forEach(t => t.disconnect()), this._filtersR.forEach(t => t.disconnect()), this.frequency.dispose(), this;
      }

    }

    class as extends Mn {
      constructor() {
        super(q(as.getDefaults(), arguments, ["decay"])), this.name = "Reverb", this._convolver = this.context.createConvolver(), this.ready = Promise.resolve();
        const t = q(as.getDefaults(), arguments, ["decay"]);
        this._decay = t.decay, this._preDelay = t.preDelay, this.generate(), this.connectEffect(this._convolver);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          decay: 1.5,
          preDelay: .01
        });
      }

      get decay() {
        return this._decay;
      }

      set decay(t) {
        a(t = this.toSeconds(t), .001), this._decay = t, this.generate();
      }

      get preDelay() {
        return this._preDelay;
      }

      set preDelay(t) {
        a(t = this.toSeconds(t), 0), this._preDelay = t, this.generate();
      }

      generate() {
        return S(this, void 0, void 0, function* () {
          const t = this.ready,
                e = new et(2, this._decay + this._preDelay, this.context.sampleRate),
                n = new ie({
            context: e
          }),
                s = new ie({
            context: e
          }),
                i = new zn({
            context: e
          });
          n.connect(i, 0, 0), s.connect(i, 0, 1);
          const o = new Mt({
            context: e
          }).toDestination();
          i.connect(o), n.start(0), s.start(0), o.gain.setValueAtTime(0, 0), o.gain.setValueAtTime(1, this._preDelay), o.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay);
          const r = e.render();
          return this.ready = r.then(K), yield t, this._convolver.buffer = (yield r).get(), this;
        });
      }

      dispose() {
        return super.dispose(), this._convolver.disconnect(), this;
      }

    }

    class cs extends Ct {
      constructor() {
        super(q(cs.getDefaults(), arguments)), this.name = "MidSideSplit", this._split = this.input = new Ln({
          channels: 2,
          context: this.context
        }), this._midAdd = new we({
          context: this.context
        }), this.mid = new fe({
          context: this.context,
          value: Math.SQRT1_2
        }), this._sideSubtract = new qe({
          context: this.context
        }), this.side = new fe({
          context: this.context,
          value: Math.SQRT1_2
        }), this._split.connect(this._midAdd, 0), this._split.connect(this._midAdd.addend, 1), this._split.connect(this._sideSubtract, 0), this._split.connect(this._sideSubtract.subtrahend, 1), this._midAdd.connect(this.mid), this._sideSubtract.connect(this.side);
      }

      dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._midAdd.dispose(), this._sideSubtract.dispose(), this._split.dispose(), this;
      }

    }

    class us extends Ct {
      constructor() {
        super(q(us.getDefaults(), arguments)), this.name = "MidSideMerge", this.mid = new Mt({
          context: this.context
        }), this.side = new Mt({
          context: this.context
        }), this._left = new we({
          context: this.context
        }), this._leftMult = new fe({
          context: this.context,
          value: Math.SQRT1_2
        }), this._right = new qe({
          context: this.context
        }), this._rightMult = new fe({
          context: this.context,
          value: Math.SQRT1_2
        }), this._merge = this.output = new zn({
          context: this.context
        }), this.mid.fan(this._left), this.side.connect(this._left.addend), this.mid.connect(this._right), this.side.connect(this._right.subtrahend), this._left.connect(this._leftMult), this._right.connect(this._rightMult), this._leftMult.connect(this._merge, 0, 0), this._rightMult.connect(this._merge, 0, 1);
      }

      dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._leftMult.dispose(), this._rightMult.dispose(), this._left.dispose(), this._right.dispose(), this;
      }

    }

    class hs extends Mn {
      constructor(t) {
        super(t), this.name = "MidSideEffect", this._midSideMerge = new us({
          context: this.context
        }), this._midSideSplit = new cs({
          context: this.context
        }), this._midSend = this._midSideSplit.mid, this._sideSend = this._midSideSplit.side, this._midReturn = this._midSideMerge.mid, this._sideReturn = this._midSideMerge.side, this.effectSend.connect(this._midSideSplit), this._midSideMerge.connect(this.effectReturn);
      }

      connectEffectMid(...t) {
        this._midSend.chain(...t, this._midReturn);
      }

      connectEffectSide(...t) {
        this._sideSend.chain(...t, this._sideReturn);
      }

      dispose() {
        return super.dispose(), this._midSideSplit.dispose(), this._midSideMerge.dispose(), this._midSend.dispose(), this._sideSend.dispose(), this._midReturn.dispose(), this._sideReturn.dispose(), this;
      }

    }

    class ls extends hs {
      constructor() {
        super(q(ls.getDefaults(), arguments, ["width"])), this.name = "StereoWidener";
        const t = q(ls.getDefaults(), arguments, ["width"]);
        this.width = new Rt({
          context: this.context,
          value: t.width,
          units: "normalRange"
        }), $(this, ["width"]), this._twoTimesWidthMid = new fe({
          context: this.context,
          value: 2
        }), this._twoTimesWidthSide = new fe({
          context: this.context,
          value: 2
        }), this._midMult = new fe({
          context: this.context
        }), this._twoTimesWidthMid.connect(this._midMult.factor), this.connectEffectMid(this._midMult), this._oneMinusWidth = new qe({
          context: this.context
        }), this._oneMinusWidth.connect(this._twoTimesWidthMid), At(this.context.getConstant(1), this._oneMinusWidth), this.width.connect(this._oneMinusWidth.subtrahend), this._sideMult = new fe({
          context: this.context
        }), this.width.connect(this._twoTimesWidthSide), this._twoTimesWidthSide.connect(this._sideMult.factor), this.connectEffectSide(this._sideMult);
      }

      static getDefaults() {
        return Object.assign(hs.getDefaults(), {
          width: .5
        });
      }

      dispose() {
        return super.dispose(), this.width.dispose(), this._midMult.dispose(), this._sideMult.dispose(), this._twoTimesWidthMid.dispose(), this._twoTimesWidthSide.dispose(), this._oneMinusWidth.dispose(), this;
      }

    }

    class ds extends Bn {
      constructor() {
        super(q(ds.getDefaults(), arguments, ["frequency", "depth"])), this.name = "Tremolo";
        const t = q(ds.getDefaults(), arguments, ["frequency", "depth"]);
        this._lfoL = new Se({
          context: this.context,
          type: t.type,
          min: 1,
          max: 0
        }), this._lfoR = new Se({
          context: this.context,
          type: t.type,
          min: 1,
          max: 0
        }), this._amplitudeL = new Mt({
          context: this.context
        }), this._amplitudeR = new Mt({
          context: this.context
        }), this.frequency = new Rt({
          context: this.context,
          value: t.frequency,
          units: "frequency"
        }), this.depth = new Rt({
          context: this.context,
          value: t.depth,
          units: "normalRange"
        }), $(this, ["frequency", "depth"]), this.connectEffectLeft(this._amplitudeL), this.connectEffectRight(this._amplitudeR), this._lfoL.connect(this._amplitudeL.gain), this._lfoR.connect(this._amplitudeR.gain), this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency), this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude), this.spread = t.spread;
      }

      static getDefaults() {
        return Object.assign(Bn.getDefaults(), {
          frequency: 10,
          type: "sine",
          depth: .5,
          spread: 180
        });
      }

      start(t) {
        return this._lfoL.start(t), this._lfoR.start(t), this;
      }

      stop(t) {
        return this._lfoL.stop(t), this._lfoR.stop(t), this;
      }

      sync() {
        return this._lfoL.sync(), this._lfoR.sync(), this.context.transport.syncSignal(this.frequency), this;
      }

      unsync() {
        return this._lfoL.unsync(), this._lfoR.unsync(), this.context.transport.unsyncSignal(this.frequency), this;
      }

      get type() {
        return this._lfoL.type;
      }

      set type(t) {
        this._lfoL.type = t, this._lfoR.type = t;
      }

      get spread() {
        return this._lfoR.phase - this._lfoL.phase;
      }

      set spread(t) {
        this._lfoL.phase = 90 - t / 2, this._lfoR.phase = t / 2 + 90;
      }

      dispose() {
        return super.dispose(), this._lfoL.dispose(), this._lfoR.dispose(), this._amplitudeL.dispose(), this._amplitudeR.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
      }

    }

    class ps extends Mn {
      constructor() {
        super(q(ps.getDefaults(), arguments, ["frequency", "depth"])), this.name = "Vibrato";
        const t = q(ps.getDefaults(), arguments, ["frequency", "depth"]);
        this._delayNode = new Qt({
          context: this.context,
          delayTime: 0,
          maxDelay: t.maxDelay
        }), this._lfo = new Se({
          context: this.context,
          type: t.type,
          min: 0,
          max: t.maxDelay,
          frequency: t.frequency,
          phase: -90
        }).start().connect(this._delayNode.delayTime), this.frequency = this._lfo.frequency, this.depth = this._lfo.amplitude, this.depth.value = t.depth, $(this, ["frequency", "depth"]), this.effectSend.chain(this._delayNode, this.effectReturn);
      }

      static getDefaults() {
        return Object.assign(Mn.getDefaults(), {
          maxDelay: .005,
          frequency: 5,
          depth: .1,
          type: "sine"
        });
      }

      get type() {
        return this._lfo.type;
      }

      set type(t) {
        this._lfo.type = t;
      }

      dispose() {
        return super.dispose(), this._delayNode.dispose(), this._lfo.dispose(), this.frequency.dispose(), this.depth.dispose(), this;
      }

    }

    class fs extends Ct {
      constructor() {
        super(q(fs.getDefaults(), arguments, ["type", "size"])), this.name = "Analyser", this._analysers = [], this._buffers = [];
        const t = q(fs.getDefaults(), arguments, ["type", "size"]);
        this.input = this.output = this._gain = new Mt({
          context: this.context
        }), this._split = new Ln({
          context: this.context,
          channels: t.channels
        }), this.input.connect(this._split), a(t.channels, 1);

        for (let e = 0; e < t.channels; e++) this._analysers[e] = this.context.createAnalyser(), this._split.connect(this._analysers[e], e, 0);

        this.size = t.size, this.type = t.type;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          size: 1024,
          smoothing: .8,
          type: "fft",
          channels: 1
        });
      }

      getValue() {
        return this._analysers.forEach((t, e) => {
          const n = this._buffers[e];
          "fft" === this._type ? t.getFloatFrequencyData(n) : "waveform" === this._type && t.getFloatTimeDomainData(n);
        }), 1 === this.channels ? this._buffers[0] : this._buffers;
      }

      get size() {
        return this._analysers[0].frequencyBinCount;
      }

      set size(t) {
        this._analysers.forEach((e, n) => {
          e.fftSize = 2 * t, this._buffers[n] = new Float32Array(t);
        });
      }

      get channels() {
        return this._analysers.length;
      }

      get type() {
        return this._type;
      }

      set type(t) {
        r("waveform" === t || "fft" === t, "Analyser: invalid type: " + t), this._type = t;
      }

      get smoothing() {
        return this._analysers[0].smoothingTimeConstant;
      }

      set smoothing(t) {
        this._analysers.forEach(e => e.smoothingTimeConstant = t);
      }

      dispose() {
        return super.dispose(), this._analysers.forEach(t => t.disconnect()), this._split.dispose(), this._gain.dispose(), this;
      }

    }

    class _s extends Ct {
      constructor() {
        super(q(_s.getDefaults(), arguments)), this.name = "MeterBase", this.input = this.output = this._analyser = new fs({
          context: this.context,
          size: 256,
          type: "waveform"
        });
      }

      dispose() {
        return super.dispose(), this._analyser.dispose(), this;
      }

    }

    class ms extends _s {
      constructor() {
        super(q(ms.getDefaults(), arguments, ["smoothing"])), this.name = "Meter", this._rms = 0;
        const t = q(ms.getDefaults(), arguments, ["smoothing"]);
        this.input = this.output = this._analyser = new fs({
          context: this.context,
          size: 256,
          type: "waveform",
          channels: t.channels
        }), this.smoothing = t.smoothing, this.normalRange = t.normalRange;
      }

      static getDefaults() {
        return Object.assign(_s.getDefaults(), {
          smoothing: .8,
          normalRange: !1,
          channels: 1
        });
      }

      getLevel() {
        return d("'getLevel' has been changed to 'getValue'"), this.getValue();
      }

      getValue() {
        const t = this._analyser.getValue(),
              e = (1 === this.channels ? [t] : t).map(t => {
          const e = t.reduce((t, e) => t + e * e, 0),
                n = Math.sqrt(e / t.length);
          return this._rms = Math.max(n, this._rms * this.smoothing), this.normalRange ? this._rms : ct(this._rms);
        });

        return 1 === this.channels ? e[0] : e;
      }

      get channels() {
        return this._analyser.channels;
      }

      dispose() {
        return super.dispose(), this._analyser.dispose(), this;
      }

    }

    class gs extends _s {
      constructor() {
        super(q(gs.getDefaults(), arguments, ["size"])), this.name = "FFT";
        const t = q(gs.getDefaults(), arguments, ["size"]);
        this.normalRange = t.normalRange, this._analyser.type = "fft", this.size = t.size;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          normalRange: !1,
          size: 1024,
          smoothing: .8
        });
      }

      getValue() {
        return this._analyser.getValue().map(t => this.normalRange ? at(t) : t);
      }

      get size() {
        return this._analyser.size;
      }

      set size(t) {
        this._analyser.size = t;
      }

      get smoothing() {
        return this._analyser.smoothing;
      }

      set smoothing(t) {
        this._analyser.smoothing = t;
      }

      getFrequencyOfIndex(t) {
        return r(0 <= t && t < this.size, "index must be greater than or equal to 0 and less than " + this.size), t * this.context.sampleRate / (2 * this.size);
      }

    }

    class vs extends _s {
      constructor() {
        super(q(vs.getDefaults(), arguments)), this.name = "DCMeter", this._analyser.type = "waveform", this._analyser.size = 256;
      }

      getValue() {
        return this._analyser.getValue()[0];
      }

    }

    class ys extends _s {
      constructor() {
        super(q(ys.getDefaults(), arguments, ["size"])), this.name = "Waveform";
        const t = q(ys.getDefaults(), arguments, ["size"]);
        this._analyser.type = "waveform", this.size = t.size;
      }

      static getDefaults() {
        return Object.assign(_s.getDefaults(), {
          size: 1024
        });
      }

      getValue() {
        return this._analyser.getValue();
      }

      get size() {
        return this._analyser.size;
      }

      set size(t) {
        this._analyser.size = t;
      }

    }

    class bs extends Ct {
      constructor() {
        super(q(bs.getDefaults(), arguments, ["solo"])), this.name = "Solo";
        const t = q(bs.getDefaults(), arguments, ["solo"]);
        this.input = this.output = new Mt({
          context: this.context
        }), bs._allSolos.has(this.context) || bs._allSolos.set(this.context, new Set()), bs._allSolos.get(this.context).add(this), this.solo = t.solo;
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          solo: !1
        });
      }

      get solo() {
        return this._isSoloed();
      }

      set solo(t) {
        t ? this._addSolo() : this._removeSolo(), bs._allSolos.get(this.context).forEach(t => t._updateSolo());
      }

      get muted() {
        return 0 === this.input.gain.value;
      }

      _addSolo() {
        bs._soloed.has(this.context) || bs._soloed.set(this.context, new Set()), bs._soloed.get(this.context).add(this);
      }

      _removeSolo() {
        bs._soloed.has(this.context) && bs._soloed.get(this.context).delete(this);
      }

      _isSoloed() {
        return bs._soloed.has(this.context) && bs._soloed.get(this.context).has(this);
      }

      _noSolos() {
        return !bs._soloed.has(this.context) || bs._soloed.has(this.context) && 0 === bs._soloed.get(this.context).size;
      }

      _updateSolo() {
        this._isSoloed() || this._noSolos() ? this.input.gain.value = 1 : this.input.gain.value = 0;
      }

      dispose() {
        return super.dispose(), bs._allSolos.get(this.context).delete(this), this._removeSolo(), this;
      }

    }

    bs._allSolos = new Map(), bs._soloed = new Map();

    class xs extends Ct {
      constructor() {
        super(q(xs.getDefaults(), arguments, ["pan", "volume"])), this.name = "PanVol";
        const t = q(xs.getDefaults(), arguments, ["pan", "volume"]);
        this._panner = this.input = new Rn({
          context: this.context,
          pan: t.pan,
          channelCount: t.channelCount
        }), this.pan = this._panner.pan, this._volume = this.output = new Zt({
          context: this.context,
          volume: t.volume
        }), this.volume = this._volume.volume, this._panner.connect(this._volume), this.mute = t.mute, $(this, ["pan", "volume"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mute: !1,
          pan: 0,
          volume: 0,
          channelCount: 1
        });
      }

      get mute() {
        return this._volume.mute;
      }

      set mute(t) {
        this._volume.mute = t;
      }

      dispose() {
        return super.dispose(), this._panner.dispose(), this.pan.dispose(), this._volume.dispose(), this.volume.dispose(), this;
      }

    }

    class ws extends Ct {
      constructor() {
        super(q(ws.getDefaults(), arguments, ["volume", "pan"])), this.name = "Channel";
        const t = q(ws.getDefaults(), arguments, ["volume", "pan"]);
        this._solo = this.input = new bs({
          solo: t.solo,
          context: this.context
        }), this._panVol = this.output = new xs({
          context: this.context,
          pan: t.pan,
          volume: t.volume,
          mute: t.mute,
          channelCount: t.channelCount
        }), this.pan = this._panVol.pan, this.volume = this._panVol.volume, this._solo.connect(this._panVol), $(this, ["pan", "volume"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          pan: 0,
          volume: 0,
          mute: !1,
          solo: !1,
          channelCount: 1
        });
      }

      get solo() {
        return this._solo.solo;
      }

      set solo(t) {
        this._solo.solo = t;
      }

      get muted() {
        return this._solo.muted || this.mute;
      }

      get mute() {
        return this._panVol.mute;
      }

      set mute(t) {
        this._panVol.mute = t;
      }

      _getBus(t) {
        return ws.buses.has(t) || ws.buses.set(t, new Mt({
          context: this.context
        })), ws.buses.get(t);
      }

      send(t, e = 0) {
        const n = this._getBus(t),
              s = new Mt({
          context: this.context,
          units: "decibels",
          gain: e
        });

        return this.connect(s), s.connect(n), s;
      }

      receive(t) {
        return this._getBus(t).connect(this), this;
      }

      dispose() {
        return super.dispose(), this._panVol.dispose(), this.pan.dispose(), this.volume.dispose(), this._solo.dispose(), this;
      }

    }

    ws.buses = new Map();

    class Ts extends Ct {
      constructor() {
        super(q(Ts.getDefaults(), arguments, ["lowFrequency", "highFrequency"])), this.name = "MultibandSplit", this.input = new Mt({
          context: this.context
        }), this.output = void 0, this.low = new Xe({
          context: this.context,
          frequency: 0,
          type: "lowpass"
        }), this._lowMidFilter = new Xe({
          context: this.context,
          frequency: 0,
          type: "highpass"
        }), this.mid = new Xe({
          context: this.context,
          frequency: 0,
          type: "lowpass"
        }), this.high = new Xe({
          context: this.context,
          frequency: 0,
          type: "highpass"
        }), this._internalChannels = [this.low, this.mid, this.high];
        const t = q(Ts.getDefaults(), arguments, ["lowFrequency", "highFrequency"]);
        this.lowFrequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.lowFrequency
        }), this.highFrequency = new Rt({
          context: this.context,
          units: "frequency",
          value: t.highFrequency
        }), this.Q = new Rt({
          context: this.context,
          units: "positive",
          value: t.Q
        }), this.input.fan(this.low, this.high), this.input.chain(this._lowMidFilter, this.mid), this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency), this.highFrequency.fan(this.mid.frequency, this.high.frequency), this.Q.connect(this.low.Q), this.Q.connect(this._lowMidFilter.Q), this.Q.connect(this.mid.Q), this.Q.connect(this.high.Q), $(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          Q: 1,
          highFrequency: 2500,
          lowFrequency: 400
        });
      }

      dispose() {
        return super.dispose(), J(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]), this.low.dispose(), this._lowMidFilter.dispose(), this.mid.dispose(), this.high.dispose(), this.lowFrequency.dispose(), this.highFrequency.dispose(), this.Q.dispose(), this;
      }

    }

    class Os extends Ct {
      constructor() {
        super(...arguments), this.name = "Listener", this.positionX = new St({
          context: this.context,
          param: this.context.rawContext.listener.positionX
        }), this.positionY = new St({
          context: this.context,
          param: this.context.rawContext.listener.positionY
        }), this.positionZ = new St({
          context: this.context,
          param: this.context.rawContext.listener.positionZ
        }), this.forwardX = new St({
          context: this.context,
          param: this.context.rawContext.listener.forwardX
        }), this.forwardY = new St({
          context: this.context,
          param: this.context.rawContext.listener.forwardY
        }), this.forwardZ = new St({
          context: this.context,
          param: this.context.rawContext.listener.forwardZ
        }), this.upX = new St({
          context: this.context,
          param: this.context.rawContext.listener.upX
        }), this.upY = new St({
          context: this.context,
          param: this.context.rawContext.listener.upY
        }), this.upZ = new St({
          context: this.context,
          param: this.context.rawContext.listener.upZ
        });
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          positionX: 0,
          positionY: 0,
          positionZ: 0,
          forwardX: 0,
          forwardY: 0,
          forwardZ: -1,
          upX: 0,
          upY: 1,
          upZ: 0
        });
      }

      dispose() {
        return super.dispose(), this.positionX.dispose(), this.positionY.dispose(), this.positionZ.dispose(), this.forwardX.dispose(), this.forwardY.dispose(), this.forwardZ.dispose(), this.upX.dispose(), this.upY.dispose(), this.upZ.dispose(), this;
      }

    }

    G(t => {
      t.listener = new Os({
        context: t
      });
    }), Q(t => {
      t.listener.dispose();
    });

    class Ss extends Ct {
      constructor() {
        super(q(Ss.getDefaults(), arguments, ["positionX", "positionY", "positionZ"])), this.name = "Panner3D";
        const t = q(Ss.getDefaults(), arguments, ["positionX", "positionY", "positionZ"]);
        this._panner = this.input = this.output = this.context.createPanner(), this.panningModel = t.panningModel, this.maxDistance = t.maxDistance, this.distanceModel = t.distanceModel, this.coneOuterGain = t.coneOuterGain, this.coneOuterAngle = t.coneOuterAngle, this.coneInnerAngle = t.coneInnerAngle, this.refDistance = t.refDistance, this.rolloffFactor = t.rolloffFactor, this.positionX = new St({
          context: this.context,
          param: this._panner.positionX,
          value: t.positionX
        }), this.positionY = new St({
          context: this.context,
          param: this._panner.positionY,
          value: t.positionY
        }), this.positionZ = new St({
          context: this.context,
          param: this._panner.positionZ,
          value: t.positionZ
        }), this.orientationX = new St({
          context: this.context,
          param: this._panner.orientationX,
          value: t.orientationX
        }), this.orientationY = new St({
          context: this.context,
          param: this._panner.orientationY,
          value: t.orientationY
        }), this.orientationZ = new St({
          context: this.context,
          param: this._panner.orientationZ,
          value: t.orientationZ
        });
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          coneInnerAngle: 360,
          coneOuterAngle: 360,
          coneOuterGain: 0,
          distanceModel: "inverse",
          maxDistance: 1e4,
          orientationX: 0,
          orientationY: 0,
          orientationZ: 0,
          panningModel: "equalpower",
          positionX: 0,
          positionY: 0,
          positionZ: 0,
          refDistance: 1,
          rolloffFactor: 1
        });
      }

      setPosition(t, e, n) {
        return this.positionX.value = t, this.positionY.value = e, this.positionZ.value = n, this;
      }

      setOrientation(t, e, n) {
        return this.orientationX.value = t, this.orientationY.value = e, this.orientationZ.value = n, this;
      }

      get panningModel() {
        return this._panner.panningModel;
      }

      set panningModel(t) {
        this._panner.panningModel = t;
      }

      get refDistance() {
        return this._panner.refDistance;
      }

      set refDistance(t) {
        this._panner.refDistance = t;
      }

      get rolloffFactor() {
        return this._panner.rolloffFactor;
      }

      set rolloffFactor(t) {
        this._panner.rolloffFactor = t;
      }

      get distanceModel() {
        return this._panner.distanceModel;
      }

      set distanceModel(t) {
        this._panner.distanceModel = t;
      }

      get coneInnerAngle() {
        return this._panner.coneInnerAngle;
      }

      set coneInnerAngle(t) {
        this._panner.coneInnerAngle = t;
      }

      get coneOuterAngle() {
        return this._panner.coneOuterAngle;
      }

      set coneOuterAngle(t) {
        this._panner.coneOuterAngle = t;
      }

      get coneOuterGain() {
        return this._panner.coneOuterGain;
      }

      set coneOuterGain(t) {
        this._panner.coneOuterGain = t;
      }

      get maxDistance() {
        return this._panner.maxDistance;
      }

      set maxDistance(t) {
        this._panner.maxDistance = t;
      }

      dispose() {
        return super.dispose(), this._panner.disconnect(), this.orientationX.dispose(), this.orientationY.dispose(), this.orientationZ.dispose(), this.positionX.dispose(), this.positionY.dispose(), this.positionZ.dispose(), this;
      }

    }

    class Cs extends Ct {
      constructor() {
        super(q(Cs.getDefaults(), arguments)), this.name = "Recorder";
        const t = q(Cs.getDefaults(), arguments);
        this.input = new Mt({
          context: this.context
        }), r(Cs.supported, "Media Recorder API is not available"), this._stream = this.context.createMediaStreamDestination(), this.input.connect(this._stream), this._recorder = new MediaRecorder(this._stream.stream, {
          mimeType: t.mimeType
        });
      }

      static getDefaults() {
        return Ct.getDefaults();
      }

      get mimeType() {
        return this._recorder.mimeType;
      }

      static get supported() {
        return null !== w && Reflect.has(w, "MediaRecorder");
      }

      get state() {
        return "inactive" === this._recorder.state ? "stopped" : "paused" === this._recorder.state ? "paused" : "started";
      }

      start() {
        return S(this, void 0, void 0, function* () {
          r("started" !== this.state, "Recorder is already started");
          const t = new Promise(t => {
            const e = () => {
              this._recorder.removeEventListener("start", e, !1), t();
            };

            this._recorder.addEventListener("start", e, !1);
          });
          return this._recorder.start(), yield t;
        });
      }

      stop() {
        return S(this, void 0, void 0, function* () {
          r("stopped" !== this.state, "Recorder is not started");
          const t = new Promise(t => {
            const e = n => {
              this._recorder.removeEventListener("dataavailable", e, !1), t(n.data);
            };

            this._recorder.addEventListener("dataavailable", e, !1);
          });
          return this._recorder.stop(), yield t;
        });
      }

      pause() {
        return r("started" === this.state, "Recorder must be started"), this._recorder.pause(), this;
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this._stream.disconnect(), this;
      }

    }

    class ks extends Ct {
      constructor() {
        super(q(ks.getDefaults(), arguments, ["threshold", "ratio"])), this.name = "Compressor", this._compressor = this.context.createDynamicsCompressor(), this.input = this._compressor, this.output = this._compressor;
        const t = q(ks.getDefaults(), arguments, ["threshold", "ratio"]);
        this.threshold = new St({
          minValue: this._compressor.threshold.minValue,
          maxValue: this._compressor.threshold.maxValue,
          context: this.context,
          convert: !1,
          param: this._compressor.threshold,
          units: "decibels",
          value: t.threshold
        }), this.attack = new St({
          minValue: this._compressor.attack.minValue,
          maxValue: this._compressor.attack.maxValue,
          context: this.context,
          param: this._compressor.attack,
          units: "time",
          value: t.attack
        }), this.release = new St({
          minValue: this._compressor.release.minValue,
          maxValue: this._compressor.release.maxValue,
          context: this.context,
          param: this._compressor.release,
          units: "time",
          value: t.release
        }), this.knee = new St({
          minValue: this._compressor.knee.minValue,
          maxValue: this._compressor.knee.maxValue,
          context: this.context,
          convert: !1,
          param: this._compressor.knee,
          units: "decibels",
          value: t.knee
        }), this.ratio = new St({
          minValue: this._compressor.ratio.minValue,
          maxValue: this._compressor.ratio.maxValue,
          context: this.context,
          convert: !1,
          param: this._compressor.ratio,
          units: "positive",
          value: t.ratio
        }), $(this, ["knee", "release", "attack", "ratio", "threshold"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          attack: .003,
          knee: 30,
          ratio: 12,
          release: .25,
          threshold: -24
        });
      }

      get reduction() {
        return this._compressor.reduction;
      }

      dispose() {
        return super.dispose(), this._compressor.disconnect(), this.attack.dispose(), this.release.dispose(), this.threshold.dispose(), this.ratio.dispose(), this.knee.dispose(), this;
      }

    }

    class As extends Ct {
      constructor() {
        super(Object.assign(q(As.getDefaults(), arguments, ["threshold", "smoothing"]))), this.name = "Gate";
        const t = q(As.getDefaults(), arguments, ["threshold", "smoothing"]);
        this._follower = new In({
          context: this.context,
          smoothing: t.smoothing
        }), this._gt = new Fe({
          context: this.context,
          value: at(t.threshold)
        }), this.input = new Mt({
          context: this.context
        }), this._gate = this.output = new Mt({
          context: this.context
        }), this.input.connect(this._gate), this.input.chain(this._follower, this._gt, this._gate.gain);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          smoothing: .1,
          threshold: -40
        });
      }

      get threshold() {
        return ct(this._gt.value);
      }

      set threshold(t) {
        this._gt.value = at(t);
      }

      get smoothing() {
        return this._follower.smoothing;
      }

      set smoothing(t) {
        this._follower.smoothing = t;
      }

      dispose() {
        return super.dispose(), this.input.dispose(), this._follower.dispose(), this._gt.dispose(), this._gate.dispose(), this;
      }

    }

    class Ds extends Ct {
      constructor() {
        super(Object.assign(q(Ds.getDefaults(), arguments, ["threshold"]))), this.name = "Limiter";
        const t = q(Ds.getDefaults(), arguments, ["threshold"]);
        this._compressor = this.input = this.output = new ks({
          context: this.context,
          ratio: 20,
          attack: 0,
          release: 0,
          threshold: t.threshold
        }), this.threshold = this._compressor.threshold, $(this, "threshold");
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          threshold: -12
        });
      }

      get reduction() {
        return this._compressor.reduction;
      }

      dispose() {
        return super.dispose(), this._compressor.dispose(), this.threshold.dispose(), this;
      }

    }

    class Ms extends Ct {
      constructor() {
        super(Object.assign(q(Ms.getDefaults(), arguments))), this.name = "MidSideCompressor";
        const t = q(Ms.getDefaults(), arguments);
        this._midSideSplit = this.input = new cs({
          context: this.context
        }), this._midSideMerge = this.output = new us({
          context: this.context
        }), this.mid = new ks(Object.assign(t.mid, {
          context: this.context
        })), this.side = new ks(Object.assign(t.side, {
          context: this.context
        })), this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid), this._midSideSplit.side.chain(this.side, this._midSideMerge.side), $(this, ["mid", "side"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          mid: {
            ratio: 3,
            threshold: -24,
            release: .03,
            attack: .02,
            knee: 16
          },
          side: {
            ratio: 6,
            threshold: -30,
            release: .25,
            attack: .03,
            knee: 10
          }
        });
      }

      dispose() {
        return super.dispose(), this.mid.dispose(), this.side.dispose(), this._midSideSplit.dispose(), this._midSideMerge.dispose(), this;
      }

    }

    class js extends Ct {
      constructor() {
        super(Object.assign(q(js.getDefaults(), arguments))), this.name = "MultibandCompressor";
        const t = q(js.getDefaults(), arguments);
        this._splitter = this.input = new Ts({
          context: this.context,
          lowFrequency: t.lowFrequency,
          highFrequency: t.highFrequency
        }), this.lowFrequency = this._splitter.lowFrequency, this.highFrequency = this._splitter.highFrequency, this.output = new Mt({
          context: this.context
        }), this.low = new ks(Object.assign(t.low, {
          context: this.context
        })), this.mid = new ks(Object.assign(t.mid, {
          context: this.context
        })), this.high = new ks(Object.assign(t.high, {
          context: this.context
        })), this._splitter.low.chain(this.low, this.output), this._splitter.mid.chain(this.mid, this.output), this._splitter.high.chain(this.high, this.output), $(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          lowFrequency: 250,
          highFrequency: 2e3,
          low: {
            ratio: 6,
            threshold: -30,
            release: .25,
            attack: .03,
            knee: 10
          },
          mid: {
            ratio: 3,
            threshold: -24,
            release: .03,
            attack: .02,
            knee: 16
          },
          high: {
            ratio: 3,
            threshold: -24,
            release: .03,
            attack: .02,
            knee: 16
          }
        });
      }

      dispose() {
        return super.dispose(), this._splitter.dispose(), this.low.dispose(), this.mid.dispose(), this.high.dispose(), this.output.dispose(), this;
      }

    }

    class Es extends Ct {
      constructor() {
        super(q(Es.getDefaults(), arguments, ["low", "mid", "high"])), this.name = "EQ3", this.output = new Mt({
          context: this.context
        }), this._internalChannels = [];
        const t = q(Es.getDefaults(), arguments, ["low", "mid", "high"]);
        this.input = this._multibandSplit = new Ts({
          context: this.context,
          highFrequency: t.highFrequency,
          lowFrequency: t.lowFrequency
        }), this._lowGain = new Mt({
          context: this.context,
          gain: t.low,
          units: "decibels"
        }), this._midGain = new Mt({
          context: this.context,
          gain: t.mid,
          units: "decibels"
        }), this._highGain = new Mt({
          context: this.context,
          gain: t.high,
          units: "decibels"
        }), this.low = this._lowGain.gain, this.mid = this._midGain.gain, this.high = this._highGain.gain, this.Q = this._multibandSplit.Q, this.lowFrequency = this._multibandSplit.lowFrequency, this.highFrequency = this._multibandSplit.highFrequency, this._multibandSplit.low.chain(this._lowGain, this.output), this._multibandSplit.mid.chain(this._midGain, this.output), this._multibandSplit.high.chain(this._highGain, this.output), $(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]), this._internalChannels = [this._multibandSplit];
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          high: 0,
          highFrequency: 2500,
          low: 0,
          lowFrequency: 400,
          mid: 0
        });
      }

      dispose() {
        return super.dispose(), J(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]), this._multibandSplit.dispose(), this.lowFrequency.dispose(), this.highFrequency.dispose(), this._lowGain.dispose(), this._midGain.dispose(), this._highGain.dispose(), this.low.dispose(), this.mid.dispose(), this.high.dispose(), this.Q.dispose(), this;
      }

    }

    class Rs extends Ct {
      constructor() {
        super(q(Rs.getDefaults(), arguments, ["url", "onload"])), this.name = "Convolver", this._convolver = this.context.createConvolver();
        const t = q(Rs.getDefaults(), arguments, ["url", "onload"]);
        this._buffer = new tt(t.url, e => {
          this.buffer = e, t.onload();
        }), this.input = new Mt({
          context: this.context
        }), this.output = new Mt({
          context: this.context
        }), this._buffer.loaded && (this.buffer = this._buffer), this.normalize = t.normalize, this.input.chain(this._convolver, this.output);
      }

      static getDefaults() {
        return Object.assign(Ct.getDefaults(), {
          normalize: !0,
          onload: K
        });
      }

      load(t) {
        return S(this, void 0, void 0, function* () {
          this.buffer = yield this._buffer.load(t);
        });
      }

      get buffer() {
        return this._buffer.length ? this._buffer : null;
      }

      set buffer(t) {
        t && this._buffer.set(t), this._convolver.buffer && (this.input.disconnect(), this._convolver.disconnect(), this._convolver = this.context.createConvolver(), this.input.chain(this._convolver, this.output));

        const e = this._buffer.get();

        this._convolver.buffer = e || null;
      }

      get normalize() {
        return this._convolver.normalize;
      }

      set normalize(t) {
        this._convolver.normalize = t;
      }

      dispose() {
        return super.dispose(), this._buffer.dispose(), this._convolver.disconnect(), this;
      }

    }

    function qs() {
      return it().now();
    }

    function Is() {
      return it().immediate();
    }

    const Fs = it().transport;

    function Vs() {
      return it().transport;
    }

    const Ns = it().destination,
          Ps = it().destination;

    function Ls() {
      return it().destination;
    }

    const zs = it().listener;

    function Bs() {
      return it().listener;
    }

    const Ws = it().draw;

    function Us() {
      return it().draw;
    }

    const Gs = it();

    function Ys() {
      return tt.loaded();
    }

    const Qs = tt,
          Zs = $t,
          Xs = se;
  }]);
}); //# sourceMappingURL=Tone.js.map
},{}],"4a1b9fb8a9bff5151cd568c9bcbb2aec":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.midiToFrequency = midiToFrequency;
exports.randomRange = randomRange;
exports.randomItem = randomItem;
exports.frequencyToMidi = frequencyToMidi;
exports.isAudioSupported = isAudioSupported;
exports.isUserMediaSupported = isUserMediaSupported;
exports.isIOS = isIOS;
exports.getQueryVariable = getQueryVariable;
exports.debug = debug;
exports.ranmdomItem = ranmdomItem;

var _tone = require("tone");

function midiToFrequency(midi) {
  return new _tone.Frequency(midi, "midi").toFrequency();
}

function randomRange(min, max) {
  return Math.random() * (max - min) + min;
}

function randomItem(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

function frequencyToMidi(frequency) {
  return frequencyToMidi(frequency);
}

function isAudioSupported() {
  return window.AudioContext || window.webkitAudioContext;
}

function isUserMediaSupported() {
  return window.navigator.mediaDevices && window.navigator.mediaDevices.getUserMedia;
}

function isIOS() {
  return /iPad|iPhone|iPod/.test(window.navigator.userAgent);
}

function getQueryVariable(variable) {
  const query = window.location.search.substring(1);
  const vars = query.split('&');

  for (let i = 0; i < vars.length; i++) {
    const pair = vars[i].split('=');

    if (decodeURIComponent(pair[0]) == variable) {
      return decodeURIComponent(pair[1]);
    }
  }

  return null;
}

function debug(...args) {
  if (getQueryVariable('debug')) {
    console.log(...args);
  }
}

function ranmdomItem(items) {
  return items[Math.floor(Math.random() * items.length)];
}
},{"tone":"b8906ac01d5dae3b93be7106dc3620c6"}],"830ce48931a6ecc988fe85d7f63f8b93":[function(require,module,exports) {
module.exports = JSON.parse("{\"apiKey\":\"AIzaSyA72_qMzv8M1kjhSw_0TafCgaMpDoTq2TY\",\"authDomain\":\"swarm-animism.firebaseapp.com\",\"databaseURL\":\"https://swarm-animism.firebaseio.com\",\"projectId\":\"swarm-animism\",\"storageBucket\":\"\",\"messagingSenderId\":\"996873372497\"}");
},{}],"7e352fb233400a283b83024ea642ce3e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _aWeighting = require("a-weighting");

var _utils = require("../utils");

var _tone = require("tone");

// import bandpassChordDetector from '../behaviours/bandpassPolyTracker'
const defaultOptions = {
  filterQ: 0.75,
  filterRange: 7,
  filterRolloff: -24,
  minInitialNote: 60,
  maxInitialNote: 82,
  minLFOFrequency: 0.1,
  maxLFOFrequency: 0.75,
  minVelocity: 0.01,
  maxVelocity: 0.05,
  velocityRange: 1,
  minVolume: 0.0,
  maxVolume: 0.5,
  triggerChord: [60, 67]
};

class FlockingAgent {
  constructor(options = {}, visuals, gainNode) {
    this.visuals = visuals;
    this.options = Object.assign({}, defaultOptions, options); // Synthesized sound of our agent (output)

    this.synth = new _tone.Synth({
      oscillator: {
        type: 'sine'
      },
      envelope: {
        attack: 0.005,
        decay: 0.1,
        sustain: 1,
        release: 1
      }
    });
    this.synthGainNode = new _tone.Gain();
    this.synthGainNode.toDestination();
    this.synth.connect(this.synthGainNode); // Filters to analyse the signal at two poles around the center

    this.filterLeft = new _tone.Filter({
      frequency: 440,
      type: 'bandpass',
      rolloff: this.options.filterRolloff,
      Q: this.options.filterQ,
      gain: 0
    });
    this.filterRight = new _tone.Filter({
      frequency: 440,
      type: 'bandpass',
      rolloff: this.options.filterRolloff,
      Q: this.options.filterQ,
      gain: 0
    });
    this.meterLeft = new _tone.Meter();
    this.meterRight = new _tone.Meter();
    gainNode.connect(this.filterLeft);
    gainNode.connect(this.filterRight);
    this.filterLeft.connect(this.meterLeft);
    this.filterRight.connect(this.meterRight); // Choose some random parameters

    this.newRandomNote(); // LFO for controlling the synth gain

    const lfoFrequency = (0, _utils.randomRange)(this.options.minLFOFrequency, this.options.maxLFOFrequency);
    this.gainLFO = new _tone.LFO(lfoFrequency, this.options.minVolume, this.options.maxVolume);
    this.gainLFO.connect(this.synthGainNode.gain); // this.bandpassChordDetector = bandpassChordDetector(
    //   this.options.triggerChord,
    //   gainNode
    // )

    this.interval = null;
  }

  newRandomNote() {
    this.velocity = (0, _utils.randomRange)(this.options.minVelocity, this.options.maxVelocity);
    this.initialNote = (0, _utils.randomRange)(this.options.minInitialNote, this.options.maxInitialNote);
    this.currentNote = this.initialNote;
    this.currentVelocity = this.velocity; // Set the filter poles to initial positions

    this.setFilterPoles(this.initialNote);
  }

  start() {
    this.newRandomNote(); // The synthesizer play all the time, trigger its note

    this.synth.triggerAttack((0, _utils.midiToFrequency)(this.initialNote)); // Start the LFO

    this.gainLFO.start(); // Change screen color

    this.interval = setInterval(() => {
      const nextFrequency = (0, _utils.midiToFrequency)(this.currentNote);
      this.visuals.setToColor([0, 0, 105 + Math.round(nextFrequency) % 150]);
    }, 1000);
  }

  stop() {
    this.synth.triggerRelease(); // Stop the LFO

    this.gainLFO.stop(); // Remove overlay

    this.visuals.resetColor();
    clearInterval(this.interval);
  }

  setFilterPoles(centerNote) {
    const {
      filterRange
    } = this.options;
    const left = (0, _utils.midiToFrequency)(centerNote - filterRange);
    const right = (0, _utils.midiToFrequency)(centerNote + filterRange);
    this.filterLeft.frequency.setValueAtTime(left, '+0');
    this.filterRight.frequency.setValueAtTime(right, '+0');
  }

  update() {
    // Generate random frequency when chord was detected
    // if (this.bandpassChordDetector()) {
    //   this.newRandomNote()
    //   this.visuals.flash()
    // }
    // Get meter and frequency values of our filter poles
    const leftMeterValue = this.meterLeft.getValue();
    const rightMeterValue = this.meterRight.getValue();
    const leftFilterFreq = this.filterLeft.frequency.value;
    const rightFilterFreq = this.filterRight.frequency.value; // Make all frequencies equally loud

    const weightedLeftMeterValue = (0, _aWeighting.a)(leftFilterFreq) * leftMeterValue;
    const weightedRightMeterValue = (0, _aWeighting.a)(rightFilterFreq) * rightMeterValue;

    if (!(isFinite(rightMeterValue) && isFinite(leftMeterValue))) {
      return;
    } // Velocity is depended on distance to the target frequency


    this.currentVelocity = Math.min(Math.max((rightMeterValue - leftMeterValue) * this.velocity, -this.options.velocityRange), this.options.velocityRange); // Update the frequencies

    this.currentNote += this.currentVelocity;
    this.setFilterPoles(this.currentNote); // Change the synth note

    const nextFrequency = (0, _utils.midiToFrequency)(this.currentNote);
    this.synth.setNote(nextFrequency); // Debug output

    (0, _utils.debug)('=========');
    (0, _utils.debug)(leftMeterValue, rightMeterValue, this.currentVelocity);
    (0, _utils.debug)(nextFrequency);
  }

}

exports.default = FlockingAgent;
},{"a-weighting":"d8081e66cb72ea163d5d73d58e8b6f14","../utils":"4a1b9fb8a9bff5151cd568c9bcbb2aec","tone":"b8906ac01d5dae3b93be7106dc3620c6"}],"d8081e66cb72ea163d5d73d58e8b6f14":[function(require,module,exports) {
/**
 * @module  noise-weighting
 */

module.exports = {
	a: require('./a'),
	b: require('./b'),
	c: require('./c'),
	d: require('./d'),
	m: require('./m'),
	z: require('./z')
};

},{"./a":"8932f65bc1167fa8a0fb19c214210ee6","./b":"afd233f996473e069fbcaba93e95ea67","./c":"a9efa6244e5300b1c552c450e8e92357","./d":"efb96c8711b6dd45eca02e66e23cb053","./m":"460672032661dad8c07bdee559b53ccc","./z":"e7d0a464dee391914e1b027a7cd11717"}],"8932f65bc1167fa8a0fb19c214210ee6":[function(require,module,exports) {
module.exports = function a (f) {
	var f2 = f*f;
	return 1.2588966 * 148840000 * f2*f2 /
	((f2 + 424.36) * Math.sqrt((f2 + 11599.29) * (f2 + 544496.41)) * (f2 + 148840000));
};

},{}],"afd233f996473e069fbcaba93e95ea67":[function(require,module,exports) {
module.exports = function b (f) {
	var f2 = f*f;
	return 1.019764760044717 * 148840000 * f*f2 /
	((f2 + 424.36) * Math.sqrt(f2 + 25122.25) * (f2 + 148840000));
};

},{}],"a9efa6244e5300b1c552c450e8e92357":[function(require,module,exports) {
module.exports = function c (f) {
	var f2 = f*f;
	return 1.0069316688518042 * 148840000 * f2 /
	((f2 + 424.36) * (f2 + 148840000));
};

},{}],"efb96c8711b6dd45eca02e66e23cb053":[function(require,module,exports) {
module.exports = function d (f) {
	var f2 = f*f;
	return (f / 6.8966888496476e-5) * Math.sqrt(
		(
			((1037918.48 - f2)*(1037918.48 - f2) + 1080768.16*f2) /
			((9837328 - f2)*(9837328 - f2) + 11723776*f2)
		) /	((f2 + 79919.29) * (f2 + 1345600))
	);
};

},{}],"460672032661dad8c07bdee559b53ccc":[function(require,module,exports) {
module.exports = function itu (f) {
	var f2 = f*f;

	var h1 = -4.737338981378384e-24*f2*f2*f2 + 2.043828333606125e-15*f2*f2 - 1.363894795463638e-7*f2 + 1;
	var h2 = 1.306612257412824e-19*f2*f2*f - 2.118150887518656e-11*f2*f + 5.559488023498642e-4*f;

	return 8.128305161640991 * 1.246332637532143e-4 * f / Math.sqrt(h1*h1 + h2*h2);
};

},{}],"e7d0a464dee391914e1b027a7cd11717":[function(require,module,exports) {
module.exports = function (f) {
	return 1;
};

},{}],"b9e665925a6158b86c87379809f168e2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tone = require("tone");

var _utils = require("../utils");

var _bandpassPolyTracker = _interopRequireDefault(require("../behaviours/bandpassPolyTracker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const CHORDS = [
//   { name: 'C', notes: [60, 64, 67], next: 'G' },
//   { name: 'G', notes: [67, 71, 74], next: 'Am' },
//   { name: 'Am', notes: [69, 72, 76], next: 'F' },
//   { name: 'F', notes: [65, 69, 72], next: 'C' },
// ]
const CHORDS = [{
  name: 'C',
  notes: [60],
  next: 'E'
}, {
  name: 'E',
  notes: [64],
  next: 'C'
} // { name: 'A', notes: [69], next: 'C' },
// { name: 'Am', notes: [69, 72, 76], next: 'F' },
// { name: 'F', notes: [65, 69, 72], next: 'C' },
];
const defaultOptions = {
  minLFOFrequency: 0.1,
  maxLFOFrequency: 0.5,
  minVolume: 0.0,
  maxVolume: 0.4
};

class ChordAgent {
  constructor(options = {}, visuals, gainNode) {
    this.converter = new _tone.Frequency();
    this.visuals = visuals;
    this.options = Object.assign({}, defaultOptions, options); // Synthesized sound of our agent (output)

    this.synth = new _tone.PolySynth(); //(3, Synth)

    this.synth.set({
      oscillator: {
        type: 'sine'
      },
      envelope: {
        attack: 0.005,
        decay: 0.1,
        sustain: 0.7,
        release: 1
      }
    });
    this.synthGainNode = new _tone.Gain(0.2);
    this.synthGainNode.toDestination();
    this.synth.connect(this.synthGainNode); // LFO for controlling the synth gain

    const lfoFrequency = (0, _utils.randomRange)(this.options.minLFOFrequency, this.options.maxLFOFrequency);
    this.gainLFO = new _tone.LFO(lfoFrequency, this.options.minVolume, this.options.maxVolume);
    this.gainLFO.connect(this.synthGainNode.gain); // this.synthGainNode.gain.set() = 0.1;

    this.chordDetectors = Object.keys(CHORDS).map(chordName => {
      return (0, _bandpassPolyTracker.default)(CHORDS[chordName].notes, gainNode);
    });
    this.playingChord = null;
  }

  start() {
    // Start the LFO
    this.gainLFO.start();
  }

  stop() {// unused
  }

  update() {
    const chordsTriggered = CHORDS.map(({
      name
    }, i) => {
      return {
        name,
        triggered: this.chordDetectors[i]()
      };
    }).filter(t => t.triggered).map(({
      name
    }) => name);
    if (chordsTriggered.length > 0) console.log('chordsTriggered', chordsTriggered);

    if (chordsTriggered.length > 0) {
      const triggeredChordName = (0, _utils.randomItem)(chordsTriggered);
      const nextChord = CHORDS.find(({
        name
      }) => name === triggeredChordName).next;
      const notes = CHORDS.find(({
        name
      }) => name === nextChord).notes;
      this.synth.triggerAttackRelease(notes.map(_utils.midiToFrequency), '1n', '+1n');
      this.visuals.flash();
      console.log(triggeredChordName);
      console.log('next', nextChord); // console.log(notes)
    }
  }

}

exports.default = ChordAgent;
},{"tone":"b8906ac01d5dae3b93be7106dc3620c6","../utils":"4a1b9fb8a9bff5151cd568c9bcbb2aec","../behaviours/bandpassPolyTracker":"b3880a84399490329252c4d1f4ca50e7"}],"b3880a84399490329252c4d1f4ca50e7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSmoothingFunctor = getSmoothingFunctor;
exports.default = createBandpassNoteTracker;

var _ramda = require("ramda");

var _tone = require("tone");

var _utils = require("../utils");

const SMOOTHING = 0.94;

function getSmoothingFunctor(smoothing = 0.9, startValue = null) {
  let smoothedValue = startValue;
  return newValue => {
    if (!isFinite(newValue) || isNaN(newValue)) {
      return smoothedValue;
    }

    if (smoothedValue === null) {
      smoothedValue = newValue;
    } else {
      smoothedValue = smoothing * smoothedValue + (1 - smoothing) * newValue;
    }

    return smoothedValue;
  };
}

function createBandpassNoteTracker(midiNotes, inputNode) {
  const filterMeters = midiNotes.map(key => {
    const filter = new _tone.Filter({
      frequency: (0, _utils.midiToFrequency)(key),
      type: 'bandpass',
      rolloff: -48,
      Q: 20,
      gain: 0
    });
    const meter = new _tone.Meter();
    inputNode.connect(filter);
    filter.connect(meter);
    return meter;
  }).map(meter => {
    const smoother = getSmoothingFunctor(SMOOTHING);
    return () => smoother(meter.getValue());
  });
  const overallInputMeter = new _tone.Meter();
  const inputMeterSmoother = getSmoothingFunctor(SMOOTHING);

  const smoothedOverallInputMeter = () => {
    return inputMeterSmoother(overallInputMeter.getValue());
  };

  inputNode.connect(overallInputMeter);
  let previousChordTriggered = false; // const smooth = (previousValue, value, smoothing = 0.9) => previousValue * smoothing + (1-smoothing) * value

  function updateFunction() {
    const filterMeterValues = filterMeters.map(meter => meter());
    const overallInputLevel = smoothedOverallInputMeter(); // console.log(overallInputLevel)

    if (overallInputLevel === null) {
      return false;
    }

    const normalizedFilterMeterValues = filterMeterValues.map(level => {
      return level - overallInputLevel;
    }); // console.log(normalizedFilterMeterValues, overallInputLevel)

    const chordTriggered = (0, _ramda.all)(level => level > -40, normalizedFilterMeterValues) && overallInputLevel > -30;
    const newChordTriggered = !previousChordTriggered && chordTriggered;
    previousChordTriggered = chordTriggered;
    return newChordTriggered;
  }

  return updateFunction;
}
},{"ramda":"148468dd8c68f2aa07cb74776f3a1104","tone":"b8906ac01d5dae3b93be7106dc3620c6","../utils":"4a1b9fb8a9bff5151cd568c9bcbb2aec"}],"148468dd8c68f2aa07cb74776f3a1104":[function(require,module,exports) {
module.exports = {};
module.exports.F =
/*#__PURE__*/
require("./F");
module.exports.T =
/*#__PURE__*/
require("./T");
module.exports.__ =
/*#__PURE__*/
require("./__");
module.exports.add =
/*#__PURE__*/
require("./add");
module.exports.addIndex =
/*#__PURE__*/
require("./addIndex");
module.exports.adjust =
/*#__PURE__*/
require("./adjust");
module.exports.all =
/*#__PURE__*/
require("./all");
module.exports.allPass =
/*#__PURE__*/
require("./allPass");
module.exports.always =
/*#__PURE__*/
require("./always");
module.exports.and =
/*#__PURE__*/
require("./and");
module.exports.any =
/*#__PURE__*/
require("./any");
module.exports.anyPass =
/*#__PURE__*/
require("./anyPass");
module.exports.ap =
/*#__PURE__*/
require("./ap");
module.exports.aperture =
/*#__PURE__*/
require("./aperture");
module.exports.append =
/*#__PURE__*/
require("./append");
module.exports.apply =
/*#__PURE__*/
require("./apply");
module.exports.applySpec =
/*#__PURE__*/
require("./applySpec");
module.exports.applyTo =
/*#__PURE__*/
require("./applyTo");
module.exports.ascend =
/*#__PURE__*/
require("./ascend");
module.exports.assoc =
/*#__PURE__*/
require("./assoc");
module.exports.assocPath =
/*#__PURE__*/
require("./assocPath");
module.exports.binary =
/*#__PURE__*/
require("./binary");
module.exports.bind =
/*#__PURE__*/
require("./bind");
module.exports.both =
/*#__PURE__*/
require("./both");
module.exports.call =
/*#__PURE__*/
require("./call");
module.exports.chain =
/*#__PURE__*/
require("./chain");
module.exports.clamp =
/*#__PURE__*/
require("./clamp");
module.exports.clone =
/*#__PURE__*/
require("./clone");
module.exports.comparator =
/*#__PURE__*/
require("./comparator");
module.exports.complement =
/*#__PURE__*/
require("./complement");
module.exports.compose =
/*#__PURE__*/
require("./compose");
module.exports.composeK =
/*#__PURE__*/
require("./composeK");
module.exports.composeP =
/*#__PURE__*/
require("./composeP");
module.exports.composeWith =
/*#__PURE__*/
require("./composeWith");
module.exports.concat =
/*#__PURE__*/
require("./concat");
module.exports.cond =
/*#__PURE__*/
require("./cond");
module.exports.construct =
/*#__PURE__*/
require("./construct");
module.exports.constructN =
/*#__PURE__*/
require("./constructN");
module.exports.contains =
/*#__PURE__*/
require("./contains");
module.exports.converge =
/*#__PURE__*/
require("./converge");
module.exports.countBy =
/*#__PURE__*/
require("./countBy");
module.exports.curry =
/*#__PURE__*/
require("./curry");
module.exports.curryN =
/*#__PURE__*/
require("./curryN");
module.exports.dec =
/*#__PURE__*/
require("./dec");
module.exports.defaultTo =
/*#__PURE__*/
require("./defaultTo");
module.exports.descend =
/*#__PURE__*/
require("./descend");
module.exports.difference =
/*#__PURE__*/
require("./difference");
module.exports.differenceWith =
/*#__PURE__*/
require("./differenceWith");
module.exports.dissoc =
/*#__PURE__*/
require("./dissoc");
module.exports.dissocPath =
/*#__PURE__*/
require("./dissocPath");
module.exports.divide =
/*#__PURE__*/
require("./divide");
module.exports.drop =
/*#__PURE__*/
require("./drop");
module.exports.dropLast =
/*#__PURE__*/
require("./dropLast");
module.exports.dropLastWhile =
/*#__PURE__*/
require("./dropLastWhile");
module.exports.dropRepeats =
/*#__PURE__*/
require("./dropRepeats");
module.exports.dropRepeatsWith =
/*#__PURE__*/
require("./dropRepeatsWith");
module.exports.dropWhile =
/*#__PURE__*/
require("./dropWhile");
module.exports.either =
/*#__PURE__*/
require("./either");
module.exports.empty =
/*#__PURE__*/
require("./empty");
module.exports.endsWith =
/*#__PURE__*/
require("./endsWith");
module.exports.eqBy =
/*#__PURE__*/
require("./eqBy");
module.exports.eqProps =
/*#__PURE__*/
require("./eqProps");
module.exports.equals =
/*#__PURE__*/
require("./equals");
module.exports.evolve =
/*#__PURE__*/
require("./evolve");
module.exports.filter =
/*#__PURE__*/
require("./filter");
module.exports.find =
/*#__PURE__*/
require("./find");
module.exports.findIndex =
/*#__PURE__*/
require("./findIndex");
module.exports.findLast =
/*#__PURE__*/
require("./findLast");
module.exports.findLastIndex =
/*#__PURE__*/
require("./findLastIndex");
module.exports.flatten =
/*#__PURE__*/
require("./flatten");
module.exports.flip =
/*#__PURE__*/
require("./flip");
module.exports.forEach =
/*#__PURE__*/
require("./forEach");
module.exports.forEachObjIndexed =
/*#__PURE__*/
require("./forEachObjIndexed");
module.exports.fromPairs =
/*#__PURE__*/
require("./fromPairs");
module.exports.groupBy =
/*#__PURE__*/
require("./groupBy");
module.exports.groupWith =
/*#__PURE__*/
require("./groupWith");
module.exports.gt =
/*#__PURE__*/
require("./gt");
module.exports.gte =
/*#__PURE__*/
require("./gte");
module.exports.has =
/*#__PURE__*/
require("./has");
module.exports.hasIn =
/*#__PURE__*/
require("./hasIn");
module.exports.hasPath =
/*#__PURE__*/
require("./hasPath");
module.exports.head =
/*#__PURE__*/
require("./head");
module.exports.identical =
/*#__PURE__*/
require("./identical");
module.exports.identity =
/*#__PURE__*/
require("./identity");
module.exports.ifElse =
/*#__PURE__*/
require("./ifElse");
module.exports.inc =
/*#__PURE__*/
require("./inc");
module.exports.includes =
/*#__PURE__*/
require("./includes");
module.exports.indexBy =
/*#__PURE__*/
require("./indexBy");
module.exports.indexOf =
/*#__PURE__*/
require("./indexOf");
module.exports.init =
/*#__PURE__*/
require("./init");
module.exports.innerJoin =
/*#__PURE__*/
require("./innerJoin");
module.exports.insert =
/*#__PURE__*/
require("./insert");
module.exports.insertAll =
/*#__PURE__*/
require("./insertAll");
module.exports.intersection =
/*#__PURE__*/
require("./intersection");
module.exports.intersperse =
/*#__PURE__*/
require("./intersperse");
module.exports.into =
/*#__PURE__*/
require("./into");
module.exports.invert =
/*#__PURE__*/
require("./invert");
module.exports.invertObj =
/*#__PURE__*/
require("./invertObj");
module.exports.invoker =
/*#__PURE__*/
require("./invoker");
module.exports.is =
/*#__PURE__*/
require("./is");
module.exports.isEmpty =
/*#__PURE__*/
require("./isEmpty");
module.exports.isNil =
/*#__PURE__*/
require("./isNil");
module.exports.join =
/*#__PURE__*/
require("./join");
module.exports.juxt =
/*#__PURE__*/
require("./juxt");
module.exports.keys =
/*#__PURE__*/
require("./keys");
module.exports.keysIn =
/*#__PURE__*/
require("./keysIn");
module.exports.last =
/*#__PURE__*/
require("./last");
module.exports.lastIndexOf =
/*#__PURE__*/
require("./lastIndexOf");
module.exports.length =
/*#__PURE__*/
require("./length");
module.exports.lens =
/*#__PURE__*/
require("./lens");
module.exports.lensIndex =
/*#__PURE__*/
require("./lensIndex");
module.exports.lensPath =
/*#__PURE__*/
require("./lensPath");
module.exports.lensProp =
/*#__PURE__*/
require("./lensProp");
module.exports.lift =
/*#__PURE__*/
require("./lift");
module.exports.liftN =
/*#__PURE__*/
require("./liftN");
module.exports.lt =
/*#__PURE__*/
require("./lt");
module.exports.lte =
/*#__PURE__*/
require("./lte");
module.exports.map =
/*#__PURE__*/
require("./map");
module.exports.mapAccum =
/*#__PURE__*/
require("./mapAccum");
module.exports.mapAccumRight =
/*#__PURE__*/
require("./mapAccumRight");
module.exports.mapObjIndexed =
/*#__PURE__*/
require("./mapObjIndexed");
module.exports.match =
/*#__PURE__*/
require("./match");
module.exports.mathMod =
/*#__PURE__*/
require("./mathMod");
module.exports.max =
/*#__PURE__*/
require("./max");
module.exports.maxBy =
/*#__PURE__*/
require("./maxBy");
module.exports.mean =
/*#__PURE__*/
require("./mean");
module.exports.median =
/*#__PURE__*/
require("./median");
module.exports.memoizeWith =
/*#__PURE__*/
require("./memoizeWith");
module.exports.merge =
/*#__PURE__*/
require("./merge");
module.exports.mergeAll =
/*#__PURE__*/
require("./mergeAll");
module.exports.mergeDeepLeft =
/*#__PURE__*/
require("./mergeDeepLeft");
module.exports.mergeDeepRight =
/*#__PURE__*/
require("./mergeDeepRight");
module.exports.mergeDeepWith =
/*#__PURE__*/
require("./mergeDeepWith");
module.exports.mergeDeepWithKey =
/*#__PURE__*/
require("./mergeDeepWithKey");
module.exports.mergeLeft =
/*#__PURE__*/
require("./mergeLeft");
module.exports.mergeRight =
/*#__PURE__*/
require("./mergeRight");
module.exports.mergeWith =
/*#__PURE__*/
require("./mergeWith");
module.exports.mergeWithKey =
/*#__PURE__*/
require("./mergeWithKey");
module.exports.min =
/*#__PURE__*/
require("./min");
module.exports.minBy =
/*#__PURE__*/
require("./minBy");
module.exports.modulo =
/*#__PURE__*/
require("./modulo");
module.exports.move =
/*#__PURE__*/
require("./move");
module.exports.multiply =
/*#__PURE__*/
require("./multiply");
module.exports.nAry =
/*#__PURE__*/
require("./nAry");
module.exports.negate =
/*#__PURE__*/
require("./negate");
module.exports.none =
/*#__PURE__*/
require("./none");
module.exports.not =
/*#__PURE__*/
require("./not");
module.exports.nth =
/*#__PURE__*/
require("./nth");
module.exports.nthArg =
/*#__PURE__*/
require("./nthArg");
module.exports.o =
/*#__PURE__*/
require("./o");
module.exports.objOf =
/*#__PURE__*/
require("./objOf");
module.exports.of =
/*#__PURE__*/
require("./of");
module.exports.omit =
/*#__PURE__*/
require("./omit");
module.exports.once =
/*#__PURE__*/
require("./once");
module.exports.or =
/*#__PURE__*/
require("./or");
module.exports.otherwise =
/*#__PURE__*/
require("./otherwise");
module.exports.over =
/*#__PURE__*/
require("./over");
module.exports.pair =
/*#__PURE__*/
require("./pair");
module.exports.partial =
/*#__PURE__*/
require("./partial");
module.exports.partialRight =
/*#__PURE__*/
require("./partialRight");
module.exports.partition =
/*#__PURE__*/
require("./partition");
module.exports.path =
/*#__PURE__*/
require("./path");
module.exports.paths =
/*#__PURE__*/
require("./paths");
module.exports.pathEq =
/*#__PURE__*/
require("./pathEq");
module.exports.pathOr =
/*#__PURE__*/
require("./pathOr");
module.exports.pathSatisfies =
/*#__PURE__*/
require("./pathSatisfies");
module.exports.pick =
/*#__PURE__*/
require("./pick");
module.exports.pickAll =
/*#__PURE__*/
require("./pickAll");
module.exports.pickBy =
/*#__PURE__*/
require("./pickBy");
module.exports.pipe =
/*#__PURE__*/
require("./pipe");
module.exports.pipeK =
/*#__PURE__*/
require("./pipeK");
module.exports.pipeP =
/*#__PURE__*/
require("./pipeP");
module.exports.pipeWith =
/*#__PURE__*/
require("./pipeWith");
module.exports.pluck =
/*#__PURE__*/
require("./pluck");
module.exports.prepend =
/*#__PURE__*/
require("./prepend");
module.exports.product =
/*#__PURE__*/
require("./product");
module.exports.project =
/*#__PURE__*/
require("./project");
module.exports.prop =
/*#__PURE__*/
require("./prop");
module.exports.propEq =
/*#__PURE__*/
require("./propEq");
module.exports.propIs =
/*#__PURE__*/
require("./propIs");
module.exports.propOr =
/*#__PURE__*/
require("./propOr");
module.exports.propSatisfies =
/*#__PURE__*/
require("./propSatisfies");
module.exports.props =
/*#__PURE__*/
require("./props");
module.exports.range =
/*#__PURE__*/
require("./range");
module.exports.reduce =
/*#__PURE__*/
require("./reduce");
module.exports.reduceBy =
/*#__PURE__*/
require("./reduceBy");
module.exports.reduceRight =
/*#__PURE__*/
require("./reduceRight");
module.exports.reduceWhile =
/*#__PURE__*/
require("./reduceWhile");
module.exports.reduced =
/*#__PURE__*/
require("./reduced");
module.exports.reject =
/*#__PURE__*/
require("./reject");
module.exports.remove =
/*#__PURE__*/
require("./remove");
module.exports.repeat =
/*#__PURE__*/
require("./repeat");
module.exports.replace =
/*#__PURE__*/
require("./replace");
module.exports.reverse =
/*#__PURE__*/
require("./reverse");
module.exports.scan =
/*#__PURE__*/
require("./scan");
module.exports.sequence =
/*#__PURE__*/
require("./sequence");
module.exports.set =
/*#__PURE__*/
require("./set");
module.exports.slice =
/*#__PURE__*/
require("./slice");
module.exports.sort =
/*#__PURE__*/
require("./sort");
module.exports.sortBy =
/*#__PURE__*/
require("./sortBy");
module.exports.sortWith =
/*#__PURE__*/
require("./sortWith");
module.exports.split =
/*#__PURE__*/
require("./split");
module.exports.splitAt =
/*#__PURE__*/
require("./splitAt");
module.exports.splitEvery =
/*#__PURE__*/
require("./splitEvery");
module.exports.splitWhen =
/*#__PURE__*/
require("./splitWhen");
module.exports.startsWith =
/*#__PURE__*/
require("./startsWith");
module.exports.subtract =
/*#__PURE__*/
require("./subtract");
module.exports.sum =
/*#__PURE__*/
require("./sum");
module.exports.symmetricDifference =
/*#__PURE__*/
require("./symmetricDifference");
module.exports.symmetricDifferenceWith =
/*#__PURE__*/
require("./symmetricDifferenceWith");
module.exports.tail =
/*#__PURE__*/
require("./tail");
module.exports.take =
/*#__PURE__*/
require("./take");
module.exports.takeLast =
/*#__PURE__*/
require("./takeLast");
module.exports.takeLastWhile =
/*#__PURE__*/
require("./takeLastWhile");
module.exports.takeWhile =
/*#__PURE__*/
require("./takeWhile");
module.exports.tap =
/*#__PURE__*/
require("./tap");
module.exports.test =
/*#__PURE__*/
require("./test");
module.exports.andThen =
/*#__PURE__*/
require("./andThen");
module.exports.times =
/*#__PURE__*/
require("./times");
module.exports.toLower =
/*#__PURE__*/
require("./toLower");
module.exports.toPairs =
/*#__PURE__*/
require("./toPairs");
module.exports.toPairsIn =
/*#__PURE__*/
require("./toPairsIn");
module.exports.toString =
/*#__PURE__*/
require("./toString");
module.exports.toUpper =
/*#__PURE__*/
require("./toUpper");
module.exports.transduce =
/*#__PURE__*/
require("./transduce");
module.exports.transpose =
/*#__PURE__*/
require("./transpose");
module.exports.traverse =
/*#__PURE__*/
require("./traverse");
module.exports.trim =
/*#__PURE__*/
require("./trim");
module.exports.tryCatch =
/*#__PURE__*/
require("./tryCatch");
module.exports.type =
/*#__PURE__*/
require("./type");
module.exports.unapply =
/*#__PURE__*/
require("./unapply");
module.exports.unary =
/*#__PURE__*/
require("./unary");
module.exports.uncurryN =
/*#__PURE__*/
require("./uncurryN");
module.exports.unfold =
/*#__PURE__*/
require("./unfold");
module.exports.union =
/*#__PURE__*/
require("./union");
module.exports.unionWith =
/*#__PURE__*/
require("./unionWith");
module.exports.uniq =
/*#__PURE__*/
require("./uniq");
module.exports.uniqBy =
/*#__PURE__*/
require("./uniqBy");
module.exports.uniqWith =
/*#__PURE__*/
require("./uniqWith");
module.exports.unless =
/*#__PURE__*/
require("./unless");
module.exports.unnest =
/*#__PURE__*/
require("./unnest");
module.exports.until =
/*#__PURE__*/
require("./until");
module.exports.update =
/*#__PURE__*/
require("./update");
module.exports.useWith =
/*#__PURE__*/
require("./useWith");
module.exports.values =
/*#__PURE__*/
require("./values");
module.exports.valuesIn =
/*#__PURE__*/
require("./valuesIn");
module.exports.view =
/*#__PURE__*/
require("./view");
module.exports.when =
/*#__PURE__*/
require("./when");
module.exports.where =
/*#__PURE__*/
require("./where");
module.exports.whereEq =
/*#__PURE__*/
require("./whereEq");
module.exports.without =
/*#__PURE__*/
require("./without");
module.exports.xor =
/*#__PURE__*/
require("./xor");
module.exports.xprod =
/*#__PURE__*/
require("./xprod");
module.exports.zip =
/*#__PURE__*/
require("./zip");
module.exports.zipObj =
/*#__PURE__*/
require("./zipObj");
module.exports.zipWith =
/*#__PURE__*/
require("./zipWith");
module.exports.thunkify =
/*#__PURE__*/
require("./thunkify");
},{"./F":"95e84bdf553b332aec8d7e6277edc92d","./T":"f2419f4074a3802a3422166fdff41edd","./__":"1b09ad7aae026ffc13d799ca3986bccc","./add":"a3b79036cbf2a16e1129f1d17bed5f33","./addIndex":"eea2c706c2dfd98fa91d008efa3331a8","./adjust":"4709e7acf7da40bfd892026a578e14dd","./all":"3eca526a06def7c980f1164620ccd9d6","./allPass":"572ce477216e3ae41020e0045d089c3f","./always":"c4c44b815065280ed5ede48eae4ca7ef","./and":"f17719bf155329cfebeba00581aed03d","./any":"b9891f1ee49ecc381ced1a240f66d0bd","./anyPass":"da19199a0f69cbbb39f91aa69ee80606","./ap":"3be78354abdad9c47ed7e04ec471cd25","./aperture":"4b4b3c59478a791f93490c95ddc96ae9","./append":"e911cfa0e4d4d111804331f34d7362ca","./apply":"0dc7e9cf83550c68a026a33d97c40af4","./applySpec":"c1dea3ebd4e32577edf01344a4202e6a","./applyTo":"12008644334c4fd6803ce1d05246e479","./ascend":"cf59e2b4373781f7c91867fd62773adb","./assoc":"560d13e1b359f44b6b5f43b6e586d004","./assocPath":"97bedbcca6d8644b1a63bf2c3bcae124","./binary":"fd6c3dd7bb8bb60885b2d3e36eab9b22","./bind":"828084aa8205d18218bc9f4d6d82265c","./both":"2f45914f7246b9cca1f6cd947a4a956a","./call":"bdebe2164925d606eb9293c22841d86e","./chain":"50bf0a82c73d05d6b6bb831f8ed66823","./clamp":"9becbf04a819710448b52ffecdf4b0a3","./clone":"2f50cb9c9275daed668aa2f3af0115eb","./comparator":"817e1680d3c649b6d2883f7eabc2bd8c","./complement":"0449c9a3726724b2b48e3b5b6d9bed34","./compose":"49c9bbfd09b8bcd1c24ff1bd3a7d209d","./composeK":"1c53fa1f8dbe9fa9cf53a5e8942fe910","./composeP":"976a21ee8c84cd009934ae1cd20fa89c","./composeWith":"098110c6f60ee2426bf05c14f557ca69","./concat":"22f14b64aca33ebdeafc850fb29c3b01","./cond":"cb47fcd807cf4c7df3bd5a6be75382fe","./construct":"ec499e2834356e0336849c74343bd006","./constructN":"4efdf1117289a9dd1e3791da2e87bc13","./contains":"684cafe5aa7bb550ec645cab4decf616","./converge":"97b8ff8268670153df1acf0b7072f5e5","./countBy":"e247094c0f26d7e4da4f450357c1a02d","./curry":"1861c52d776ae21c236d9e53ac669447","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./dec":"64fc5324529317225fd1318eae39ff2c","./defaultTo":"912fc3ecc2a62f9cf7a7079988783e1a","./descend":"68642aac0ec0b4e94ed9e8c021d3dbf0","./difference":"f754e7875b0371199ee39c9cfddf6f93","./differenceWith":"e3cee16d8750d79e9e29ba9457981d22","./dissoc":"98362a29c072508c138edb6474ef9c40","./dissocPath":"a5b017cdf24781d487574871ef707a87","./divide":"76d79ec16fd0b356163588913d005bdc","./drop":"20a29ca7a6c675b0659aed3c7779c226","./dropLast":"183e1f15e27f8952a00b232589022d64","./dropLastWhile":"b2233503524177fabfefd37300824e3c","./dropRepeats":"69b70a1b8decdca96f2e92cb97658e17","./dropRepeatsWith":"eaafbf6f8e5db548b5eefbac4393b3f4","./dropWhile":"50604d0b50965cce814c0f4f7269b1e7","./either":"ba02a8162664325193d4bb7e9a94264a","./empty":"877f27fe43030f666d7d9d61665f2ad8","./endsWith":"1a891ebd5e63124061dfd6abf3aa6af6","./eqBy":"ee48e0bd56f5e0733d8e54c0e9542cb8","./eqProps":"327e9a3b32fbbb9c01fa15a5dbaa944c","./equals":"fa1ab511ff6ab0502346bfabf2941ca6","./evolve":"b53bc58dcbc2b490bd9d8f37b50cca73","./filter":"6b1af8a7c379b5576762ebd81fa9706d","./find":"b9524e51e83e37767f71e5e8a51f4fdb","./findIndex":"41d5f64c8b6caac5cd5895eb9e243f4c","./findLast":"a8a866a1f567bed036ecf03ba8e184b4","./findLastIndex":"994242af0ad14f6b14e3cebec6fd1252","./flatten":"ec9444d2c81c8f5ef51059dd28b230b9","./flip":"34761018273d60835b7f638b36046118","./forEach":"7642b59eafa63f8a21c14dbccc7c82db","./forEachObjIndexed":"7a6ffc569fba22e3585e0c7a7f3711f2","./fromPairs":"dac4f3d9d011d45908d551b47874ae92","./groupBy":"f9a9d08bc2bf8f259cbb98d56e8f0366","./groupWith":"2d67d6be9552e1d6b0bb676b7e33ba70","./gt":"61086a52366010110ac4b3102e3d467e","./gte":"2292d829c256de4a65c26dad86f618f8","./has":"d6ec0846e8dab2e3ce164f8f1d6ef27c","./hasIn":"a7cffb20e5fe6887301a454c57887ab0","./hasPath":"531c3d83d328350647442fdc9ad99b8d","./head":"85ca033753283f9443572ffb069c8352","./identical":"a181eb624e12db4db2a35afdfd06a22a","./identity":"b84a40aa7af63c4b1e4992514d20c6a9","./ifElse":"480b2f155a5d2a2a18e0220bb83110ad","./inc":"28eedccfb5d4e63cdd118f974a692f57","./includes":"aaf84185229796d04a4123b195b54fa9","./indexBy":"e6000cb19d9adc88f22df26330d9c5ed","./indexOf":"3a1c9d5739c37b17a9558d0b4c621c62","./init":"2fee76e3fd5fe04abb28d000775fb4aa","./innerJoin":"5666d2e1cafaeab43e026502646c39df","./insert":"e5a70b1985271f1e2287e5b931861d2b","./insertAll":"0f455bd19342ab9bbc7306bfc2b203d8","./intersection":"8b10e9e7138a31acf0fe2ccd229ce468","./intersperse":"144881a4dd1f0a5c50c3c85e50122b09","./into":"470ee88e17b484b7912a03faa8a65b7e","./invert":"814a08bde41b1d70c8083a6aa7246fc4","./invertObj":"e5264c8184d14af9a6d8c9720be146d5","./invoker":"288295995043de6d4a441681bd9a27fb","./is":"2d524fab8f815b6e05063f7ec9a86572","./isEmpty":"c8c68d8bdceca6e170a065608c7f81aa","./isNil":"ec81ae12e1ed42f329ee3fba8b8e6801","./join":"ec91292dde737e6b7a022165f93fc9d3","./juxt":"69a982c2daf268f2f49b477a9d2d89c4","./keys":"16ddb661ee2e916d10ff98007e571bc9","./keysIn":"59a70f2876066a6d42cb716be318d26e","./last":"a475d83cf58797511da3284de7047f0f","./lastIndexOf":"d5e80dd77b81bb0477c91a1bcb1c008d","./length":"884c6bc9f5a19df1b3052e3d9e9572e5","./lens":"2e0f5f085c63dd573843e80be3bd6a4d","./lensIndex":"14bc17ab64faaf7620aa9fa3b221ed12","./lensPath":"d5efd13da0006e7fc3c9f8fab59ade28","./lensProp":"d72299c3e2674f9bafb8ccc61c3141ea","./lift":"bb5f8ab5c013a8a1d195d6df843ec60e","./liftN":"b69db6a3c88fc506657c7529310229c8","./lt":"74d39e9ed041a887ad83997ac4687fbb","./lte":"d7fc5065b57d3e97c49f08fcc23df9a5","./map":"0bc95d5b63ce61f297d323d91db4b198","./mapAccum":"9bb320db870791a7b4e15eaad8be5f45","./mapAccumRight":"098bfc07fa7ee202d5c0367e26422848","./mapObjIndexed":"e2e373aa0536032547bb0ece5a2d1a9e","./match":"8b84f0ffc7fe9863d86ec6d4705061a0","./mathMod":"34d9239fa2682ad651a0ba4d8e8be0cc","./max":"8380508a52304a5fa43717110deee561","./maxBy":"3a174ef6a4ba0c115a65ab918890435e","./mean":"6575bede05b2154f2a1a80e861aa40eb","./median":"6ee2a473efaa8855a9d525248649d4f9","./memoizeWith":"7df886ea51b3a409445fdfd63397158d","./merge":"77afa7c820aba52c2dda6415ec9f9afe","./mergeAll":"a2b318342ab52e0291a60f14e5a0fcae","./mergeDeepLeft":"e91a1a6be1d9c0828568d26cdfc187e2","./mergeDeepRight":"2c5e3a0060153d58f7f2f811ade26abd","./mergeDeepWith":"211484cd9254b5d775b89c3a1751ed47","./mergeDeepWithKey":"4924dfeb1286702c69c4b774028138ca","./mergeLeft":"e4cf424b69350148cc083d6350772b3a","./mergeRight":"232e9b076072befdd9952c29230a1288","./mergeWith":"6c4463d834f4ba2ead146068aa19e42d","./mergeWithKey":"ce49b29a1f3b9679489bd4e066dc7d72","./min":"f82884deb8bb768db53c7f888e223be5","./minBy":"1384d26a586e8f98e063a4612a399863","./modulo":"10b98aa8205c5e342e51352ce1ea336f","./move":"c22fdea793d0b81cd0608ca2f04e9a4c","./multiply":"13c83fdba3a69bde2824a7692bac5765","./nAry":"ab818489a9f6254dbcf4113bcf9c3f5b","./negate":"c379bbf6ce66e899e7dcba2fb948181a","./none":"4a1e7ed7c51c89dcb817b5e82e02376f","./not":"d23779c55bd3cbbad66dced8bb178b09","./nth":"b2a6d84a5e7939f4b48958f2ea3d3987","./nthArg":"f0feca05a597b674d2cb99ddb06996af","./o":"cefd99bda76f46ad1aa387864fff033c","./objOf":"c6763dc136d29e6432c36e617e1da959","./of":"ba31e13f9b0fa1104e841d7e1eedb299","./omit":"f724edc06efca1a229a15a06c5884e93","./once":"65443e81ee45193543b14cab7e628a85","./or":"4e337f5f5d8e9844fae4928f8bca02e6","./otherwise":"10d621267b11a7bb0f784303081f6365","./over":"29e07e6d2992edd1928b8b8f69f6cd5e","./pair":"887b92a16514a0070328b779d7be74a6","./partial":"3b26610267474ae2766eb27ba12152c9","./partialRight":"652d26942a799edf48415d8db51289cf","./partition":"ad48dba539488578805ee8c69ea22434","./path":"5dac672904e860cbe1dcd0e3b74315ef","./paths":"f9bae93a0673bb2b7cc50d49395a6a2c","./pathEq":"21d8b646bf4e70ba9d31bf457df3756c","./pathOr":"81116a6336006dfd973a6ee021798655","./pathSatisfies":"92b687aa27070bf1fdc0a37e84ff3c49","./pick":"76cc3396e7a01f7a0ada9ab556ab114c","./pickAll":"5539dfad21619034b374675e0ae9e128","./pickBy":"5aa6d46042f1a244e298273f5d458e14","./pipe":"78a82c9318ee71a1da02fbcbb6aee79e","./pipeK":"2d2fc58b2afc806504f423ab57f45654","./pipeP":"b68e97c9b51ba7e2fa2334058f317b39","./pipeWith":"5be191f0ccace8702cf7ffdbda830720","./pluck":"4f575413f527eb621c6c4f6530c0f65b","./prepend":"d9c2a27fd07740d5c987e1aa567f3a99","./product":"a0389b4931e5313a1c1f20fdd1f39e45","./project":"d35ffd41902289d7b17942d2eaebfefa","./prop":"2cc29dbb95276554420ef4535508ab7d","./propEq":"1f4b6940aad984bd83ed7fae04411e87","./propIs":"6e69b6d85e5527b3dc27666e6496b1d6","./propOr":"d5a85959339ed181688dad16d7d2f7eb","./propSatisfies":"8e66b00d7d78b0e3c07a904b0b2a2d71","./props":"f2630b1fbce55e4e1c2327894161a2ae","./range":"4a3f96d99016c178734c6a74ff83da16","./reduce":"a4ea825e03599ff070c684b6df9f404b","./reduceBy":"1a9f4a5d34ac37d82567ce7303990cfc","./reduceRight":"12e05922b3b16f458dd88b45001b0aa2","./reduceWhile":"6f26efd5d11b01ae2ccba585ea7852f0","./reduced":"3073a3a3a816b2bf881c689036815cb6","./reject":"4e9354286a472ff5791746f4948c29c3","./remove":"3a07fda773b44f903f0546416c034015","./repeat":"36937f9f26f9225be6077061e918990c","./replace":"bf318af1231930996a10a052224efe89","./reverse":"0296ebdcd0ebd5780215072f6b4ecc43","./scan":"016098a048c3c8470cad6394beefd189","./sequence":"4dae92b7573ba7e128accf608cdc912c","./set":"50be25262e2d25d375d11b7f09a4fae0","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa","./sort":"22ae8c677b0d094351f6ba75569d21d5","./sortBy":"a5ccf17966468b2eb06ff4c3ae429c39","./sortWith":"b3faa033dbd7b354a01b6f7d25b67555","./split":"48d73588f7ebeb2f8879a0f07a0dfed7","./splitAt":"4a9398b012883a98282198523f68ba2b","./splitEvery":"caab27d3a66d0b8c458946c736ee4f78","./splitWhen":"794041889783e73ce461dd830889cabf","./startsWith":"c578439d4f51246bdb0758771717f80a","./subtract":"1c0f4dd3dbe61ebb9bc3b3cbab712840","./sum":"e9d81808001eff36e1063063aede60f9","./symmetricDifference":"b80e59f3e782f1e4693ab971628bfbb2","./symmetricDifferenceWith":"96dd07c513b37e5b25b716ab9b8b8523","./tail":"7c9b1268637c18ce42461d7592210584","./take":"1bc8f9f48d1c356c07c048ba115dee87","./takeLast":"82a9ba0851c850ab62ad59a896a7970c","./takeLastWhile":"8cda8c6b1cd77cbe40430008319bc09c","./takeWhile":"abd8b2c6a327e0ad8f524de2130297ad","./tap":"c5481c051b9b9ea676bc61a2d737840d","./test":"2ab0c8e816d62cd061665cd2157d41fc","./andThen":"9148de4909d89a4760c095610b55f656","./times":"0de9168b20d33e8fe4fbfbdcbda07e39","./toLower":"f399a718eb0d75ca0de197b75af2f6df","./toPairs":"eeb84f359498b1f51c8cd1a2b56207e1","./toPairsIn":"e8470970812c8d198420b124bdcff1c7","./toString":"a49d50a85f6d5ef46be954a65e0548b1","./toUpper":"f2c49dfe1ff7ce8b3c09a1e659356cfa","./transduce":"141c9e8f29478ec6a142477c056ee784","./transpose":"618bef98decd1ebb4892586d1fad28e5","./traverse":"8745a9cae82baf54c9d1fe9bd34f6ec1","./trim":"4cd489f251b5ac5554fb52c046a00a5b","./tryCatch":"e19c029e6aa134338174614525047825","./type":"a6031b8203947ba74d91c52ceeb8c7c9","./unapply":"70d0460ec62099b5e94d9dd3c1cdcec7","./unary":"fcab1456a90f7cd4ab9a30007b5f2aa3","./uncurryN":"855fccbebbef5ec7bdc51ac8af978c94","./unfold":"eafc4824457752eeeb6d2c75b1d17ef9","./union":"444efc0e5bfdda8b26e6bf0015dbb313","./unionWith":"f1235c2a5894c88413f9f70a5e27746f","./uniq":"3742e8b86600eac6764776f624ba8d14","./uniqBy":"38aa9758004688ad8eada20660e6e283","./uniqWith":"bfa353bce67868788dbf7bda49282678","./unless":"2566a9eb253e329e65b14e8df9b903cb","./unnest":"d92e5eca62a766faf32afc72173728c9","./until":"1a629d15e6cfd1f47a990fc696e5e07a","./update":"543f61ea46e5f752d767b92c4aab0548","./useWith":"e1c6ebb2d0c8c850748b4d4fba3ed3a6","./values":"e7d5ffffb839b6981c0d814f0c89b35f","./valuesIn":"37d79e00e6f3f3321d2a315cf633f2a7","./view":"8df733eaad14911faa7640aea9393e4b","./when":"697875dd099be2a2e1c5ed8717dec6f3","./where":"cd6d560261fd27e3f65ee7ab39f02635","./whereEq":"078857aed347d877d5809051e00c6310","./without":"dbcfd38efefbac1ddc131f21b8d4d4b4","./xor":"df3a359a723901dfcea41c5a477919bb","./xprod":"a1c9685d3c5cfecfe57326e691e3acf8","./zip":"16b2f0af3d2b263fa33c4a9226693722","./zipObj":"15afe174c13246cf7a1e70ced2f4d607","./zipWith":"8b011698a4d518ed098246656481735c","./thunkify":"102ceb84f8395d1b094ef6d49ee6bce1"}],"95e84bdf553b332aec8d7e6277edc92d":[function(require,module,exports) {
/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.T
 * @example
 *
 *      R.F(); //=> false
 */
var F = function () {
  return false;
};

module.exports = F;
},{}],"f2419f4074a3802a3422166fdff41edd":[function(require,module,exports) {
/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.F
 * @example
 *
 *      R.T(); //=> true
 */
var T = function () {
  return true;
};

module.exports = T;
},{}],"1b09ad7aae026ffc13d799ca3986bccc":[function(require,module,exports) {
/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @name __
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
module.exports = {
  '@@functional/placeholder': true
};
},{}],"a3b79036cbf2a16e1129f1d17bed5f33":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */


var add =
/*#__PURE__*/
_curry2(function add(a, b) {
  return Number(a) + Number(b);
});

module.exports = add;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"edc57fa683b62e14afbc26cc9c06ec1f":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;

      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

module.exports = _curry2;
},{"./_curry1":"150de668e82b83a9b7b506a35fa88618","./_isPlaceholder":"5f682c1e8b800cd67132f8a6230a9a49"}],"150de668e82b83a9b7b506a35fa88618":[function(require,module,exports) {
var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

module.exports = _curry1;
},{"./_isPlaceholder":"5f682c1e8b800cd67132f8a6230a9a49"}],"5f682c1e8b800cd67132f8a6230a9a49":[function(require,module,exports) {
function _isPlaceholder(a) {
  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}

module.exports = _isPlaceholder;
},{}],"eea2c706c2dfd98fa91d008efa3331a8":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, [`R.map`](#map) function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      const mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */


var addIndex =
/*#__PURE__*/
_curry1(function addIndex(fn) {
  return curryN(fn.length, function () {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);

    args[0] = function () {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx += 1;
      return result;
    };

    return fn.apply(this, args);
  });
});

module.exports = addIndex;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"5e911cc387b897c488ca64f885d1b94c":[function(require,module,exports) {
/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];
  idx = 0;

  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }

  idx = 0;

  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }

  return result;
}

module.exports = _concat;
},{}],"f89f433bc9b54b142bdee97bc2c2ffa0":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _curryN =
/*#__PURE__*/
require("./internal/_curryN");
/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      const sumArgs = (...args) => R.sum(args);
 *
 *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      const f = curriedAddFourNumbers(1, 2);
 *      const g = f(3);
 *      g(4); //=> 10
 */


var curryN =
/*#__PURE__*/
_curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }

  return _arity(length, _curryN(length, [], fn));
});

module.exports = curryN;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_curryN":"9f7674d3d8adebf072178876ffbaa3eb"}],"7cf93e43fea3f54b059e8389cc61a81f":[function(require,module,exports) {
function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };

    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };

    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };

    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };

    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };

    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };

    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };

    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };

    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };

    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };

    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };

    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}

module.exports = _arity;
},{}],"9f7674d3d8adebf072178876ffbaa3eb":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./_arity");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;

    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;

      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }

      combined[combinedIdx] = result;

      if (!_isPlaceholder(result)) {
        left -= 1;
      }

      combinedIdx += 1;
    }

    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
  };
}

module.exports = _curryN;
},{"./_arity":"7cf93e43fea3f54b059e8389cc61a81f","./_isPlaceholder":"5f682c1e8b800cd67132f8a6230a9a49"}],"4709e7acf7da40bfd892026a578e14dd":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> (a -> a) -> [a] -> [a]
 * @param {Number} idx The index.
 * @param {Function} fn The function to apply.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']
 *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']
 * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]
 * @symb R.adjust(0, f, [a, b]) = [f(a), b]
 */


var adjust =
/*#__PURE__*/
_curry3(function adjust(idx, fn, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }

  var start = idx < 0 ? list.length : 0;

  var _idx = start + idx;

  var _list = _concat(list);

  _list[_idx] = fn(list[_idx]);
  return _list;
});

module.exports = adjust;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"ce5871c5cd8a73d0aa15e6515f516929":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;

      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        });

      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function (_c) {
          return fn(a, b, _c);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

module.exports = _curry3;
},{"./_curry1":"150de668e82b83a9b7b506a35fa88618","./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_isPlaceholder":"5f682c1e8b800cd67132f8a6230a9a49"}],"3eca526a06def7c980f1164620ccd9d6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xall =
/*#__PURE__*/
require("./internal/_xall");
/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      const equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */


var all =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['all'], _xall, function all(fn, list) {
  var idx = 0;

  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }

    idx += 1;
  }

  return true;
}));

module.exports = all;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xall":"f4d0f67c20aaf8c6056488addef4b589"}],"bee1559865cd89160564b46319fcf7ed":[function(require,module,exports) {
var _isArray =
/*#__PURE__*/
require("./_isArray");

var _isTransformer =
/*#__PURE__*/
require("./_isTransformer");
/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */


function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }

    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();

    if (!_isArray(obj)) {
      var idx = 0;

      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }

        idx += 1;
      }

      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }

    return fn.apply(this, arguments);
  };
}

module.exports = _dispatchable;
},{"./_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./_isTransformer":"7fd490f48e8f3ed926e9a87f57a321f4"}],"a2205a20ea76d7c4ae23a1144ebcb974":[function(require,module,exports) {
/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};
},{}],"7fd490f48e8f3ed926e9a87f57a321f4":[function(require,module,exports) {
function _isTransformer(obj) {
  return obj != null && typeof obj['@@transducer/step'] === 'function';
}

module.exports = _isTransformer;
},{}],"f4d0f67c20aaf8c6056488addef4b589":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XAll =
/*#__PURE__*/
function () {
  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }

  XAll.prototype['@@transducer/init'] = _xfBase.init;

  XAll.prototype['@@transducer/result'] = function (result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }

    return this.xf['@@transducer/result'](result);
  };

  XAll.prototype['@@transducer/step'] = function (result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = _reduced(this.xf['@@transducer/step'](result, false));
    }

    return result;
  };

  return XAll;
}();

var _xall =
/*#__PURE__*/
_curry2(function _xall(f, xf) {
  return new XAll(f, xf);
});

module.exports = _xall;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"ed988cfc607b3a852cad5e9b89dace59":[function(require,module,exports) {
function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}

module.exports = _reduced;
},{}],"12ce331910d5af763f3a242fca534bdb":[function(require,module,exports) {
module.exports = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};
},{}],"572ce477216e3ae41020e0045d089c3f":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");

var max =
/*#__PURE__*/
require("./max");

var pluck =
/*#__PURE__*/
require("./pluck");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      const isQueen = R.propEq('rank', 'Q');
 *      const isSpade = R.propEq('suit', 'â™ ï¸Ž');
 *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: 'â™£ï¸Ž'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: 'â™ ï¸Ž'}); //=> true
 */


var allPass =
/*#__PURE__*/
_curry1(function allPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;

    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }

      idx += 1;
    }

    return true;
  });
});

module.exports = allPass;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./max":"8380508a52304a5fa43717110deee561","./pluck":"4f575413f527eb621c6c4f6530c0f65b","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"8380508a52304a5fa43717110deee561":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */


var max =
/*#__PURE__*/
_curry2(function max(a, b) {
  return b > a ? b : a;
});

module.exports = max;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"4f575413f527eb621c6c4f6530c0f65b":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var map =
/*#__PURE__*/
require("./map");

var prop =
/*#__PURE__*/
require("./prop");
/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * `pluck` will work on
 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => k -> f {k: v} -> f v
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} f The array or functor to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      var getAges = R.pluck('age');
 *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
 *
 *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */


var pluck =
/*#__PURE__*/
_curry2(function pluck(p, list) {
  return map(prop(p), list);
});

module.exports = pluck;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./map":"0bc95d5b63ce61f297d323d91db4b198","./prop":"2cc29dbb95276554420ef4535508ab7d"}],"0bc95d5b63ce61f297d323d91db4b198":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _map =
/*#__PURE__*/
require("./internal/_map");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _xmap =
/*#__PURE__*/
require("./internal/_xmap");

var curryN =
/*#__PURE__*/
require("./curryN");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      const double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */


var map =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });

    case '[object Object]':
      return _reduce(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));

    default:
      return _map(fn, functor);
  }
}));

module.exports = map;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_map":"637b39e5bd792872e66a7d6bd59ffebe","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_xmap":"2d009bb56e209aaf429b9a495b668410","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"637b39e5bd792872e66a7d6bd59ffebe":[function(require,module,exports) {
function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);

  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }

  return result;
}

module.exports = _map;
},{}],"8b27f617d657516c735e655b3ac0c38e":[function(require,module,exports) {
var _isArrayLike =
/*#__PURE__*/
require("./_isArrayLike");

var _xwrap =
/*#__PURE__*/
require("./_xwrap");

var bind =
/*#__PURE__*/
require("../bind");

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    idx += 1;
  }

  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();

  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    step = iter.next();
  }

  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }

  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }

  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }

  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }

  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }

  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

module.exports = _reduce;
},{"./_isArrayLike":"ec1e7552f820e6603596b96b0f3826bf","./_xwrap":"1f1969be6c26293a821beae90b66eaee","../bind":"828084aa8205d18218bc9f4d6d82265c"}],"ec1e7552f820e6603596b96b0f3826bf":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _isArray =
/*#__PURE__*/
require("./_isArray");

var _isString =
/*#__PURE__*/
require("./_isString");
/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */


var _isArrayLike =
/*#__PURE__*/
_curry1(function isArrayLike(x) {
  if (_isArray(x)) {
    return true;
  }

  if (!x) {
    return false;
  }

  if (typeof x !== 'object') {
    return false;
  }

  if (_isString(x)) {
    return false;
  }

  if (x.nodeType === 1) {
    return !!x.length;
  }

  if (x.length === 0) {
    return true;
  }

  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }

  return false;
});

module.exports = _isArrayLike;
},{"./_curry1":"150de668e82b83a9b7b506a35fa88618","./_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./_isString":"16d2a4a6d56352a58faf02b0bcfd980f"}],"16d2a4a6d56352a58faf02b0bcfd980f":[function(require,module,exports) {
function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}

module.exports = _isString;
},{}],"1f1969be6c26293a821beae90b66eaee":[function(require,module,exports) {
var XWrap =
/*#__PURE__*/
function () {
  function XWrap(fn) {
    this.f = fn;
  }

  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };

  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };

  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}

module.exports = _xwrap;
},{}],"828084aa8205d18218bc9f4d6d82265c":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      const log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */


var bind =
/*#__PURE__*/
_curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});

module.exports = bind;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"2d009bb56e209aaf429b9a495b668410":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XMap =
/*#__PURE__*/
function () {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;

  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return XMap;
}();

var _xmap =
/*#__PURE__*/
_curry2(function _xmap(f, xf) {
  return new XMap(f, xf);
});

module.exports = _xmap;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"16ddb661ee2e916d10ff98007e571bc9":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _has =
/*#__PURE__*/
require("./internal/_has");

var _isArguments =
/*#__PURE__*/
require("./internal/_isArguments"); // cover IE < 9 keys issues


var hasEnumBug = !
/*#__PURE__*/
{
  toString: null
}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

var hasArgsEnumBug =
/*#__PURE__*/
function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;

  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }

    idx += 1;
  }

  return false;
};
/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */


var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?
/*#__PURE__*/
_curry1(function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) :
/*#__PURE__*/
_curry1(function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }

  var prop, nIdx;
  var ks = [];

  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }

  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;

    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];

      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }

      nIdx -= 1;
    }
  }

  return ks;
});
module.exports = keys;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_has":"2b64423201651bda1efe948048e1201b","./internal/_isArguments":"ffbe97f8f2ef0e4313bb19ef780c2602"}],"2b64423201651bda1efe948048e1201b":[function(require,module,exports) {
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = _has;
},{}],"ffbe97f8f2ef0e4313bb19ef780c2602":[function(require,module,exports) {
var _has =
/*#__PURE__*/
require("./_has");

var toString = Object.prototype.toString;

var _isArguments =
/*#__PURE__*/
function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return _has('callee', x);
  };
}();

module.exports = _isArguments;
},{"./_has":"2b64423201651bda1efe948048e1201b"}],"2cc29dbb95276554420ef4535508ab7d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var path =
/*#__PURE__*/
require("./path");
/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig Idx -> {s: a} -> a | Undefined
 * @param {String|Number} p The property name or array index
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path, R.nth
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 *      R.prop(0, [100]); //=> 100
 *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
 */


var prop =
/*#__PURE__*/
_curry2(function prop(p, obj) {
  return path([p], obj);
});

module.exports = prop;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"5dac672904e860cbe1dcd0e3b74315ef":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var paths =
/*#__PURE__*/
require("./paths");
/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop, R.nth
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1
 *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2
 */


var path =
/*#__PURE__*/
_curry2(function path(pathAr, obj) {
  return paths([pathAr], obj)[0];
});

module.exports = path;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./paths":"f9bae93a0673bb2b7cc50d49395a6a2c"}],"f9bae93a0673bb2b7cc50d49395a6a2c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isInteger =
/*#__PURE__*/
require("./internal/_isInteger");

var nth =
/*#__PURE__*/
require("./nth");
/**
 * Retrieves the values at given paths of an object.
 *
 * @func
 * @memberOf R
 * @since v0.27.1
 * @category Object
 * @typedefn Idx = [String | Int]
 * @sig [Idx] -> {a} -> [a | Undefined]
 * @param {Array} pathsArray The array of paths to be fetched.
 * @param {Object} obj The object to retrieve the nested properties from.
 * @return {Array} A list consisting of values at paths specified by "pathsArray".
 * @see R.path
 * @example
 *
 *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]
 *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]
 */


var paths =
/*#__PURE__*/
_curry2(function paths(pathsArray, obj) {
  return pathsArray.map(function (paths) {
    var val = obj;
    var idx = 0;
    var p;

    while (idx < paths.length) {
      if (val == null) {
        return;
      }

      p = paths[idx];
      val = _isInteger(p) ? nth(p, val) : val[p];
      idx += 1;
    }

    return val;
  });
});

module.exports = paths;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isInteger":"87996e50fe266de3012e1c0dbd85ee11","./nth":"b2a6d84a5e7939f4b48958f2ea3d3987"}],"87996e50fe266de3012e1c0dbd85ee11":[function(require,module,exports) {
/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};
},{}],"b2a6d84a5e7939f4b48958f2ea3d3987":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isString =
/*#__PURE__*/
require("./internal/_isString");
/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      const list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */


var nth =
/*#__PURE__*/
_curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});

module.exports = nth;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isString":"16d2a4a6d56352a58faf02b0bcfd980f"}],"a4ea825e03599ff070c684b6df9f404b":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");
/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */


var reduce =
/*#__PURE__*/
_curry3(_reduce);

module.exports = reduce;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e"}],"c4c44b815065280ed5ede48eae4ca7ef":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      const t = R.always('Tee');
 *      t(); //=> 'Tee'
 */


var always =
/*#__PURE__*/
_curry1(function always(val) {
  return function () {
    return val;
  };
});

module.exports = always;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"f17719bf155329cfebeba00581aed03d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both, R.xor
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */


var and =
/*#__PURE__*/
_curry2(function and(a, b) {
  return a && b;
});

module.exports = and;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"b9891f1ee49ecc381ced1a240f66d0bd":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xany =
/*#__PURE__*/
require("./internal/_xany");
/**
 * Returns `true` if at least one of the elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      const lessThan0 = R.flip(R.lt)(0);
 *      const lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */


var any =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['any'], _xany, function any(fn, list) {
  var idx = 0;

  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }

    idx += 1;
  }

  return false;
}));

module.exports = any;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xany":"0abd7b354e29fab16e8ec572c2b3f44c"}],"0abd7b354e29fab16e8ec572c2b3f44c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XAny =
/*#__PURE__*/
function () {
  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }

  XAny.prototype['@@transducer/init'] = _xfBase.init;

  XAny.prototype['@@transducer/result'] = function (result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }

    return this.xf['@@transducer/result'](result);
  };

  XAny.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.any = true;
      result = _reduced(this.xf['@@transducer/step'](result, true));
    }

    return result;
  };

  return XAny;
}();

var _xany =
/*#__PURE__*/
_curry2(function _xany(f, xf) {
  return new XAny(f, xf);
});

module.exports = _xany;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"da19199a0f69cbbb39f91aa69ee80606":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");

var max =
/*#__PURE__*/
require("./max");

var pluck =
/*#__PURE__*/
require("./pluck");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      const isClub = R.propEq('suit', 'â™£');
 *      const isSpade = R.propEq('suit', 'â™ ');
 *      const isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: 'â™£'}); //=> true
 *      isBlackCard({rank: 'Q', suit: 'â™ '}); //=> true
 *      isBlackCard({rank: 'Q', suit: 'â™¦'}); //=> false
 */


var anyPass =
/*#__PURE__*/
_curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;

    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }

      idx += 1;
    }

    return false;
  });
});

module.exports = anyPass;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./max":"8380508a52304a5fa43717110deee561","./pluck":"4f575413f527eb621c6c4f6530c0f65b","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"3be78354abdad9c47ed7e04ec471cd25":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var map =
/*#__PURE__*/
require("./map");
/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @sig (r -> a -> b) -> (r -> a) -> (r -> b)
 * @param {*} applyF
 * @param {*} applyX
 * @return {*}
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 *
 *      // R.ap can also be used as S combinator
 *      // when only two functions are passed
 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */


var ap =
/*#__PURE__*/
_curry2(function ap(applyF, applyX) {
  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
    return applyF(x)(applyX(x));
  } : _reduce(function (acc, f) {
    return _concat(acc, map(f, applyX));
  }, [], applyF);
});

module.exports = ap;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./map":"0bc95d5b63ce61f297d323d91db4b198"}],"4b4b3c59478a791f93490c95ddc96ae9":[function(require,module,exports) {
var _aperture =
/*#__PURE__*/
require("./internal/_aperture");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xaperture =
/*#__PURE__*/
require("./internal/_xaperture");
/**
 * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */


var aperture =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xaperture, _aperture));

module.exports = aperture;
},{"./internal/_aperture":"256f56dd18899120c28ab8c4701f91b8","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xaperture":"8ef42b213fef3ba0a7d5bf43a9eb7164"}],"256f56dd18899120c28ab8c4701f91b8":[function(require,module,exports) {
function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);

  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }

  return acc;
}

module.exports = _aperture;
},{}],"8ef42b213fef3ba0a7d5bf43a9eb7164":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./_concat");

var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XAperture =
/*#__PURE__*/
function () {
  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }

  XAperture.prototype['@@transducer/init'] = _xfBase.init;

  XAperture.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };

  XAperture.prototype['@@transducer/step'] = function (result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };

  XAperture.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;

    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  XAperture.prototype.getCopy = function () {
    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return XAperture;
}();

var _xaperture =
/*#__PURE__*/
_curry2(function _xaperture(n, xf) {
  return new XAperture(n, xf);
});

module.exports = _xaperture;
},{"./_concat":"5e911cc387b897c488ca64f885d1b94c","./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"e911cfa0e4d4d111804331f34d7362ca":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */


var append =
/*#__PURE__*/
_curry2(function append(el, list) {
  return _concat(list, [el]);
});

module.exports = append;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"0dc7e9cf83550c68a026a33d97c40af4":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      const nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */


var apply =
/*#__PURE__*/
_curry2(function apply(fn, args) {
  return fn.apply(this, args);
});

module.exports = apply;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"c1dea3ebd4e32577edf01344a4202e6a":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var apply =
/*#__PURE__*/
require("./apply");

var curryN =
/*#__PURE__*/
require("./curryN");

var max =
/*#__PURE__*/
require("./max");

var pluck =
/*#__PURE__*/
require("./pluck");

var reduce =
/*#__PURE__*/
require("./reduce");

var keys =
/*#__PURE__*/
require("./keys");

var values =
/*#__PURE__*/
require("./values"); // Use custom mapValues function to avoid issues with specs that include a "map" key and R.map
// delegating calls to .map


function mapValues(fn, obj) {
  return keys(obj).reduce(function (acc, key) {
    acc[key] = fn(obj[key]);
    return acc;
  }, {});
}
/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      const getMetrics = R.applySpec({
 *        sum: R.add,
 *        nested: { mul: R.multiply }
 *      });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */


var applySpec =
/*#__PURE__*/
_curry1(function applySpec(spec) {
  spec = mapValues(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
    var args = arguments;
    return mapValues(function (f) {
      return apply(f, args);
    }, spec);
  });
});

module.exports = applySpec;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./apply":"0dc7e9cf83550c68a026a33d97c40af4","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./max":"8380508a52304a5fa43717110deee561","./pluck":"4f575413f527eb621c6c4f6530c0f65b","./reduce":"a4ea825e03599ff070c684b6df9f404b","./keys":"16ddb661ee2e916d10ff98007e571bc9","./values":"e7d5ffffb839b6981c0d814f0c89b35f"}],"e7d5ffffb839b6981c0d814f0c89b35f":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @see R.valuesIn, R.keys
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */


var values =
/*#__PURE__*/
_curry1(function values(obj) {
  var props = keys(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;

  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }

  return vals;
});

module.exports = values;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"12008644334c4fd6803ce1d05246e479":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Takes a value and applies a function to it.
 *
 * This function is also known as the `thrush` combinator.
 *
 * @func
 * @memberOf R
 * @since v0.25.0
 * @category Function
 * @sig a -> (a -> b) -> b
 * @param {*} x The value
 * @param {Function} f The function to apply
 * @return {*} The result of applying `f` to `x`
 * @example
 *
 *      const t42 = R.applyTo(42);
 *      t42(R.identity); //=> 42
 *      t42(R.add(1)); //=> 43
 */


var applyTo =
/*#__PURE__*/
_curry2(function applyTo(x, f) {
  return f(x);
});

module.exports = applyTo;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"cf59e2b4373781f7c91867fd62773adb":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @see R.descend
 * @example
 *
 *      const byAge = R.ascend(R.prop('age'));
 *      const people = [
 *        { name: 'Emma', age: 70 },
 *        { name: 'Peter', age: 78 },
 *        { name: 'Mikhail', age: 62 },
 *      ];
 *      const peopleByYoungestFirst = R.sort(byAge, people);
 *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
 */


var ascend =
/*#__PURE__*/
_curry3(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});

module.exports = ascend;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"560d13e1b359f44b6b5f43b6e586d004":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc, R.pick
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */


var assoc =
/*#__PURE__*/
_curry3(function assoc(prop, val, obj) {
  var result = {};

  for (var p in obj) {
    result[p] = obj[p];
  }

  result[prop] = val;
  return result;
});

module.exports = assoc;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"97bedbcca6d8644b1a63bf2c3bcae124":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _has =
/*#__PURE__*/
require("./internal/_has");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");

var _isInteger =
/*#__PURE__*/
require("./internal/_isInteger");

var assoc =
/*#__PURE__*/
require("./assoc");

var isNil =
/*#__PURE__*/
require("./isNil");
/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */


var assocPath =
/*#__PURE__*/
_curry3(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }

  var idx = path[0];

  if (path.length > 1) {
    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }

  if (_isInteger(idx) && _isArray(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return assoc(idx, val, obj);
  }
});

module.exports = assocPath;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_has":"2b64423201651bda1efe948048e1201b","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./internal/_isInteger":"87996e50fe266de3012e1c0dbd85ee11","./assoc":"560d13e1b359f44b6b5f43b6e586d004","./isNil":"ec81ae12e1ed42f329ee3fba8b8e6801"}],"ec81ae12e1ed42f329ee3fba8b8e6801":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */


var isNil =
/*#__PURE__*/
_curry1(function isNil(x) {
  return x == null;
});

module.exports = isNil;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"fd6c3dd7bb8bb60885b2d3e36eab9b22":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var nAry =
/*#__PURE__*/
require("./nAry");
/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @see R.nAry, R.unary
 * @example
 *
 *      const takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      const takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */


var binary =
/*#__PURE__*/
_curry1(function binary(fn) {
  return nAry(2, fn);
});

module.exports = binary;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./nAry":"ab818489a9f6254dbcf4113bcf9c3f5b"}],"ab818489a9f6254dbcf4113bcf9c3f5b":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @see R.binary, R.unary
 * @example
 *
 *      const takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      const takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */


var nAry =
/*#__PURE__*/
_curry2(function nAry(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn.call(this);
      };

    case 1:
      return function (a0) {
        return fn.call(this, a0);
      };

    case 2:
      return function (a0, a1) {
        return fn.call(this, a0, a1);
      };

    case 3:
      return function (a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };

    case 4:
      return function (a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };

    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };

    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };

    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };

    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };

    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };

    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };

    default:
      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});

module.exports = nAry;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"2f45914f7246b9cca1f6cd947a4a956a":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isFunction =
/*#__PURE__*/
require("./internal/_isFunction");

var and =
/*#__PURE__*/
require("./and");

var lift =
/*#__PURE__*/
require("./lift");
/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      const gt10 = R.gt(R.__, 10)
 *      const lt20 = R.lt(R.__, 20)
 *      const f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 *
 *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)
 *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]
 */


var both =
/*#__PURE__*/
_curry2(function both(f, g) {
  return _isFunction(f) ? function _both() {
    return f.apply(this, arguments) && g.apply(this, arguments);
  } : lift(and)(f, g);
});

module.exports = both;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isFunction":"7394fe9c98ae986ee54198ae4539f8c0","./and":"f17719bf155329cfebeba00581aed03d","./lift":"bb5f8ab5c013a8a1d195d6df843ec60e"}],"7394fe9c98ae986ee54198ae4539f8c0":[function(require,module,exports) {
function _isFunction(x) {
  var type = Object.prototype.toString.call(x);
  return type === '[object Function]' || type === '[object AsyncFunction]' || type === '[object GeneratorFunction]' || type === '[object AsyncGeneratorFunction]';
}

module.exports = _isFunction;
},{}],"bb5f8ab5c013a8a1d195d6df843ec60e":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var liftN =
/*#__PURE__*/
require("./liftN");
/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      const madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */


var lift =
/*#__PURE__*/
_curry1(function lift(fn) {
  return liftN(fn.length, fn);
});

module.exports = lift;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./liftN":"b69db6a3c88fc506657c7529310229c8"}],"b69db6a3c88fc506657c7529310229c8":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var ap =
/*#__PURE__*/
require("./ap");

var curryN =
/*#__PURE__*/
require("./curryN");

var map =
/*#__PURE__*/
require("./map");
/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      const madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */


var liftN =
/*#__PURE__*/
_curry2(function liftN(arity, fn) {
  var lifted = curryN(arity, fn);
  return curryN(arity, function () {
    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});

module.exports = liftN;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./ap":"3be78354abdad9c47ed7e04ec471cd25","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./map":"0bc95d5b63ce61f297d323d91db4b198"}],"bdebe2164925d606eb9293c22841d86e":[function(require,module,exports) {
var curry =
/*#__PURE__*/
require("./curry");
/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * [`R.converge`](#converge): the first branch can produce a function while the
 * remaining branches produce values to be passed to that function as its
 * arguments.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      const indentN = R.pipe(R.repeat(' '),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      const format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */


var call =
/*#__PURE__*/
curry(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});
module.exports = call;
},{"./curry":"1861c52d776ae21c236d9e53ac669447"}],"1861c52d776ae21c236d9e53ac669447":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN, R.partial
 * @example
 *
 *      const addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      const curriedAddFourNumbers = R.curry(addFourNumbers);
 *      const f = curriedAddFourNumbers(1, 2);
 *      const g = f(3);
 *      g(4); //=> 10
 */


var curry =
/*#__PURE__*/
_curry1(function curry(fn) {
  return curryN(fn.length, fn);
});

module.exports = curry;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"50bf0a82c73d05d6b6bb831f8ed66823":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _makeFlat =
/*#__PURE__*/
require("./internal/_makeFlat");

var _xchain =
/*#__PURE__*/
require("./internal/_xchain");

var map =
/*#__PURE__*/
require("./map");
/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries.
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      const duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */


var chain =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function (x) {
      return fn(monad(x))(x);
    };
  }

  return _makeFlat(false)(map(fn, monad));
}));

module.exports = chain;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_makeFlat":"3c36ec1b49256bc3412c709601293032","./internal/_xchain":"c82fc059ca5bd8fc745e82f919de561a","./map":"0bc95d5b63ce61f297d323d91db4b198"}],"3c36ec1b49256bc3412c709601293032":[function(require,module,exports) {
var _isArrayLike =
/*#__PURE__*/
require("./_isArrayLike");
/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */


function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if (_isArrayLike(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;

        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }

      idx += 1;
    }

    return result;
  };
}

module.exports = _makeFlat;
},{"./_isArrayLike":"ec1e7552f820e6603596b96b0f3826bf"}],"c82fc059ca5bd8fc745e82f919de561a":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _flatCat =
/*#__PURE__*/
require("./_flatCat");

var map =
/*#__PURE__*/
require("../map");

var _xchain =
/*#__PURE__*/
_curry2(function _xchain(f, xf) {
  return map(f, _flatCat(xf));
});

module.exports = _xchain;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_flatCat":"da1934aff52313602ff166eff70c5f69","../map":"0bc95d5b63ce61f297d323d91db4b198"}],"da1934aff52313602ff166eff70c5f69":[function(require,module,exports) {
var _forceReduced =
/*#__PURE__*/
require("./_forceReduced");

var _isArrayLike =
/*#__PURE__*/
require("./_isArrayLike");

var _reduce =
/*#__PURE__*/
require("./_reduce");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var preservingReduced = function (xf) {
  return {
    '@@transducer/init': _xfBase.init,
    '@@transducer/result': function (result) {
      return xf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      var ret = xf['@@transducer/step'](result, input);
      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
    }
  };
};

var _flatCat = function _xcat(xf) {
  var rxf = preservingReduced(xf);
  return {
    '@@transducer/init': _xfBase.init,
    '@@transducer/result': function (result) {
      return rxf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
    }
  };
};

module.exports = _flatCat;
},{"./_forceReduced":"1f54bca78c732f7e74de5666827702a6","./_isArrayLike":"ec1e7552f820e6603596b96b0f3826bf","./_reduce":"8b27f617d657516c735e655b3ac0c38e","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"1f54bca78c732f7e74de5666827702a6":[function(require,module,exports) {
function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}

module.exports = _forceReduced;
},{}],"9becbf04a819710448b52ffecdf4b0a3":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */


var clamp =
/*#__PURE__*/
_curry3(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }

  return value < min ? min : value > max ? max : value;
});

module.exports = clamp;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"2f50cb9c9275daed668aa2f3af0115eb":[function(require,module,exports) {
var _clone =
/*#__PURE__*/
require("./internal/_clone");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      const objects = [{}, {}, {}];
 *      const objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */


var clone =
/*#__PURE__*/
_curry1(function clone(value) {
  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
});

module.exports = clone;
},{"./internal/_clone":"81b559d186e24facfd4ce59b505b2f40","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"81b559d186e24facfd4ce59b505b2f40":[function(require,module,exports) {
var _cloneRegExp =
/*#__PURE__*/
require("./_cloneRegExp");

var type =
/*#__PURE__*/
require("../type");
/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */


function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;

    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }

      idx += 1;
    }

    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;

    for (var key in value) {
      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
    }

    return copiedValue;
  };

  switch (type(value)) {
    case 'Object':
      return copy({});

    case 'Array':
      return copy([]);

    case 'Date':
      return new Date(value.valueOf());

    case 'RegExp':
      return _cloneRegExp(value);

    default:
      return value;
  }
}

module.exports = _clone;
},{"./_cloneRegExp":"0cdb1e28dc4a4e270152bee8609edb47","../type":"a6031b8203947ba74d91c52ceeb8c7c9"}],"0cdb1e28dc4a4e270152bee8609edb47":[function(require,module,exports) {
function _cloneRegExp(pattern) {
  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
}

module.exports = _cloneRegExp;
},{}],"a6031b8203947ba74d91c52ceeb8c7c9":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */


var type =
/*#__PURE__*/
_curry1(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});

module.exports = type;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"817e1680d3c649b6d2883f7eabc2bd8c":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      const byAge = R.comparator((a, b) => a.age < b.age);
 *      const people = [
 *        { name: 'Emma', age: 70 },
 *        { name: 'Peter', age: 78 },
 *        { name: 'Mikhail', age: 62 },
 *      ];
 *      const peopleByIncreasingAge = R.sort(byAge, people);
 *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
 */


var comparator =
/*#__PURE__*/
_curry1(function comparator(pred) {
  return function (a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});

module.exports = comparator;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"0449c9a3726724b2b48e3b5b6d9bed34":[function(require,module,exports) {
var lift =
/*#__PURE__*/
require("./lift");

var not =
/*#__PURE__*/
require("./not");
/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      const isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */


var complement =
/*#__PURE__*/
lift(not);
module.exports = complement;
},{"./lift":"bb5f8ab5c013a8a1d195d6df843ec60e","./not":"d23779c55bd3cbbad66dced8bb178b09"}],"d23779c55bd3cbbad66dced8bb178b09":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */


var not =
/*#__PURE__*/
_curry1(function not(a) {
  return !a;
});

module.exports = not;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"49c9bbfd09b8bcd1c24ff1bd3a7d209d":[function(require,module,exports) {
var pipe =
/*#__PURE__*/
require("./pipe");

var reverse =
/*#__PURE__*/
require("./reverse");
/**
 * Performs right-to-left function composition. The last argument may have
 * any arity; the remaining arguments must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      const classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      const yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */


function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }

  return pipe.apply(this, reverse(arguments));
}

module.exports = compose;
},{"./pipe":"78a82c9318ee71a1da02fbcbb6aee79e","./reverse":"0296ebdcd0ebd5780215072f6b4ecc43"}],"78a82c9318ee71a1da02fbcbb6aee79e":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _pipe =
/*#__PURE__*/
require("./internal/_pipe");

var reduce =
/*#__PURE__*/
require("./reduce");

var tail =
/*#__PURE__*/
require("./tail");
/**
 * Performs left-to-right function composition. The first argument may have
 * any arity; the remaining arguments must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      const f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */


function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }

  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
}

module.exports = pipe;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_pipe":"e3616d94ce8ccffe279216afe3e1db94","./reduce":"a4ea825e03599ff070c684b6df9f404b","./tail":"7c9b1268637c18ce42461d7592210584"}],"e3616d94ce8ccffe279216afe3e1db94":[function(require,module,exports) {
function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}

module.exports = _pipe;
},{}],"7c9b1268637c18ce42461d7592210584":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */


var tail =
/*#__PURE__*/
_curry1(
/*#__PURE__*/
_checkForMethod('tail',
/*#__PURE__*/
slice(1, Infinity)));

module.exports = tail;
},{"./internal/_checkForMethod":"a0c59d440ed7018bde75063c45529532","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"a0c59d440ed7018bde75063c45529532":[function(require,module,exports) {
var _isArray =
/*#__PURE__*/
require("./_isArray");
/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */


function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;

    if (length === 0) {
      return fn();
    }

    var obj = arguments[length - 1];
    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}

module.exports = _checkForMethod;
},{"./_isArray":"a2205a20ea76d7c4ae23a1144ebcb974"}],"5ec9dfeb67bcd00dd1695ebc435298fa":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */


var slice =
/*#__PURE__*/
_curry3(
/*#__PURE__*/
_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));

module.exports = slice;
},{"./internal/_checkForMethod":"a0c59d440ed7018bde75063c45529532","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"0296ebdcd0ebd5780215072f6b4ecc43":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _isString =
/*#__PURE__*/
require("./internal/_isString");
/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */


var reverse =
/*#__PURE__*/
_curry1(function reverse(list) {
  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});

module.exports = reverse;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_isString":"16d2a4a6d56352a58faf02b0bcfd980f"}],"1c53fa1f8dbe9fa9cf53a5e8942fe910":[function(require,module,exports) {
var chain =
/*#__PURE__*/
require("./chain");

var compose =
/*#__PURE__*/
require("./compose");

var map =
/*#__PURE__*/
require("./map");
/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @deprecated since v0.26.0
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       const get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       const getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */


function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }

  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return compose(compose.apply(this, map(chain, init)), last);
}

module.exports = composeK;
},{"./chain":"50bf0a82c73d05d6b6bb831f8ed66823","./compose":"49c9bbfd09b8bcd1c24ff1bd3a7d209d","./map":"0bc95d5b63ce61f297d323d91db4b198"}],"976a21ee8c84cd009934ae1cd20fa89c":[function(require,module,exports) {
var pipeP =
/*#__PURE__*/
require("./pipeP");

var reverse =
/*#__PURE__*/
require("./reverse");
/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The last arguments may have any arity; the remaining
 * arguments must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @deprecated since v0.26.0
 * @example
 *
 *      const db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      const lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      const lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      const followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */


function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }

  return pipeP.apply(this, reverse(arguments));
}

module.exports = composeP;
},{"./pipeP":"b68e97c9b51ba7e2fa2334058f317b39","./reverse":"0296ebdcd0ebd5780215072f6b4ecc43"}],"b68e97c9b51ba7e2fa2334058f317b39":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _pipeP =
/*#__PURE__*/
require("./internal/_pipeP");

var reduce =
/*#__PURE__*/
require("./reduce");

var tail =
/*#__PURE__*/
require("./tail");
/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The first argument may have any arity; the remaining arguments
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @deprecated since v0.26.0
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      const followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */


function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }

  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
}

module.exports = pipeP;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_pipeP":"981391d0159ac4ad60bdecb9287757bf","./reduce":"a4ea825e03599ff070c684b6df9f404b","./tail":"7c9b1268637c18ce42461d7592210584"}],"981391d0159ac4ad60bdecb9287757bf":[function(require,module,exports) {
function _pipeP(f, g) {
  return function () {
    var ctx = this;
    return f.apply(ctx, arguments).then(function (x) {
      return g.call(ctx, x);
    });
  };
}

module.exports = _pipeP;
},{}],"098110c6f60ee2426bf05c14f557ca69":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var pipeWith =
/*#__PURE__*/
require("./pipeWith");

var reverse =
/*#__PURE__*/
require("./reverse");
/**
 * Performs right-to-left function composition using transforming function. The last argument may have
 * any arity; the remaining arguments must be unary.
 *
 * **Note:** The result of compose is not automatically curried. Transforming function is not used on the
 * last argument.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Function
 * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.compose, R.pipeWith
 * @example
 *
 *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));
 *
 *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2
 *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined
 *
 * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))
 */


var composeWith =
/*#__PURE__*/
_curry2(function composeWith(xf, list) {
  return pipeWith.apply(this, [xf, reverse(list)]);
});

module.exports = composeWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./pipeWith":"5be191f0ccace8702cf7ffdbda830720","./reverse":"0296ebdcd0ebd5780215072f6b4ecc43"}],"5be191f0ccace8702cf7ffdbda830720":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var head =
/*#__PURE__*/
require("./head");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var tail =
/*#__PURE__*/
require("./tail");

var identity =
/*#__PURE__*/
require("./identity");
/**
 * Performs left-to-right function composition using transforming function. The first argument may have
 * any arity; the remaining arguments must be unary.
 *
 * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the
 * first argument.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Function
 * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeWith, R.pipe
 * @example
 *
 *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));
 *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))
 */


var pipeWith =
/*#__PURE__*/
_curry2(function pipeWith(xf, list) {
  if (list.length <= 0) {
    return identity;
  }

  var headList = head(list);
  var tailList = tail(list);
  return _arity(headList.length, function () {
    return _reduce(function (result, f) {
      return xf.call(this, f, result);
    }, headList.apply(this, arguments), tailList);
  });
});

module.exports = pipeWith;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./head":"85ca033753283f9443572ffb069c8352","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./tail":"7c9b1268637c18ce42461d7592210584","./identity":"b84a40aa7af63c4b1e4992514d20c6a9"}],"85ca033753283f9443572ffb069c8352":[function(require,module,exports) {
var nth =
/*#__PURE__*/
require("./nth");
/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */


var head =
/*#__PURE__*/
nth(0);
module.exports = head;
},{"./nth":"b2a6d84a5e7939f4b48958f2ea3d3987"}],"b84a40aa7af63c4b1e4992514d20c6a9":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _identity =
/*#__PURE__*/
require("./internal/_identity");
/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      const obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */


var identity =
/*#__PURE__*/
_curry1(_identity);

module.exports = identity;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_identity":"a640782576e25b277d16fdd9b6f16784"}],"a640782576e25b277d16fdd9b6f16784":[function(require,module,exports) {
function _identity(x) {
  return x;
}

module.exports = _identity;
},{}],"22f14b64aca33ebdeafc850fb29c3b01":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");

var _isFunction =
/*#__PURE__*/
require("./internal/_isFunction");

var _isString =
/*#__PURE__*/
require("./internal/_isString");

var toString =
/*#__PURE__*/
require("./toString");
/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 * Can also concatenate two members of a [fantasy-land
 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */


var concat =
/*#__PURE__*/
_curry2(function concat(a, b) {
  if (_isArray(a)) {
    if (_isArray(b)) {
      return a.concat(b);
    }

    throw new TypeError(toString(b) + ' is not an array');
  }

  if (_isString(a)) {
    if (_isString(b)) {
      return a + b;
    }

    throw new TypeError(toString(b) + ' is not a string');
  }

  if (a != null && _isFunction(a['fantasy-land/concat'])) {
    return a['fantasy-land/concat'](b);
  }

  if (a != null && _isFunction(a.concat)) {
    return a.concat(b);
  }

  throw new TypeError(toString(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});

module.exports = concat;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./internal/_isFunction":"7394fe9c98ae986ee54198ae4539f8c0","./internal/_isString":"16d2a4a6d56352a58faf02b0bcfd980f","./toString":"a49d50a85f6d5ef46be954a65e0548b1"}],"a49d50a85f6d5ef46be954a65e0548b1":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _toString =
/*#__PURE__*/
require("./internal/_toString");
/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */


var toString =
/*#__PURE__*/
_curry1(function toString(val) {
  return _toString(val, []);
});

module.exports = toString;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_toString":"1d5fdf8c3f1896a95f805c9777d1a163"}],"1d5fdf8c3f1896a95f805c9777d1a163":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./_includes");

var _map =
/*#__PURE__*/
require("./_map");

var _quote =
/*#__PURE__*/
require("./_quote");

var _toISOString =
/*#__PURE__*/
require("./_toISOString");

var keys =
/*#__PURE__*/
require("../keys");

var reject =
/*#__PURE__*/
require("../reject");

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
  }; //  mapPairs :: (Object, [String]) -> [String]


  var mapPairs = function (obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';

    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return /^\d+$/.test(k);
      }, keys(x)))).join(', ') + ']';

    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();

    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';

    case '[object Null]':
      return 'null';

    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);

    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);

    case '[object Undefined]':
      return 'undefined';

    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();

        if (repr !== '[object Object]') {
          return repr;
        }
      }

      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
}

module.exports = _toString;
},{"./_includes":"37e5ca8d870f0cfc3a8423048f7134ba","./_map":"637b39e5bd792872e66a7d6bd59ffebe","./_quote":"5c76fa9db0cabf42ea196158af88e962","./_toISOString":"92ae5c37afc44ba3a52111acde3964a8","../keys":"16ddb661ee2e916d10ff98007e571bc9","../reject":"4e9354286a472ff5791746f4948c29c3"}],"37e5ca8d870f0cfc3a8423048f7134ba":[function(require,module,exports) {
var _indexOf =
/*#__PURE__*/
require("./_indexOf");

function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}

module.exports = _includes;
},{"./_indexOf":"31dacfdeeed71db079ce12eeb9ac7bfb"}],"31dacfdeeed71db079ce12eeb9ac7bfb":[function(require,module,exports) {
var equals =
/*#__PURE__*/
require("../equals");

function _indexOf(list, a, idx) {
  var inf, item; // Array.prototype.indexOf doesn't exist below IE9

  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;

          while (idx < list.length) {
            item = list[idx];

            if (item === 0 && 1 / item === inf) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];

            if (typeof item === 'number' && item !== item) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } // non-zero numbers can utilise Set


        return list.indexOf(a, idx);
      // all these types can utilise Set

      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }

    }
  } // anything else not covered above, defer to R.equals


  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }

    idx += 1;
  }

  return -1;
}

module.exports = _indexOf;
},{"../equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"fa1ab511ff6ab0502346bfabf2941ca6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _equals =
/*#__PURE__*/
require("./internal/_equals");
/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      const a = {}; a.v = a;
 *      const b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */


var equals =
/*#__PURE__*/
_curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});

module.exports = equals;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_equals":"c9750fe2cab999020f8638cb07e532fd"}],"c9750fe2cab999020f8638cb07e532fd":[function(require,module,exports) {
var _arrayFromIterator =
/*#__PURE__*/
require("./_arrayFromIterator");

var _includesWith =
/*#__PURE__*/
require("./_includesWith");

var _functionName =
/*#__PURE__*/
require("./_functionName");

var _has =
/*#__PURE__*/
require("./_has");

var _objectIs =
/*#__PURE__*/
require("./_objectIs");

var keys =
/*#__PURE__*/
require("../keys");

var type =
/*#__PURE__*/
require("../type");
/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparision of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */


function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);

  var b = _arrayFromIterator(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  } // if *a* array contains any element that is not included in *b*


  return !_includesWith(function (b, aItem) {
    return !_includesWith(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if (_objectIs(a, b)) {
    return true;
  }

  var typeA = type(a);

  if (typeA !== type(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
        return a === b;
      }

      break;

    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {
        return false;
      }

      break;

    case 'Date':
      if (!_objectIs(a.valueOf(), b.valueOf())) {
        return false;
      }

      break;

    case 'Error':
      return a.name === b.name && a.message === b.message;

    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }

      break;
  }

  var idx = stackA.length - 1;

  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }

    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;

    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);

  if (keysA.length !== keys(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);
  idx = keysA.length - 1;

  while (idx >= 0) {
    var key = keysA[idx];

    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }

    idx -= 1;
  }

  return true;
}

module.exports = _equals;
},{"./_arrayFromIterator":"fd4ffafa97bc2c8adb43c5260e1f2e64","./_includesWith":"da67f3ed3d7b6c9e04209e2753e93d2c","./_functionName":"aca800f7f8dec7f400e00bff046cde6f","./_has":"2b64423201651bda1efe948048e1201b","./_objectIs":"cdc283fa480e84c6b4207ba7d4cf5768","../keys":"16ddb661ee2e916d10ff98007e571bc9","../type":"a6031b8203947ba74d91c52ceeb8c7c9"}],"fd4ffafa97bc2c8adb43c5260e1f2e64":[function(require,module,exports) {
function _arrayFromIterator(iter) {
  var list = [];
  var next;

  while (!(next = iter.next()).done) {
    list.push(next.value);
  }

  return list;
}

module.exports = _arrayFromIterator;
},{}],"da67f3ed3d7b6c9e04209e2753e93d2c":[function(require,module,exports) {
function _includesWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }

    idx += 1;
  }

  return false;
}

module.exports = _includesWith;
},{}],"aca800f7f8dec7f400e00bff046cde6f":[function(require,module,exports) {
function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}

module.exports = _functionName;
},{}],"cdc283fa480e84c6b4207ba7d4cf5768":[function(require,module,exports) {
// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
function _objectIs(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
}

module.exports = typeof Object.is === 'function' ? Object.is : _objectIs;
},{}],"5c76fa9db0cabf42ea196158af88e962":[function(require,module,exports) {
function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
  return '"' + escaped.replace(/"/g, '\\"') + '"';
}

module.exports = _quote;
},{}],"92ae5c37afc44ba3a52111acde3964a8":[function(require,module,exports) {
/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
var pad = function pad(n) {
  return (n < 10 ? '0' : '') + n;
};

var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
  return d.toISOString();
} : function _toISOString(d) {
  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
};

module.exports = _toISOString;
},{}],"4e9354286a472ff5791746f4948c29c3":[function(require,module,exports) {
var _complement =
/*#__PURE__*/
require("./internal/_complement");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var filter =
/*#__PURE__*/
require("./filter");
/**
 * The complement of [`filter`](#filter).
 *
 * Acts as a transducer if a transformer is given in list position. Filterable
 * objects include plain objects or any object that has a filter method such
 * as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      const isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var reject =
/*#__PURE__*/
_curry2(function reject(pred, filterable) {
  return filter(_complement(pred), filterable);
});

module.exports = reject;
},{"./internal/_complement":"3bfc86de82488c208f8c0cbdc2dbf24f","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./filter":"6b1af8a7c379b5576762ebd81fa9706d"}],"3bfc86de82488c208f8c0cbdc2dbf24f":[function(require,module,exports) {
function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
}

module.exports = _complement;
},{}],"6b1af8a7c379b5576762ebd81fa9706d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _filter =
/*#__PURE__*/
require("./internal/_filter");

var _isObject =
/*#__PURE__*/
require("./internal/_isObject");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _xfilter =
/*#__PURE__*/
require("./internal/_xfilter");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      const isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var filter =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['filter'], _xfilter, function (pred, filterable) {
  return _isObject(filterable) ? _reduce(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }

    return acc;
  }, {}, keys(filterable)) : // else
  _filter(pred, filterable);
}));

module.exports = filter;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_filter":"d1c4cde6077cac4eb35ff519241984ae","./internal/_isObject":"5b6f091ba9fedaa118475393f5fd905a","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_xfilter":"04d5054e62a64e9dc82ec1afa0814431","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"d1c4cde6077cac4eb35ff519241984ae":[function(require,module,exports) {
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }

    idx += 1;
  }

  return result;
}

module.exports = _filter;
},{}],"5b6f091ba9fedaa118475393f5fd905a":[function(require,module,exports) {
function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
}

module.exports = _isObject;
},{}],"04d5054e62a64e9dc82ec1afa0814431":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XFilter =
/*#__PURE__*/
function () {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;

  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XFilter;
}();

var _xfilter =
/*#__PURE__*/
_curry2(function _xfilter(f, xf) {
  return new XFilter(f, xf);
});

module.exports = _xfilter;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"cb47fcd807cf4c7df3bd5a6be75382fe":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var map =
/*#__PURE__*/
require("./map");

var max =
/*#__PURE__*/
require("./max");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @see R.ifElse, R.unless, R.when
 * @example
 *
 *      const fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0Â°C')],
 *        [R.equals(100), R.always('water boils at 100Â°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + 'Â°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0Â°C'
 *      fn(50); //=> 'nothing special happens at 50Â°C'
 *      fn(100); //=> 'water boils at 100Â°C'
 */


var cond =
/*#__PURE__*/
_curry1(function cond(pairs) {
  var arity = reduce(max, 0, map(function (pair) {
    return pair[0].length;
  }, pairs));
  return _arity(arity, function () {
    var idx = 0;

    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }

      idx += 1;
    }
  });
});

module.exports = cond;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./map":"0bc95d5b63ce61f297d323d91db4b198","./max":"8380508a52304a5fa43717110deee561","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"ec499e2834356e0336849c74343bd006":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var constructN =
/*#__PURE__*/
require("./constructN");
/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @see R.invoker
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      const AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      const animalTypes = ["Lion", "Tiger", "Bear"];
 *      const animalSighting = R.invoker(0, 'sighting');
 *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */


var construct =
/*#__PURE__*/
_curry1(function construct(Fn) {
  return constructN(Fn.length, Fn);
});

module.exports = construct;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./constructN":"4efdf1117289a9dd1e3791da2e87bc13"}],"4efdf1117289a9dd1e3791da2e87bc13":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var curry =
/*#__PURE__*/
require("./curry");

var nAry =
/*#__PURE__*/
require("./nAry");
/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      }
 *
 *      Salad.prototype.recipe = function() {
 *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
 *        return R.join('\n', instructions);
 *      };
 *
 *      const ThreeLayerSalad = R.constructN(3, Salad);
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
 *
 *      console.log(salad.recipe());
 *      // Add a dollop of Mayonnaise
 *      // Add a dollop of Potato Chips
 *      // Add a dollop of Ketchup
 */


var constructN =
/*#__PURE__*/
_curry2(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }

  if (n === 0) {
    return function () {
      return new Fn();
    };
  }

  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case 1:
        return new Fn($0);

      case 2:
        return new Fn($0, $1);

      case 3:
        return new Fn($0, $1, $2);

      case 4:
        return new Fn($0, $1, $2, $3);

      case 5:
        return new Fn($0, $1, $2, $3, $4);

      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);

      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);

      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);

      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);

      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});

module.exports = constructN;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./curry":"1861c52d776ae21c236d9e53ac669447","./nAry":"ab818489a9f6254dbcf4113bcf9c3f5b"}],"684cafe5aa7bb550ec645cab4decf616":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./internal/_includes");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 * Works also with strings.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.includes
 * @deprecated since v0.26.0
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 *      R.contains('ba', 'banana'); //=>true
 */


var contains =
/*#__PURE__*/
_curry2(_includes);

module.exports = contains;
},{"./internal/_includes":"37e5ca8d870f0cfc3a8423048f7134ba","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"97b8ff8268670153df1acf0b7072f5e5":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _map =
/*#__PURE__*/
require("./internal/_map");

var curryN =
/*#__PURE__*/
require("./curryN");

var max =
/*#__PURE__*/
require("./max");

var pluck =
/*#__PURE__*/
require("./pluck");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. The arity of the new function is the same as the arity of
 * the longest branching function. When invoked, this new function is applied
 * to some arguments, and each branching function is applied to those same
 * arguments. The results of each branching function are passed as arguments
 * to the converging function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      const average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */


var converge =
/*#__PURE__*/
_curry2(function converge(after, fns) {
  return curryN(reduce(max, 0, pluck('length', fns)), function () {
    var args = arguments;
    var context = this;
    return after.apply(context, _map(function (fn) {
      return fn.apply(context, args);
    }, fns));
  });
});

module.exports = converge;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_map":"637b39e5bd792872e66a7d6bd59ffebe","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./max":"8380508a52304a5fa43717110deee561","./pluck":"4f575413f527eb621c6c4f6530c0f65b","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"e247094c0f26d7e4da4f450357c1a02d":[function(require,module,exports) {
var reduceBy =
/*#__PURE__*/
require("./reduceBy");
/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */


var countBy =
/*#__PURE__*/
reduceBy(function (acc, elem) {
  return acc + 1;
}, 0);
module.exports = countBy;
},{"./reduceBy":"1a9f4a5d34ac37d82567ce7303990cfc"}],"1a9f4a5d34ac37d82567ce7303990cfc":[function(require,module,exports) {
var _clone =
/*#__PURE__*/
require("./internal/_clone");

var _curryN =
/*#__PURE__*/
require("./internal/_curryN");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _has =
/*#__PURE__*/
require("./internal/_has");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _xreduceBy =
/*#__PURE__*/
require("./internal/_xreduceBy");
/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general [`groupBy`](#groupBy) function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      const groupNames = (acc, {name}) => acc.concat(name)
 *      const toGrade = ({score}) =>
 *        score < 65 ? 'F' :
 *        score < 70 ? 'D' :
 *        score < 80 ? 'C' :
 *        score < 90 ? 'B' : 'A'
 *
 *      var students = [
 *        {name: 'Abby', score: 83},
 *        {name: 'Bart', score: 62},
 *        {name: 'Curt', score: 88},
 *        {name: 'Dora', score: 92},
 *      ]
 *
 *      reduceBy(groupNames, [], toGrade, students)
 *      //=> {"A": ["Dora"], "B": ["Abby", "Curt"], "F": ["Bart"]}
 */


var reduceBy =
/*#__PURE__*/
_curryN(4, [],
/*#__PURE__*/
_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
  return _reduce(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, [], [], false), elt);
    return acc;
  }, {}, list);
}));

module.exports = reduceBy;
},{"./internal/_clone":"81b559d186e24facfd4ce59b505b2f40","./internal/_curryN":"9f7674d3d8adebf072178876ffbaa3eb","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_has":"2b64423201651bda1efe948048e1201b","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_xreduceBy":"c1d8c90d97b3ed19ba0b4679e4c4ee3e"}],"c1d8c90d97b3ed19ba0b4679e4c4ee3e":[function(require,module,exports) {
var _curryN =
/*#__PURE__*/
require("./_curryN");

var _has =
/*#__PURE__*/
require("./_has");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XReduceBy =
/*#__PURE__*/
function () {
  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }

  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;

  XReduceBy.prototype['@@transducer/result'] = function (result) {
    var key;

    for (key in this.inputs) {
      if (_has(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);

        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }

    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };

  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return XReduceBy;
}();

var _xreduceBy =
/*#__PURE__*/
_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
});

module.exports = _xreduceBy;
},{"./_curryN":"9f7674d3d8adebf072178876ffbaa3eb","./_has":"2b64423201651bda1efe948048e1201b","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"64fc5324529317225fd1318eae39ff2c":[function(require,module,exports) {
var add =
/*#__PURE__*/
require("./add");
/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */


var dec =
/*#__PURE__*/
add(-1);
module.exports = dec;
},{"./add":"a3b79036cbf2a16e1129f1d17bed5f33"}],"912fc3ecc2a62f9cf7a7079988783e1a":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      const defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42(false);  //=> false
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */


var defaultTo =
/*#__PURE__*/
_curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});

module.exports = defaultTo;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"68642aac0ec0b4e94ed9e8c021d3dbf0":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @see R.ascend
 * @example
 *
 *      const byAge = R.descend(R.prop('age'));
 *      const people = [
 *        { name: 'Emma', age: 70 },
 *        { name: 'Peter', age: 78 },
 *        { name: 'Mikhail', age: 62 },
 *      ];
 *      const peopleByOldestFirst = R.sort(byAge, people);
 *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]
 */


var descend =
/*#__PURE__*/
_curry3(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});

module.exports = descend;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"f754e7875b0371199ee39c9cfddf6f93":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _Set =
/*#__PURE__*/
require("./internal/_Set");
/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared in terms of
 * value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */


var difference =
/*#__PURE__*/
_curry2(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  var secondLen = second.length;
  var toFilterOut = new _Set();

  for (var i = 0; i < secondLen; i += 1) {
    toFilterOut.add(second[i]);
  }

  while (idx < firstLen) {
    if (toFilterOut.add(first[idx])) {
      out[out.length] = first[idx];
    }

    idx += 1;
  }

  return out;
});

module.exports = difference;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_Set":"8e27831466f11d739c1cd9fe844fcf02"}],"8e27831466f11d739c1cd9fe844fcf02":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./_includes");

var _Set =
/*#__PURE__*/
function () {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  }; //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //


  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  }; //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //


  return _Set;
}();

function hasOrAdd(item, shouldAdd, set) {
  var type = typeof item;
  var prevSize, newSize;

  switch (type) {
    case 'string':
    case 'number':
      // distinguish between +0 and -0
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items['-0']) {
          return true;
        } else {
          if (shouldAdd) {
            set._items['-0'] = true;
          }

          return false;
        }
      } // these types can all utilise the native Set


      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;

          set._nativeSet.add(item);

          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = {};
            set._items[type][item] = true;
          }

          return false;
        } else if (item in set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][item] = true;
          }

          return false;
        }
      }

    case 'boolean':
      // set._items['boolean'] holds a two element array
      // representing [ falseExists, trueExists ]
      if (type in set._items) {
        var bIdx = item ? 1 : 0;

        if (set._items[type][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][bIdx] = true;
          }

          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type] = item ? [false, true] : [true, false];
        }

        return false;
      }

    case 'function':
      // compare functions for reference equality
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;

          set._nativeSet.add(item);

          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }

          return false;
        }

        if (!_includes(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }

          return false;
        }

        return true;
      }

    case 'undefined':
      if (set._items[type]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type] = true;
        }

        return false;
      }

    case 'object':
      if (item === null) {
        if (!set._items['null']) {
          if (shouldAdd) {
            set._items['null'] = true;
          }

          return false;
        }

        return true;
      }

    /* falls through */

    default:
      // reduce the search size of heterogeneous sets by creating buckets
      // for each type.
      type = Object.prototype.toString.call(item);

      if (!(type in set._items)) {
        if (shouldAdd) {
          set._items[type] = [item];
        }

        return false;
      } // scan through all previously applied items


      if (!_includes(item, set._items[type])) {
        if (shouldAdd) {
          set._items[type].push(item);
        }

        return false;
      }

      return true;
  }
} // A simple Set type that honours R.equals semantics


module.exports = _Set;
},{"./_includes":"37e5ca8d870f0cfc3a8423048f7134ba"}],"e3cee16d8750d79e9e29ba9457981d22":[function(require,module,exports) {
var _includesWith =
/*#__PURE__*/
require("./internal/_includesWith");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      const cmp = (x, y) => x.a === y.a;
 *      const l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      const l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */


var differenceWith =
/*#__PURE__*/
_curry3(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;

  while (idx < firstLen) {
    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
      out.push(first[idx]);
    }

    idx += 1;
  }

  return out;
});

module.exports = differenceWith;
},{"./internal/_includesWith":"da67f3ed3d7b6c9e04209e2753e93d2c","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"98362a29c072508c138edb6474ef9c40":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc, R.omit
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */


var dissoc =
/*#__PURE__*/
_curry2(function dissoc(prop, obj) {
  var result = {};

  for (var p in obj) {
    result[p] = obj[p];
  }

  delete result[prop];
  return result;
});

module.exports = dissoc;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a5b017cdf24781d487574871ef707a87":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isInteger =
/*#__PURE__*/
require("./internal/_isInteger");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");

var assoc =
/*#__PURE__*/
require("./assoc");

var dissoc =
/*#__PURE__*/
require("./dissoc");

var remove =
/*#__PURE__*/
require("./remove");

var update =
/*#__PURE__*/
require("./update");
/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */


var dissocPath =
/*#__PURE__*/
_curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;

    case 1:
      return _isInteger(path[0]) && _isArray(obj) ? remove(path[0], 1, obj) : dissoc(path[0], obj);

    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);

      if (obj[head] == null) {
        return obj;
      } else if (_isInteger(head) && _isArray(obj)) {
        return update(head, dissocPath(tail, obj[head]), obj);
      } else {
        return assoc(head, dissocPath(tail, obj[head]), obj);
      }

  }
});

module.exports = dissocPath;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isInteger":"87996e50fe266de3012e1c0dbd85ee11","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./assoc":"560d13e1b359f44b6b5f43b6e586d004","./dissoc":"98362a29c072508c138edb6474ef9c40","./remove":"3a07fda773b44f903f0546416c034015","./update":"543f61ea46e5f752d767b92c4aab0548"}],"3a07fda773b44f903f0546416c034015":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @see R.without
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */


var remove =
/*#__PURE__*/
_curry3(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});

module.exports = remove;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"543f61ea46e5f752d767b92c4aab0548":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var adjust =
/*#__PURE__*/
require("./adjust");

var always =
/*#__PURE__*/
require("./always");
/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']
 *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */


var update =
/*#__PURE__*/
_curry3(function update(idx, x, list) {
  return adjust(idx, always(x), list);
});

module.exports = update;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./adjust":"4709e7acf7da40bfd892026a578e14dd","./always":"c4c44b815065280ed5ede48eae4ca7ef"}],"76d79ec16fd0b356163588913d005bdc":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      const half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      const reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */


var divide =
/*#__PURE__*/
_curry2(function divide(a, b) {
  return a / b;
});

module.exports = divide;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"20a29ca7a6c675b0659aed3c7779c226":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xdrop =
/*#__PURE__*/
require("./internal/_xdrop");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */


var drop =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['drop'], _xdrop, function drop(n, xs) {
  return slice(Math.max(0, n), Infinity, xs);
}));

module.exports = drop;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xdrop":"b5f875e0c641da4d629cedbde9f29eba","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"b5f875e0c641da4d629cedbde9f29eba":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XDrop =
/*#__PURE__*/
function () {
  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }

  XDrop.prototype['@@transducer/init'] = _xfBase.init;
  XDrop.prototype['@@transducer/result'] = _xfBase.result;

  XDrop.prototype['@@transducer/step'] = function (result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }

    return this.xf['@@transducer/step'](result, input);
  };

  return XDrop;
}();

var _xdrop =
/*#__PURE__*/
_curry2(function _xdrop(n, xf) {
  return new XDrop(n, xf);
});

module.exports = _xdrop;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"183e1f15e27f8952a00b232589022d64":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _dropLast =
/*#__PURE__*/
require("./internal/_dropLast");

var _xdropLast =
/*#__PURE__*/
require("./internal/_xdropLast");
/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */


var dropLast =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xdropLast, _dropLast));

module.exports = dropLast;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_dropLast":"90580571fd6220c436c3ee8a6887e723","./internal/_xdropLast":"b400eb8494acf455a01667e869d56ff6"}],"90580571fd6220c436c3ee8a6887e723":[function(require,module,exports) {
var take =
/*#__PURE__*/
require("../take");

function dropLast(n, xs) {
  return take(n < xs.length ? xs.length - n : 0, xs);
}

module.exports = dropLast;
},{"../take":"1bc8f9f48d1c356c07c048ba115dee87"}],"1bc8f9f48d1c356c07c048ba115dee87":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xtake =
/*#__PURE__*/
require("./internal/_xtake");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      const personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      const takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */


var take =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['take'], _xtake, function take(n, xs) {
  return slice(0, n < 0 ? Infinity : n, xs);
}));

module.exports = take;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xtake":"59dcaebbda7025752ecf62725b29b1b0","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"59dcaebbda7025752ecf62725b29b1b0":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XTake =
/*#__PURE__*/
function () {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }

  XTake.prototype['@@transducer/init'] = _xfBase.init;
  XTake.prototype['@@transducer/result'] = _xfBase.result;

  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
  };

  return XTake;
}();

var _xtake =
/*#__PURE__*/
_curry2(function _xtake(n, xf) {
  return new XTake(n, xf);
});

module.exports = _xtake;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"b400eb8494acf455a01667e869d56ff6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XDropLast =
/*#__PURE__*/
function () {
  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }

  XDropLast.prototype['@@transducer/init'] = _xfBase.init;

  XDropLast.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };

  XDropLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }

    this.store(input);
    return result;
  };

  XDropLast.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;

    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return XDropLast;
}();

var _xdropLast =
/*#__PURE__*/
_curry2(function _xdropLast(n, xf) {
  return new XDropLast(n, xf);
});

module.exports = _xdropLast;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"b2233503524177fabfefd37300824e3c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _dropLastWhile =
/*#__PURE__*/
require("./internal/_dropLastWhile");

var _xdropLastWhile =
/*#__PURE__*/
require("./internal/_xdropLastWhile");
/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} predicate The function to be called on each element
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      const lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 *
 *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
 */


var dropLastWhile =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xdropLastWhile, _dropLastWhile));

module.exports = dropLastWhile;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_dropLastWhile":"ac7177d4f08686973f9213926188d93c","./internal/_xdropLastWhile":"329d7f262f4ed18ca694bb2df78223d5"}],"ac7177d4f08686973f9213926188d93c":[function(require,module,exports) {
var slice =
/*#__PURE__*/
require("../slice");

function dropLastWhile(pred, xs) {
  var idx = xs.length - 1;

  while (idx >= 0 && pred(xs[idx])) {
    idx -= 1;
  }

  return slice(0, idx + 1, xs);
}

module.exports = dropLastWhile;
},{"../slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"329d7f262f4ed18ca694bb2df78223d5":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduce =
/*#__PURE__*/
require("./_reduce");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XDropLastWhile =
/*#__PURE__*/
function () {
  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }

  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;

  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };

  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };

  XDropLastWhile.prototype.flush = function (result, input) {
    result = _reduce(this.xf['@@transducer/step'], result, this.retained);
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };

  XDropLastWhile.prototype.retain = function (result, input) {
    this.retained.push(input);
    return result;
  };

  return XDropLastWhile;
}();

var _xdropLastWhile =
/*#__PURE__*/
_curry2(function _xdropLastWhile(fn, xf) {
  return new XDropLastWhile(fn, xf);
});

module.exports = _xdropLastWhile;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduce":"8b27f617d657516c735e655b3ac0c38e","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"69b70a1b8decdca96f2e92cb97658e17":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xdropRepeatsWith =
/*#__PURE__*/
require("./internal/_xdropRepeatsWith");

var dropRepeatsWith =
/*#__PURE__*/
require("./dropRepeatsWith");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Returns a new list without any consecutively repeating elements.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */


var dropRepeats =
/*#__PURE__*/
_curry1(
/*#__PURE__*/
_dispatchable([],
/*#__PURE__*/
_xdropRepeatsWith(equals),
/*#__PURE__*/
dropRepeatsWith(equals)));

module.exports = dropRepeats;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xdropRepeatsWith":"42b031dd5503d62240ddb26deb17fcdb","./dropRepeatsWith":"eaafbf6f8e5db548b5eefbac4393b3f4","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"42b031dd5503d62240ddb26deb17fcdb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XDropRepeatsWith =
/*#__PURE__*/
function () {
  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;

  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
    var sameAsLast = false;

    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }

    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return XDropRepeatsWith;
}();

var _xdropRepeatsWith =
/*#__PURE__*/
_curry2(function _xdropRepeatsWith(pred, xf) {
  return new XDropRepeatsWith(pred, xf);
});

module.exports = _xdropRepeatsWith;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"eaafbf6f8e5db548b5eefbac4393b3f4":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xdropRepeatsWith =
/*#__PURE__*/
require("./internal/_xdropRepeatsWith");

var last =
/*#__PURE__*/
require("./last");
/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */


var dropRepeatsWith =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;

  if (len !== 0) {
    result[0] = list[0];

    while (idx < len) {
      if (!pred(last(result), list[idx])) {
        result[result.length] = list[idx];
      }

      idx += 1;
    }
  }

  return result;
}));

module.exports = dropRepeatsWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xdropRepeatsWith":"42b031dd5503d62240ddb26deb17fcdb","./last":"a475d83cf58797511da3284de7047f0f"}],"a475d83cf58797511da3284de7047f0f":[function(require,module,exports) {
var nth =
/*#__PURE__*/
require("./nth");
/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */


var last =
/*#__PURE__*/
nth(-1);
module.exports = last;
},{"./nth":"b2a6d84a5e7939f4b48958f2ea3d3987"}],"50604d0b50965cce814c0f4f7269b1e7":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xdropWhile =
/*#__PURE__*/
require("./internal/_xdropWhile");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      const lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 *
 *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
 */


var dropWhile =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {
  var idx = 0;
  var len = xs.length;

  while (idx < len && pred(xs[idx])) {
    idx += 1;
  }

  return slice(idx, Infinity, xs);
}));

module.exports = dropWhile;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xdropWhile":"015866364f3fdcf92eb7cc3cf87743b0","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"015866364f3fdcf92eb7cc3cf87743b0":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XDropWhile =
/*#__PURE__*/
function () {
  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;

  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }

      this.f = null;
    }

    return this.xf['@@transducer/step'](result, input);
  };

  return XDropWhile;
}();

var _xdropWhile =
/*#__PURE__*/
_curry2(function _xdropWhile(f, xf) {
  return new XDropWhile(f, xf);
});

module.exports = _xdropWhile;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"ba02a8162664325193d4bb7e9a94264a":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isFunction =
/*#__PURE__*/
require("./internal/_isFunction");

var lift =
/*#__PURE__*/
require("./lift");

var or =
/*#__PURE__*/
require("./or");
/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      const gt10 = x => x > 10;
 *      const even = x => x % 2 === 0;
 *      const f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 *
 *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)
 *      R.either([false, false, 'a'], [11]) // => [11, 11, "a"]
 */


var either =
/*#__PURE__*/
_curry2(function either(f, g) {
  return _isFunction(f) ? function _either() {
    return f.apply(this, arguments) || g.apply(this, arguments);
  } : lift(or)(f, g);
});

module.exports = either;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isFunction":"7394fe9c98ae986ee54198ae4539f8c0","./lift":"bb5f8ab5c013a8a1d195d6df843ec60e","./or":"4e337f5f5d8e9844fae4928f8bca02e6"}],"4e337f5f5d8e9844fae4928f8bca02e6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either, R.xor
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */


var or =
/*#__PURE__*/
_curry2(function or(a, b) {
  return a || b;
});

module.exports = or;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"877f27fe43030f666d7d9d61665f2ad8":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _isArguments =
/*#__PURE__*/
require("./internal/_isArguments");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");

var _isObject =
/*#__PURE__*/
require("./internal/_isObject");

var _isString =
/*#__PURE__*/
require("./internal/_isString");
/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty`,
 * `<Type>.prototype.empty` or implement the
 * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */


var empty =
/*#__PURE__*/
_curry1(function empty(x) {
  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
    return arguments;
  }() : void 0 // else
  ;
});

module.exports = empty;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_isArguments":"ffbe97f8f2ef0e4313bb19ef780c2602","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./internal/_isObject":"5b6f091ba9fedaa118475393f5fd905a","./internal/_isString":"16d2a4a6d56352a58faf02b0bcfd980f"}],"1a891ebd5e63124061dfd6abf3aa6af6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var equals =
/*#__PURE__*/
require("./equals");

var takeLast =
/*#__PURE__*/
require("./takeLast");
/**
 * Checks if a list ends with the provided sublist.
 *
 * Similarly, checks if a string ends with the provided substring.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> [a] -> Boolean
 * @sig String -> String -> Boolean
 * @param {*} suffix
 * @param {*} list
 * @return {Boolean}
 * @see R.startsWith
 * @example
 *
 *      R.endsWith('c', 'abc')                //=> true
 *      R.endsWith('b', 'abc')                //=> false
 *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
 *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
 */


var endsWith =
/*#__PURE__*/
_curry2(function (suffix, list) {
  return equals(takeLast(suffix.length, list), suffix);
});

module.exports = endsWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./equals":"fa1ab511ff6ab0502346bfabf2941ca6","./takeLast":"82a9ba0851c850ab62ad59a896a7970c"}],"82a9ba0851c850ab62ad59a896a7970c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var drop =
/*#__PURE__*/
require("./drop");
/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */


var takeLast =
/*#__PURE__*/
_curry2(function takeLast(n, xs) {
  return drop(n >= 0 ? xs.length - n : 0, xs);
});

module.exports = takeLast;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./drop":"20a29ca7a6c675b0659aed3c7779c226"}],"ee48e0bd56f5e0733d8e54c0e9542cb8":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */


var eqBy =
/*#__PURE__*/
_curry3(function eqBy(f, x, y) {
  return equals(f(x), f(y));
});

module.exports = eqBy;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"327e9a3b32fbbb9c01fa15a5dbaa944c":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Reports whether two objects have the same value, in [`R.equals`](#equals)
 * terms, for the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      const o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      const o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */


var eqProps =
/*#__PURE__*/
_curry3(function eqProps(prop, obj1, obj2) {
  return equals(obj1[prop], obj2[prop]);
});

module.exports = eqProps;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"b53bc58dcbc2b490bd9d8f37b50cca73":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      const transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */


var evolve =
/*#__PURE__*/
_curry2(function evolve(transformations, object) {
  var result = object instanceof Array ? [] : {};
  var transformation, key, type;

  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
  }

  return result;
});

module.exports = evolve;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"b9524e51e83e37767f71e5e8a51f4fdb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xfind =
/*#__PURE__*/
require("./internal/_xfind");
/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      const xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */


var find =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['find'], _xfind, function find(fn, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }

    idx += 1;
  }
}));

module.exports = find;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xfind":"b1a7afc44059b48b742be8f0ee49d25b"}],"b1a7afc44059b48b742be8f0ee49d25b":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XFind =
/*#__PURE__*/
function () {
  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }

  XFind.prototype['@@transducer/init'] = _xfBase.init;

  XFind.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }

    return this.xf['@@transducer/result'](result);
  };

  XFind.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, input));
    }

    return result;
  };

  return XFind;
}();

var _xfind =
/*#__PURE__*/
_curry2(function _xfind(f, xf) {
  return new XFind(f, xf);
});

module.exports = _xfind;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"41d5f64c8b6caac5cd5895eb9e243f4c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xfindIndex =
/*#__PURE__*/
require("./internal/_xfindIndex");
/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      const xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */


var findIndex =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xfindIndex, function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }

    idx += 1;
  }

  return -1;
}));

module.exports = findIndex;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xfindIndex":"85fed74bb789770214082640f865ad1d"}],"85fed74bb789770214082640f865ad1d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XFindIndex =
/*#__PURE__*/
function () {
  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }

  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;

  XFindIndex.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }

    return this.xf['@@transducer/result'](result);
  };

  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;

    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
    }

    return result;
  };

  return XFindIndex;
}();

var _xfindIndex =
/*#__PURE__*/
_curry2(function _xfindIndex(f, xf) {
  return new XFindIndex(f, xf);
});

module.exports = _xfindIndex;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"a8a866a1f567bed036ecf03ba8e184b4":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xfindLast =
/*#__PURE__*/
require("./internal/_xfindLast");
/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */


var findLast =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xfindLast, function findLast(fn, list) {
  var idx = list.length - 1;

  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }

    idx -= 1;
  }
}));

module.exports = findLast;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xfindLast":"0f7b32e39aefd1d394d9ac60fa85ce9c"}],"0f7b32e39aefd1d394d9ac60fa85ce9c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XFindLast =
/*#__PURE__*/
function () {
  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XFindLast.prototype['@@transducer/init'] = _xfBase.init;

  XFindLast.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };

  XFindLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.last = input;
    }

    return result;
  };

  return XFindLast;
}();

var _xfindLast =
/*#__PURE__*/
_curry2(function _xfindLast(f, xf) {
  return new XFindLast(f, xf);
});

module.exports = _xfindLast;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"994242af0ad14f6b14e3cebec6fd1252":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xfindLastIndex =
/*#__PURE__*/
require("./internal/_xfindLastIndex");
/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */


var findLastIndex =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
  var idx = list.length - 1;

  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }

    idx -= 1;
  }

  return -1;
}));

module.exports = findLastIndex;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xfindLastIndex":"774d9ddd2d1630b0f8fa479e1749bd79"}],"774d9ddd2d1630b0f8fa479e1749bd79":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XFindLastIndex =
/*#__PURE__*/
function () {
  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }

  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;

  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };

  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;

    if (this.f(input)) {
      this.lastIdx = this.idx;
    }

    return result;
  };

  return XFindLastIndex;
}();

var _xfindLastIndex =
/*#__PURE__*/
_curry2(function _xfindLastIndex(f, xf) {
  return new XFindLastIndex(f, xf);
});

module.exports = _xfindLastIndex;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"ec9444d2c81c8f5ef51059dd28b230b9":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _makeFlat =
/*#__PURE__*/
require("./internal/_makeFlat");
/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */


var flatten =
/*#__PURE__*/
_curry1(
/*#__PURE__*/
_makeFlat(true));

module.exports = flatten;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_makeFlat":"3c36ec1b49256bc3412c709601293032"}],"34761018273d60835b7f638b36046118":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      const mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */


var flip =
/*#__PURE__*/
_curry1(function flip(fn) {
  return curryN(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});

module.exports = flip;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"7642b59eafa63f8a21c14dbccc7c82db":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      const printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */


var forEach =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_checkForMethod('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;

  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }

  return list;
}));

module.exports = forEach;
},{"./internal/_checkForMethod":"a0c59d440ed7018bde75063c45529532","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"7a6ffc569fba22e3585e0c7a7f3711f2":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */


var forEachObjIndexed =
/*#__PURE__*/
_curry2(function forEachObjIndexed(fn, obj) {
  var keyList = keys(obj);
  var idx = 0;

  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }

  return obj;
});

module.exports = forEachObjIndexed;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"dac4f3d9d011d45908d551b47874ae92":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */


var fromPairs =
/*#__PURE__*/
_curry1(function fromPairs(pairs) {
  var result = {};
  var idx = 0;

  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }

  return result;
});

module.exports = fromPairs;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"f9a9d08bc2bf8f259cbb98d56e8f0366":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var reduceBy =
/*#__PURE__*/
require("./reduceBy");
/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.reduceBy, R.transduce
 * @example
 *
 *      const byGrade = R.groupBy(function(student) {
 *        const score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      const students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */


var groupBy =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_checkForMethod('groupBy',
/*#__PURE__*/
reduceBy(function (acc, item) {
  if (acc == null) {
    acc = [];
  }

  acc.push(item);
  return acc;
}, null)));

module.exports = groupBy;
},{"./internal/_checkForMethod":"a0c59d440ed7018bde75063c45529532","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./reduceBy":"1a9f4a5d34ac37d82567ce7303990cfc"}],"2d67d6be9552e1d6b0bb676b7e33ba70":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all satisfied pairwise comparison according to the provided function.
 * Only adjacent elements are passed to the comparison function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) â†’ Boolean) â†’ [a] â†’ [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */


var groupWith =
/*#__PURE__*/
_curry2(function (fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    var nextidx = idx + 1;

    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
      nextidx += 1;
    }

    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }

  return res;
});

module.exports = groupWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"61086a52366010110ac4b3102e3d467e":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */


var gt =
/*#__PURE__*/
_curry2(function gt(a, b) {
  return a > b;
});

module.exports = gt;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"2292d829c256de4a65c26dad86f618f8":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */


var gte =
/*#__PURE__*/
_curry2(function gte(a, b) {
  return a >= b;
});

module.exports = gte;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"d6ec0846e8dab2e3ce164f8f1d6ef27c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var hasPath =
/*#__PURE__*/
require("./hasPath");
/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      const hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      const point = {x: 0, y: 0};
 *      const pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */


var has =
/*#__PURE__*/
_curry2(function has(prop, obj) {
  return hasPath([prop], obj);
});

module.exports = has;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./hasPath":"531c3d83d328350647442fdc9ad99b8d"}],"531c3d83d328350647442fdc9ad99b8d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _has =
/*#__PURE__*/
require("./internal/_has");

var isNil =
/*#__PURE__*/
require("./isNil");
/**
 * Returns whether or not a path exists in an object. Only the object's
 * own properties are checked.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> Boolean
 * @param {Array} path The path to use.
 * @param {Object} obj The object to check the path in.
 * @return {Boolean} Whether the path exists.
 * @see R.has
 * @example
 *
 *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true
 *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true
 *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false
 *      R.hasPath(['a', 'b'], {});                  // => false
 */


var hasPath =
/*#__PURE__*/
_curry2(function hasPath(_path, obj) {
  if (_path.length === 0 || isNil(obj)) {
    return false;
  }

  var val = obj;
  var idx = 0;

  while (idx < _path.length) {
    if (!isNil(val) && _has(_path[idx], val)) {
      val = val[_path[idx]];
      idx += 1;
    } else {
      return false;
    }
  }

  return true;
});

module.exports = hasPath;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_has":"2b64423201651bda1efe948048e1201b","./isNil":"ec81ae12e1ed42f329ee3fba8b8e6801"}],"a7cffb20e5fe6887301a454c57887ab0":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      const square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */


var hasIn =
/*#__PURE__*/
_curry2(function hasIn(prop, obj) {
  return prop in obj;
});

module.exports = hasIn;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a181eb624e12db4db2a35afdfd06a22a":[function(require,module,exports) {
var _objectIs =
/*#__PURE__*/
require("./internal/_objectIs");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * Note this is merely a curried version of ES6 `Object.is`.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      const o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */


var identical =
/*#__PURE__*/
_curry2(_objectIs);

module.exports = identical;
},{"./internal/_objectIs":"cdc283fa480e84c6b4207ba7d4cf5768","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"480b2f155a5d2a2a18e0220bb83110ad":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when, R.cond
 * @example
 *
 *      const incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */


var ifElse =
/*#__PURE__*/
_curry3(function ifElse(condition, onTrue, onFalse) {
  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});

module.exports = ifElse;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"28eedccfb5d4e63cdd118f974a692f57":[function(require,module,exports) {
var add =
/*#__PURE__*/
require("./add");
/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */


var inc =
/*#__PURE__*/
add(1);
module.exports = inc;
},{"./add":"a3b79036cbf2a16e1129f1d17bed5f33"}],"aaf84185229796d04a4123b195b54fa9":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./internal/_includes");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 * Works also with strings.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.includes(3, [1, 2, 3]); //=> true
 *      R.includes(4, [1, 2, 3]); //=> false
 *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.includes([42], [[42]]); //=> true
 *      R.includes('ba', 'banana'); //=>true
 */


var includes =
/*#__PURE__*/
_curry2(_includes);

module.exports = includes;
},{"./internal/_includes":"37e5ca8d870f0cfc3a8423048f7134ba","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"e6000cb19d9adc88f22df26330d9c5ed":[function(require,module,exports) {
var reduceBy =
/*#__PURE__*/
require("./reduceBy");
/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */


var indexBy =
/*#__PURE__*/
reduceBy(function (acc, elem) {
  return elem;
}, null);
module.exports = indexBy;
},{"./reduceBy":"1a9f4a5d34ac37d82567ce7303990cfc"}],"3a1c9d5739c37b17a9558d0b4c621c62":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _indexOf =
/*#__PURE__*/
require("./internal/_indexOf");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");
/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */


var indexOf =
/*#__PURE__*/
_curry2(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
});

module.exports = indexOf;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_indexOf":"31dacfdeeed71db079ce12eeb9ac7bfb","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974"}],"2fee76e3fd5fe04abb28d000775fb4aa":[function(require,module,exports) {
var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */


var init =
/*#__PURE__*/
slice(0, -1);
module.exports = init;
},{"./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"5666d2e1cafaeab43e026502646c39df":[function(require,module,exports) {
var _includesWith =
/*#__PURE__*/
require("./internal/_includesWith");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _filter =
/*#__PURE__*/
require("./internal/_filter");
/**
 * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
 * `xs'` comprising each of the elements of `xs` which is equal to one or more
 * elements of `ys` according to `pred`.
 *
 * `pred` must be a binary function expecting an element from each list.
 *
 * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
 * not be significant, but since `xs'` is ordered the implementation guarantees
 * that its values are in the same order as they appear in `xs`. Duplicates are
 * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Relation
 * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
 * @param {Function} pred
 * @param {Array} xs
 * @param {Array} ys
 * @return {Array}
 * @see R.intersection
 * @example
 *
 *      R.innerJoin(
 *        (record, id) => record.id === id,
 *        [{id: 824, name: 'Richie Furay'},
 *         {id: 956, name: 'Dewey Martin'},
 *         {id: 313, name: 'Bruce Palmer'},
 *         {id: 456, name: 'Stephen Stills'},
 *         {id: 177, name: 'Neil Young'}],
 *        [177, 456, 999]
 *      );
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */


var innerJoin =
/*#__PURE__*/
_curry3(function innerJoin(pred, xs, ys) {
  return _filter(function (x) {
    return _includesWith(pred, x, ys);
  }, xs);
});

module.exports = innerJoin;
},{"./internal/_includesWith":"da67f3ed3d7b6c9e04209e2753e93d2c","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_filter":"d1c4cde6077cac4eb35ff519241984ae"}],"e5a70b1985271f1e2287e5b931861d2b":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Inserts the supplied element into the list, at the specified `index`. _Note that

 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */


var insert =
/*#__PURE__*/
_curry3(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});

module.exports = insert;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"0f455bd19342ab9bbc7306bfc2b203d8":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */


var insertAll =
/*#__PURE__*/
_curry3(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});

module.exports = insertAll;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"8b10e9e7138a31acf0fe2ccd229ce468":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./internal/_includes");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _filter =
/*#__PURE__*/
require("./internal/_filter");

var flip =
/*#__PURE__*/
require("./flip");

var uniq =
/*#__PURE__*/
require("./uniq");
/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.innerJoin
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */


var intersection =
/*#__PURE__*/
_curry2(function intersection(list1, list2) {
  var lookupList, filteredList;

  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }

  return uniq(_filter(flip(_includes)(lookupList), filteredList));
});

module.exports = intersection;
},{"./internal/_includes":"37e5ca8d870f0cfc3a8423048f7134ba","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_filter":"d1c4cde6077cac4eb35ff519241984ae","./flip":"34761018273d60835b7f638b36046118","./uniq":"3742e8b86600eac6764776f624ba8d14"}],"3742e8b86600eac6764776f624ba8d14":[function(require,module,exports) {
var identity =
/*#__PURE__*/
require("./identity");

var uniqBy =
/*#__PURE__*/
require("./uniqBy");
/**
 * Returns a new list containing only one copy of each element in the original
 * list. [`R.equals`](#equals) is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */


var uniq =
/*#__PURE__*/
uniqBy(identity);
module.exports = uniq;
},{"./identity":"b84a40aa7af63c4b1e4992514d20c6a9","./uniqBy":"38aa9758004688ad8eada20660e6e283"}],"38aa9758004688ad8eada20660e6e283":[function(require,module,exports) {
var _Set =
/*#__PURE__*/
require("./internal/_Set");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. [`R.equals`](#equals) is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */


var uniqBy =
/*#__PURE__*/
_curry2(function uniqBy(fn, list) {
  var set = new _Set();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);

    if (set.add(appliedItem)) {
      result.push(item);
    }

    idx += 1;
  }

  return result;
});

module.exports = uniqBy;
},{"./internal/_Set":"8e27831466f11d739c1cd9fe844fcf02","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"144881a4dd1f0a5c50c3c85e50122b09":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']
 */


var intersperse =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_checkForMethod('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;

  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }

    idx += 1;
  }

  return out;
}));

module.exports = intersperse;
},{"./internal/_checkForMethod":"a0c59d440ed7018bde75063c45529532","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"470ee88e17b484b7912a03faa8a65b7e":[function(require,module,exports) {
var _clone =
/*#__PURE__*/
require("./internal/_clone");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _isTransformer =
/*#__PURE__*/
require("./internal/_isTransformer");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _stepCat =
/*#__PURE__*/
require("./internal/_stepCat");
/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the
 * transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.transduce
 * @example
 *
 *      const numbers = [1, 2, 3, 4];
 *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      const intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */


var into =
/*#__PURE__*/
_curry3(function into(acc, xf, list) {
  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
});

module.exports = into;
},{"./internal/_clone":"81b559d186e24facfd4ce59b505b2f40","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_isTransformer":"7fd490f48e8f3ed926e9a87f57a321f4","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_stepCat":"7db93efeed0470e94ab68670ef4dd4f4"}],"7db93efeed0470e94ab68670ef4dd4f4":[function(require,module,exports) {
var _objectAssign =
/*#__PURE__*/
require("./_objectAssign");

var _identity =
/*#__PURE__*/
require("./_identity");

var _isArrayLike =
/*#__PURE__*/
require("./_isArrayLike");

var _isTransformer =
/*#__PURE__*/
require("./_isTransformer");

var objOf =
/*#__PURE__*/
require("../objOf");

var _stepCatArray = {
  '@@transducer/init': Array,
  '@@transducer/step': function (xs, x) {
    xs.push(x);
    return xs;
  },
  '@@transducer/result': _identity
};
var _stepCatString = {
  '@@transducer/init': String,
  '@@transducer/step': function (a, b) {
    return a + b;
  },
  '@@transducer/result': _identity
};
var _stepCatObject = {
  '@@transducer/init': Object,
  '@@transducer/step': function (result, input) {
    return _objectAssign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
  },
  '@@transducer/result': _identity
};

function _stepCat(obj) {
  if (_isTransformer(obj)) {
    return obj;
  }

  if (_isArrayLike(obj)) {
    return _stepCatArray;
  }

  if (typeof obj === 'string') {
    return _stepCatString;
  }

  if (typeof obj === 'object') {
    return _stepCatObject;
  }

  throw new Error('Cannot create transformer for ' + obj);
}

module.exports = _stepCat;
},{"./_objectAssign":"d32e556d0b2cb28072f51d43945f20ca","./_identity":"a640782576e25b277d16fdd9b6f16784","./_isArrayLike":"ec1e7552f820e6603596b96b0f3826bf","./_isTransformer":"7fd490f48e8f3ed926e9a87f57a321f4","../objOf":"c6763dc136d29e6432c36e617e1da959"}],"d32e556d0b2cb28072f51d43945f20ca":[function(require,module,exports) {
var _has =
/*#__PURE__*/
require("./_has"); // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign


function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;

  while (idx < length) {
    var source = arguments[idx];

    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }

    idx += 1;
  }

  return output;
}

module.exports = typeof Object.assign === 'function' ? Object.assign : _objectAssign;
},{"./_has":"2b64423201651bda1efe948048e1201b"}],"c6763dc136d29e6432c36e617e1da959":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      const matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */


var objOf =
/*#__PURE__*/
_curry2(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});

module.exports = objOf;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"814a08bde41b1d70c8083a6aa7246fc4":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _has =
/*#__PURE__*/
require("./internal/_has");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
 * duplicate values by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys in an array.
 * @see R.invertObj
 * @example
 *
 *      const raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */


var invert =
/*#__PURE__*/
_curry1(function invert(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = _has(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }

  return out;
});

module.exports = invert;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_has":"2b64423201651bda1efe948048e1201b","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"e5264c8184d14af9a6d8c9720be146d5":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @see R.invert
 * @example
 *
 *      const raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      const raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */


var invertObj =
/*#__PURE__*/
_curry1(function invertObj(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }

  return out;
});

module.exports = invertObj;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"288295995043de6d4a441681bd9a27fb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isFunction =
/*#__PURE__*/
require("./internal/_isFunction");

var curryN =
/*#__PURE__*/
require("./curryN");

var toString =
/*#__PURE__*/
require("./toString");
/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of any of the target object's methods to call.
 * @return {Function} A new curried function.
 * @see R.construct
 * @example
 *
 *      const sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      const sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 *
 *      const dog = {
 *        speak: async () => 'Woof!'
 *      };
 *      const speak = R.invoker(0, 'speak');
 *      speak(dog).then(console.log) //~> 'Woof!'
 *
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */


var invoker =
/*#__PURE__*/
_curry2(function invoker(arity, method) {
  return curryN(arity + 1, function () {
    var target = arguments[arity];

    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }

    throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
  });
});

module.exports = invoker;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isFunction":"7394fe9c98ae986ee54198ae4539f8c0","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./toString":"a49d50a85f6d5ef46be954a65e0548b1"}],"2d524fab8f815b6e05063f7ec9a86572":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */


var is =
/*#__PURE__*/
_curry2(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});

module.exports = is;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"c8c68d8bdceca6e170a065608c7f81aa":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var empty =
/*#__PURE__*/
require("./empty");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */


var isEmpty =
/*#__PURE__*/
_curry1(function isEmpty(x) {
  return x != null && equals(x, empty(x));
});

module.exports = isEmpty;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./empty":"877f27fe43030f666d7d9d61665f2ad8","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"ec91292dde737e6b7a022165f93fc9d3":[function(require,module,exports) {
var invoker =
/*#__PURE__*/
require("./invoker");
/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      const spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */


var join =
/*#__PURE__*/
invoker(1, 'join');
module.exports = join;
},{"./invoker":"288295995043de6d4a441681bd9a27fb"}],"69a982c2daf268f2f49b477a9d2d89c4":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var converge =
/*#__PURE__*/
require("./converge");
/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      const getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */


var juxt =
/*#__PURE__*/
_curry1(function juxt(fns) {
  return converge(function () {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});

module.exports = juxt;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./converge":"97b8ff8268670153df1acf0b7072f5e5"}],"59a70f2876066a6d42cb716be318d26e":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @see R.keys, R.valuesIn
 * @example
 *
 *      const F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      const f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */


var keysIn =
/*#__PURE__*/
_curry1(function keysIn(obj) {
  var prop;
  var ks = [];

  for (prop in obj) {
    ks[ks.length] = prop;
  }

  return ks;
});

module.exports = keysIn;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"d5e80dd77b81bb0477c91a1bcb1c008d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isArray =
/*#__PURE__*/
require("./internal/_isArray");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */


var lastIndexOf =
/*#__PURE__*/
_curry2(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;

    while (idx >= 0) {
      if (equals(xs[idx], target)) {
        return idx;
      }

      idx -= 1;
    }

    return -1;
  }
});

module.exports = lastIndexOf;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isArray":"a2205a20ea76d7c4ae23a1144ebcb974","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"884c6bc9f5a19df1b3052e3d9e9572e5":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _isNumber =
/*#__PURE__*/
require("./internal/_isNumber");
/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */


var length =
/*#__PURE__*/
_curry1(function length(list) {
  return list != null && _isNumber(list.length) ? list.length : NaN;
});

module.exports = length;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_isNumber":"a97fa3461908a5c60123f70b578603ec"}],"a97fa3461908a5c60123f70b578603ec":[function(require,module,exports) {
function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
}

module.exports = _isNumber;
},{}],"2e0f5f085c63dd573843e80be3bd6a4d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var map =
/*#__PURE__*/
require("./map");
/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      const xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */


var lens =
/*#__PURE__*/
_curry2(function lens(getter, setter) {
  return function (toFunctorFn) {
    return function (target) {
      return map(function (focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});

module.exports = lens;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./map":"0bc95d5b63ce61f297d323d91db4b198"}],"14bc17ab64faaf7620aa9fa3b221ed12":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var lens =
/*#__PURE__*/
require("./lens");

var nth =
/*#__PURE__*/
require("./nth");

var update =
/*#__PURE__*/
require("./update");
/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over, R.nth
 * @example
 *
 *      const headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */


var lensIndex =
/*#__PURE__*/
_curry1(function lensIndex(n) {
  return lens(nth(n), update(n));
});

module.exports = lensIndex;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./lens":"2e0f5f085c63dd573843e80be3bd6a4d","./nth":"b2a6d84a5e7939f4b48958f2ea3d3987","./update":"543f61ea46e5f752d767b92c4aab0548"}],"d5efd13da0006e7fc3c9f8fab59ade28":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var assocPath =
/*#__PURE__*/
require("./assocPath");

var lens =
/*#__PURE__*/
require("./lens");

var path =
/*#__PURE__*/
require("./path");
/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      const xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */


var lensPath =
/*#__PURE__*/
_curry1(function lensPath(p) {
  return lens(path(p), assocPath(p));
});

module.exports = lensPath;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./assocPath":"97bedbcca6d8644b1a63bf2c3bcae124","./lens":"2e0f5f085c63dd573843e80be3bd6a4d","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"d72299c3e2674f9bafb8ccc61c3141ea":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var assoc =
/*#__PURE__*/
require("./assoc");

var lens =
/*#__PURE__*/
require("./lens");

var prop =
/*#__PURE__*/
require("./prop");
/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      const xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */


var lensProp =
/*#__PURE__*/
_curry1(function lensProp(k) {
  return lens(prop(k), assoc(k));
});

module.exports = lensProp;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./assoc":"560d13e1b359f44b6b5f43b6e586d004","./lens":"2e0f5f085c63dd573843e80be3bd6a4d","./prop":"2cc29dbb95276554420ef4535508ab7d"}],"74d39e9ed041a887ad83997ac4687fbb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */


var lt =
/*#__PURE__*/
_curry2(function lt(a, b) {
  return a < b;
});

module.exports = lt;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"d7fc5065b57d3e97c49f08fcc23df9a5":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */


var lte =
/*#__PURE__*/
_curry2(function lte(a, b) {
  return a <= b;
});

module.exports = lte;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"9bb320db870791a7b4e15eaad8be5f45":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * The `mapAccum` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.scan, R.addIndex, R.mapAccumRight
 * @example
 *
 *      const digits = ['1', '2', '3', '4'];
 *      const appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */


var mapAccum =
/*#__PURE__*/
_curry3(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];

  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }

  return [tuple[0], result];
});

module.exports = mapAccum;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"098bfc07fa7ee202d5c0367e26422848":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * The `mapAccumRight` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
 * the right to the left.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      const digits = ['1', '2', '3', '4'];
 *      const appender = (a, b) => [b + a, b + a];
 *
 *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   f(f(f(a, d)[0], c)[0], b)[0],
 *   [
 *     f(a, d)[1],
 *     f(f(a, d)[0], c)[1],
 *     f(f(f(a, d)[0], c)[0], b)[1]
 *   ]
 * ]
 */


var mapAccumRight =
/*#__PURE__*/
_curry3(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];

  while (idx >= 0) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx -= 1;
  }

  return [tuple[0], result];
});

module.exports = mapAccumRight;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"e2e373aa0536032547bb0ece5a2d1a9e":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var keys =
/*#__PURE__*/
require("./keys");
/**
 * An Object-specific version of [`map`](#map). The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * [`map`](#map) instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      const xyz = { x: 1, y: 2, z: 3 };
 *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */


var mapObjIndexed =
/*#__PURE__*/
_curry2(function mapObjIndexed(fn, obj) {
  return _reduce(function (acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, keys(obj));
});

module.exports = mapObjIndexed;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./keys":"16ddb661ee2e916d10ff98007e571bc9"}],"8b84f0ffc7fe9863d86ec6d4705061a0":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */


var match =
/*#__PURE__*/
_curry2(function match(rx, str) {
  return str.match(rx) || [];
});

module.exports = match;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"34d9239fa2682ad651a0ba4d8e8be0cc":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isInteger =
/*#__PURE__*/
require("./internal/_isInteger");
/**
 * `mathMod` behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
 * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
 * arguments, and returns NaN when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @see R.modulo
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      const clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      const seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */


var mathMod =
/*#__PURE__*/
_curry2(function mathMod(m, p) {
  if (!_isInteger(m)) {
    return NaN;
  }

  if (!_isInteger(p) || p < 1) {
    return NaN;
  }

  return (m % p + p) % p;
});

module.exports = mathMod;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isInteger":"87996e50fe266de3012e1c0dbd85ee11"}],"3a174ef6a4ba0c115a65ab918890435e":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      const square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */


var maxBy =
/*#__PURE__*/
_curry3(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});

module.exports = maxBy;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"6575bede05b2154f2a1a80e861aa40eb":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var sum =
/*#__PURE__*/
require("./sum");
/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.median
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */


var mean =
/*#__PURE__*/
_curry1(function mean(list) {
  return sum(list) / list.length;
});

module.exports = mean;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./sum":"e9d81808001eff36e1063063aede60f9"}],"e9d81808001eff36e1063063aede60f9":[function(require,module,exports) {
var add =
/*#__PURE__*/
require("./add");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */


var sum =
/*#__PURE__*/
reduce(add, 0);
module.exports = sum;
},{"./add":"a3b79036cbf2a16e1129f1d17bed5f33","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"6ee2a473efaa8855a9d525248649d4f9":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var mean =
/*#__PURE__*/
require("./mean");
/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.mean
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */


var median =
/*#__PURE__*/
_curry1(function median(list) {
  var len = list.length;

  if (len === 0) {
    return NaN;
  }

  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});

module.exports = median;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./mean":"6575bede05b2154f2a1a80e861aa40eb"}],"7df886ea51b3a409445fdfd63397158d":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _has =
/*#__PURE__*/
require("./internal/_has");
/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to generate the cache key.
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoizeWith(R.identity, n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */


var memoizeWith =
/*#__PURE__*/
_curry2(function memoizeWith(mFn, fn) {
  var cache = {};
  return _arity(fn.length, function () {
    var key = mFn.apply(this, arguments);

    if (!_has(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }

    return cache[key];
  });
});

module.exports = memoizeWith;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_has":"2b64423201651bda1efe948048e1201b"}],"77afa7c820aba52c2dda6415ec9f9afe":[function(require,module,exports) {
var _objectAssign =
/*#__PURE__*/
require("./internal/_objectAssign");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
 * @deprecated since v0.26.0
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      const withDefaults = R.merge({x: 0, y: 0});
 *      withDefaults({y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge(a, b) = {...a, ...b}
 */


var merge =
/*#__PURE__*/
_curry2(function merge(l, r) {
  return _objectAssign({}, l, r);
});

module.exports = merge;
},{"./internal/_objectAssign":"d32e556d0b2cb28072f51d43945f20ca","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a2b318342ab52e0291a60f14e5a0fcae":[function(require,module,exports) {
var _objectAssign =
/*#__PURE__*/
require("./internal/_objectAssign");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */


var mergeAll =
/*#__PURE__*/
_curry1(function mergeAll(list) {
  return _objectAssign.apply(null, [{}].concat(list));
});

module.exports = mergeAll;
},{"./internal/_objectAssign":"d32e556d0b2cb28072f51d43945f20ca","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"e91a1a6be1d9c0828568d26cdfc187e2":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var mergeDeepWithKey =
/*#__PURE__*/
require("./mergeDeepWithKey");
/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the first object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                      { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
 */


var mergeDeepLeft =
/*#__PURE__*/
_curry2(function mergeDeepLeft(lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return lVal;
  }, lObj, rObj);
});

module.exports = mergeDeepLeft;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./mergeDeepWithKey":"4924dfeb1286702c69c4b774028138ca"}],"4924dfeb1286702c69c4b774028138ca":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _isObject =
/*#__PURE__*/
require("./internal/_isObject");

var mergeWithKey =
/*#__PURE__*/
require("./mergeWithKey");
/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to the key and associated values
 *   using the resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWithKey, R.mergeDeepWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeDeepWithKey(concatValues,
 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
 */


var mergeDeepWithKey =
/*#__PURE__*/
_curry3(function mergeDeepWithKey(fn, lObj, rObj) {
  return mergeWithKey(function (k, lVal, rVal) {
    if (_isObject(lVal) && _isObject(rVal)) {
      return mergeDeepWithKey(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});

module.exports = mergeDeepWithKey;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_isObject":"5b6f091ba9fedaa118475393f5fd905a","./mergeWithKey":"ce49b29a1f3b9679489bd4e066dc7d72"}],"ce49b29a1f3b9679489bd4e066dc7d72":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _has =
/*#__PURE__*/
require("./internal/_has");
/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */


var mergeWithKey =
/*#__PURE__*/
_curry3(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (_has(k, r) && !_has(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});

module.exports = mergeWithKey;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./internal/_has":"2b64423201651bda1efe948048e1201b"}],"2c5e3a0060153d58f7f2f811ade26abd":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var mergeDeepWithKey =
/*#__PURE__*/
require("./mergeDeepWithKey");
/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                       { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
 */


var mergeDeepRight =
/*#__PURE__*/
_curry2(function mergeDeepRight(lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return rVal;
  }, lObj, rObj);
});

module.exports = mergeDeepRight;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./mergeDeepWithKey":"4924dfeb1286702c69c4b774028138ca"}],"211484cd9254b5d775b89c3a1751ed47":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var mergeDeepWithKey =
/*#__PURE__*/
require("./mergeDeepWithKey");
/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to associated values using the
 *   resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepWith(R.concat,
 *                      { a: true, c: { values: [10, 20] }},
 *                      { b: true, c: { values: [15, 35] }});
 *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
 */


var mergeDeepWith =
/*#__PURE__*/
_curry3(function mergeDeepWith(fn, lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return fn(lVal, rVal);
  }, lObj, rObj);
});

module.exports = mergeDeepWith;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./mergeDeepWithKey":"4924dfeb1286702c69c4b774028138ca"}],"e4cf424b69350148cc083d6350772b3a":[function(require,module,exports) {
var _objectAssign =
/*#__PURE__*/
require("./internal/_objectAssign");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the first object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      const resetToDefault = R.mergeLeft({x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.mergeLeft(a, b) = {...b, ...a}
 */


var mergeLeft =
/*#__PURE__*/
_curry2(function mergeLeft(l, r) {
  return _objectAssign({}, r, l);
});

module.exports = mergeLeft;
},{"./internal/_objectAssign":"d32e556d0b2cb28072f51d43945f20ca","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"232e9b076072befdd9952c29230a1288":[function(require,module,exports) {
var _objectAssign =
/*#__PURE__*/
require("./internal/_objectAssign");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      const withDefaults = R.mergeRight({x: 0, y: 0});
 *      withDefaults({y: 2}); //=> {x: 0, y: 2}
 * @symb R.mergeRight(a, b) = {...a, ...b}
 */


var mergeRight =
/*#__PURE__*/
_curry2(function mergeRight(l, r) {
  return _objectAssign({}, l, r);
});

module.exports = mergeRight;
},{"./internal/_objectAssign":"d32e556d0b2cb28072f51d43945f20ca","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"6c4463d834f4ba2ead146068aa19e42d":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var mergeWithKey =
/*#__PURE__*/
require("./mergeWithKey");
/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWith, R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */


var mergeWith =
/*#__PURE__*/
_curry3(function mergeWith(fn, l, r) {
  return mergeWithKey(function (_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});

module.exports = mergeWith;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./mergeWithKey":"ce49b29a1f3b9679489bd4e066dc7d72"}],"f82884deb8bb768db53c7f888e223be5":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */


var min =
/*#__PURE__*/
_curry2(function min(a, b) {
  return b < a ? b : a;
});

module.exports = min;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"1384d26a586e8f98e063a4612a399863":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      const square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */


var minBy =
/*#__PURE__*/
_curry3(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});

module.exports = minBy;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"10b98aa8205c5e342e51352ce1ea336f":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see [`mathMod`](#mathMod).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      const isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */


var modulo =
/*#__PURE__*/
_curry2(function modulo(a, b) {
  return a % b;
});

module.exports = modulo;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"c22fdea793d0b81cd0608ca2f04e9a4c":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Move an item, at index `from`, to index `to`, in a list of elements.
 * A new list will be created containing the new elements order.
 *
 * @func
 * @memberOf R
 * @since v0.27.1
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} from The source index
 * @param {Number} to The destination index
 * @param {Array} list The list which will serve to realise the move
 * @return {Array} The new list reordered
 * @example
 *
 *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']
 *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation
 */


var move =
/*#__PURE__*/
_curry3(function (from, to, list) {
  var length = list.length;
  var result = list.slice();
  var positiveFrom = from < 0 ? length + from : from;
  var positiveTo = to < 0 ? length + to : to;
  var item = result.splice(positiveFrom, 1);
  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
});

module.exports = move;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"13c83fdba3a69bde2824a7692bac5765":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      const double = R.multiply(2);
 *      const triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */


var multiply =
/*#__PURE__*/
_curry2(function multiply(a, b) {
  return a * b;
});

module.exports = multiply;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"c379bbf6ce66e899e7dcba2fb948181a":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */


var negate =
/*#__PURE__*/
_curry1(function negate(n) {
  return -n;
});

module.exports = negate;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"4a1e7ed7c51c89dcb817b5e82e02376f":[function(require,module,exports) {
var _complement =
/*#__PURE__*/
require("./internal/_complement");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var all =
/*#__PURE__*/
require("./all");
/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      const isEven = n => n % 2 === 0;
 *      const isOdd = n => n % 2 === 1;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
 */


var none =
/*#__PURE__*/
_curry2(function none(fn, input) {
  return all(_complement(fn), input);
});

module.exports = none;
},{"./internal/_complement":"3bfc86de82488c208f8c0cbdc2dbf24f","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./all":"3eca526a06def7c980f1164620ccd9d6"}],"f0feca05a597b674d2cb99ddb06996af":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");

var nth =
/*#__PURE__*/
require("./nth");
/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */


var nthArg =
/*#__PURE__*/
_curry1(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return curryN(arity, function () {
    return nth(n, arguments);
  });
});

module.exports = nthArg;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./nth":"b2a6d84a5e7939f4b48958f2ea3d3987"}],"cefd99bda76f46ad1aa387864fff033c":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * `o` is a curried composition function that returns a unary function.
 * Like [`compose`](#compose), `o` performs right-to-left function composition.
 * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
 * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is
 * limited to accepting only 2 unary functions. The name o was chosen because
 * of its similarity to the mathematical composition operator âˆ˜.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (b -> c) -> (a -> b) -> a -> c
 * @param {Function} f
 * @param {Function} g
 * @return {Function}
 * @see R.compose, R.pipe
 * @example
 *
 *      const classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
 *      const yellGreeting = R.o(R.toUpper, classyGreeting);
 *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
 *
 * @symb R.o(f, g, x) = f(g(x))
 */


var o =
/*#__PURE__*/
_curry3(function o(f, g, x) {
  return f(g(x));
});

module.exports = o;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"ba31e13f9b0fa1104e841d7e1eedb299":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _of =
/*#__PURE__*/
require("./internal/_of");
/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */


var of =
/*#__PURE__*/
_curry1(_of);

module.exports = of;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_of":"7de933a04f99b3f1c19305d5a123c561"}],"7de933a04f99b3f1c19305d5a123c561":[function(require,module,exports) {
function _of(x) {
  return [x];
}

module.exports = _of;
},{}],"f724edc06efca1a229a15a06c5884e93":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */


var omit =
/*#__PURE__*/
_curry2(function omit(names, obj) {
  var result = {};
  var index = {};
  var idx = 0;
  var len = names.length;

  while (idx < len) {
    index[names[idx]] = 1;
    idx += 1;
  }

  for (var prop in obj) {
    if (!index.hasOwnProperty(prop)) {
      result[prop] = obj[prop];
    }
  }

  return result;
});

module.exports = omit;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"65443e81ee45193543b14cab7e628a85":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      const addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */


var once =
/*#__PURE__*/
_curry1(function once(fn) {
  var called = false;
  var result;
  return _arity(fn.length, function () {
    if (called) {
      return result;
    }

    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});

module.exports = once;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"10d621267b11a7bb0f784303081f6365":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _assertPromise =
/*#__PURE__*/
require("./internal/_assertPromise");
/**
 * Returns the result of applying the onFailure function to the value inside
 * a failed promise. This is useful for handling rejected promises
 * inside function compositions.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Function
 * @sig (e -> b) -> (Promise e a) -> (Promise e b)
 * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)
 * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.
 * @param {Promise} p
 * @return {Promise} The result of calling `p.then(null, onFailure)`
 * @see R.then
 * @example
 *
 *      var failedFetch = (id) => Promise.reject('bad ID');
 *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })
 *
 *      //recoverFromFailure :: String -> Promise ({firstName, lastName})
 *      var recoverFromFailure = R.pipe(
 *        failedFetch,
 *        R.otherwise(useDefault),
 *        R.then(R.pick(['firstName', 'lastName'])),
 *      );
 *      recoverFromFailure(12345).then(console.log)
 */


var otherwise =
/*#__PURE__*/
_curry2(function otherwise(f, p) {
  _assertPromise('otherwise', p);

  return p.then(null, f);
});

module.exports = otherwise;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_assertPromise":"2f47311ff2d0cd7687ee018d3eb1b85b"}],"2f47311ff2d0cd7687ee018d3eb1b85b":[function(require,module,exports) {
var _isFunction =
/*#__PURE__*/
require("./_isFunction");

var _toString =
/*#__PURE__*/
require("./_toString");

function _assertPromise(name, p) {
  if (p == null || !_isFunction(p.then)) {
    throw new TypeError('`' + name + '` expected a Promise, received ' + _toString(p, []));
  }
}

module.exports = _assertPromise;
},{"./_isFunction":"7394fe9c98ae986ee54198ae4539f8c0","./_toString":"1d5fdf8c3f1896a95f805c9777d1a163"}],"29e07e6d2992edd1928b8b8f69f6cd5e":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3"); // `Identity` is a functor that holds a single value, where `map` simply
// transforms the held value with the provided function.


var Identity = function (x) {
  return {
    value: x,
    map: function (f) {
      return Identity(f(x));
    }
  };
};
/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      const headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */


var over =
/*#__PURE__*/
_curry3(function over(lens, f, x) {
  // The value returned by the getter function is first transformed with `f`,
  // then set as the value of an `Identity`. This is then mapped over with the
  // setter function of the lens.
  return lens(function (y) {
    return Identity(f(y));
  })(x).value;
});

module.exports = over;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"887b92a16514a0070328b779d7be74a6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */


var pair =
/*#__PURE__*/
_curry2(function pair(fst, snd) {
  return [fst, snd];
});

module.exports = pair;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"3b26610267474ae2766eb27ba12152c9":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _createPartialApplicator =
/*#__PURE__*/
require("./internal/_createPartialApplicator");
/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight, R.curry
 * @example
 *
 *      const multiply2 = (a, b) => a * b;
 *      const double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      const greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      const sayHello = R.partial(greet, ['Hello']);
 *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */


var partial =
/*#__PURE__*/
_createPartialApplicator(_concat);

module.exports = partial;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_createPartialApplicator":"4e1d7531265e4a5ca59d0a434379576a"}],"4e1d7531265e4a5ca59d0a434379576a":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./_arity");

var _curry2 =
/*#__PURE__*/
require("./_curry2");

function _createPartialApplicator(concat) {
  return _curry2(function (fn, args) {
    return _arity(Math.max(0, fn.length - args.length), function () {
      return fn.apply(this, concat(args, arguments));
    });
  });
}

module.exports = _createPartialApplicator;
},{"./_arity":"7cf93e43fea3f54b059e8389cc61a81f","./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"652d26942a799edf48415d8db51289cf":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _createPartialApplicator =
/*#__PURE__*/
require("./internal/_createPartialApplicator");

var flip =
/*#__PURE__*/
require("./flip");
/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      const greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */


var partialRight =
/*#__PURE__*/
_createPartialApplicator(
/*#__PURE__*/
flip(_concat));

module.exports = partialRight;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_createPartialApplicator":"4e1d7531265e4a5ca59d0a434379576a","./flip":"34761018273d60835b7f638b36046118"}],"ad48dba539488578805ee8c69ea22434":[function(require,module,exports) {
var filter =
/*#__PURE__*/
require("./filter");

var juxt =
/*#__PURE__*/
require("./juxt");

var reject =
/*#__PURE__*/
require("./reject");
/**
 * Takes a predicate and a list or other `Filterable` object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */


var partition =
/*#__PURE__*/
juxt([filter, reject]);
module.exports = partition;
},{"./filter":"6b1af8a7c379b5576762ebd81fa9706d","./juxt":"69a982c2daf268f2f49b477a9d2d89c4","./reject":"4e9354286a472ff5791746f4948c29c3"}],"21d8b646bf4e70ba9d31bf457df3756c":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var equals =
/*#__PURE__*/
require("./equals");

var path =
/*#__PURE__*/
require("./path");
/**
 * Determines whether a nested path on an object has a specific value, in
 * [`R.equals`](#equals) terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      const user1 = { address: { zipCode: 90210 } };
 *      const user2 = { address: { zipCode: 55555 } };
 *      const user3 = { name: 'Bob' };
 *      const users = [ user1, user2, user3 ];
 *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */


var pathEq =
/*#__PURE__*/
_curry3(function pathEq(_path, val, obj) {
  return equals(path(_path, obj), val);
});

module.exports = pathEq;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./equals":"fa1ab511ff6ab0502346bfabf2941ca6","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"81116a6336006dfd973a6ee021798655":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var defaultTo =
/*#__PURE__*/
require("./defaultTo");

var path =
/*#__PURE__*/
require("./path");
/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */


var pathOr =
/*#__PURE__*/
_curry3(function pathOr(d, p, obj) {
  return defaultTo(d, path(p, obj));
});

module.exports = pathOr;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./defaultTo":"912fc3ecc2a62f9cf7a7079988783e1a","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"92b687aa27070bf1fdc0a37e84ff3c49":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var path =
/*#__PURE__*/
require("./path");
/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 *      R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true
 */


var pathSatisfies =
/*#__PURE__*/
_curry3(function pathSatisfies(pred, propPath, obj) {
  return pred(path(propPath, obj));
});

module.exports = pathSatisfies;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"76cc3396e7a01f7a0ada9ab556ab114c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */


var pick =
/*#__PURE__*/
_curry2(function pick(names, obj) {
  var result = {};
  var idx = 0;

  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }

    idx += 1;
  }

  return result;
});

module.exports = pick;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"5539dfad21619034b374675e0ae9e128":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */


var pickAll =
/*#__PURE__*/
_curry2(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;

  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }

  return result;
});

module.exports = pickAll;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"5aa6d46042f1a244e298273f5d458e14":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      const isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */


var pickBy =
/*#__PURE__*/
_curry2(function pickBy(test, obj) {
  var result = {};

  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }

  return result;
});

module.exports = pickBy;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"2d2fc58b2afc806504f423ab57f45654":[function(require,module,exports) {
var composeK =
/*#__PURE__*/
require("./composeK");

var reverse =
/*#__PURE__*/
require("./reverse");
/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @deprecated since v0.26.0
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      const getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */


function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }

  return composeK.apply(this, reverse(arguments));
}

module.exports = pipeK;
},{"./composeK":"1c53fa1f8dbe9fa9cf53a5e8942fe910","./reverse":"0296ebdcd0ebd5780215072f6b4ecc43"}],"d9c2a27fd07740d5c987e1aa567f3a99":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */


var prepend =
/*#__PURE__*/
_curry2(function prepend(el, list) {
  return _concat([el], list);
});

module.exports = prepend;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a0389b4931e5313a1c1f20fdd1f39e45":[function(require,module,exports) {
var multiply =
/*#__PURE__*/
require("./multiply");

var reduce =
/*#__PURE__*/
require("./reduce");
/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */


var product =
/*#__PURE__*/
reduce(multiply, 1);
module.exports = product;
},{"./multiply":"13c83fdba3a69bde2824a7692bac5765","./reduce":"a4ea825e03599ff070c684b6df9f404b"}],"d35ffd41902289d7b17942d2eaebfefa":[function(require,module,exports) {
var _map =
/*#__PURE__*/
require("./internal/_map");

var identity =
/*#__PURE__*/
require("./identity");

var pickAll =
/*#__PURE__*/
require("./pickAll");

var useWith =
/*#__PURE__*/
require("./useWith");
/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      const kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */


var project =
/*#__PURE__*/
useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity

module.exports = project;
},{"./internal/_map":"637b39e5bd792872e66a7d6bd59ffebe","./identity":"b84a40aa7af63c4b1e4992514d20c6a9","./pickAll":"5539dfad21619034b374675e0ae9e128","./useWith":"e1c6ebb2d0c8c850748b4d4fba3ed3a6"}],"e1c6ebb2d0c8c850748b4d4fba3ed3a6":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */


var useWith =
/*#__PURE__*/
_curry2(function useWith(fn, transformers) {
  return curryN(transformers.length, function () {
    var args = [];
    var idx = 0;

    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }

    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});

module.exports = useWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"1f4b6940aad984bd83ed7fae04411e87":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var equals =
/*#__PURE__*/
require("./equals");
/**
 * Returns `true` if the specified object property is equal, in
 * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
 * You can test multiple properties with [`R.whereEq`](#whereEq).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.whereEq, R.propSatisfies, R.equals
 * @example
 *
 *      const abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      const fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      const kids = [abby, fred, rusty, alois];
 *      const hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */


var propEq =
/*#__PURE__*/
_curry3(function propEq(name, val, obj) {
  return equals(val, obj[name]);
});

module.exports = propEq;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./equals":"fa1ab511ff6ab0502346bfabf2941ca6"}],"6e69b6d85e5527b3dc27666e6496b1d6":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var is =
/*#__PURE__*/
require("./is");
/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */


var propIs =
/*#__PURE__*/
_curry3(function propIs(type, name, obj) {
  return is(type, obj[name]);
});

module.exports = propIs;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./is":"2d524fab8f815b6e05063f7ec9a86572"}],"d5a85959339ed181688dad16d7d2f7eb":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var pathOr =
/*#__PURE__*/
require("./pathOr");
/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      const alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      const favorite = R.prop('favoriteLibrary');
 *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */


var propOr =
/*#__PURE__*/
_curry3(function propOr(val, p, obj) {
  return pathOr(val, [p], obj);
});

module.exports = propOr;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./pathOr":"81116a6336006dfd973a6ee021798655"}],"8e66b00d7d78b0e3c07a904b0b2a2d71":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise. You can test multiple properties with
 * [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.where, R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */


var propSatisfies =
/*#__PURE__*/
_curry3(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});

module.exports = propSatisfies;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"f2630b1fbce55e4e1c2327894161a2ae":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var path =
/*#__PURE__*/
require("./path");
/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */


var props =
/*#__PURE__*/
_curry2(function props(ps, obj) {
  return ps.map(function (p) {
    return path([p], obj);
  });
});

module.exports = props;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./path":"5dac672904e860cbe1dcd0e3b74315ef"}],"4a3f96d99016c178734c6a74ff83da16":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isNumber =
/*#__PURE__*/
require("./internal/_isNumber");
/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in the set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */


var range =
/*#__PURE__*/
_curry2(function range(from, to) {
  if (!(_isNumber(from) && _isNumber(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }

  var result = [];
  var n = from;

  while (n < to) {
    result.push(n);
    n += 1;
  }

  return result;
});

module.exports = range;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isNumber":"a97fa3461908a5c60123f70b578603ec"}],"12e05922b3b16f458dd88b45001b0aa2":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to [`reduce`](#reduce), except moves through the input list from the
 * right to the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *      //    -               -2
 *      //   / \              / \
 *      //  1   -            1   3
 *      //     / \              / \
 *      //    2   -     ==>    2  -1
 *      //       / \              / \
 *      //      3   -            3   4
 *      //         / \              / \
 *      //        4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */


var reduceRight =
/*#__PURE__*/
_curry3(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;

  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }

  return acc;
});

module.exports = reduceRight;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"6f26efd5d11b01ae2ccba585ea7852f0":[function(require,module,exports) {
var _curryN =
/*#__PURE__*/
require("./internal/_curryN");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _reduced =
/*#__PURE__*/
require("./internal/_reduced");
/**
 * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
 * through the list, successively calling the iterator function. `reduceWhile`
 * also takes a predicate that is evaluated before each step. If the predicate
 * returns `false`, it "short-circuits" the iteration and returns the current
 * value of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      const isOdd = (acc, x) => x % 2 === 1;
 *      const xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      const ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */


var reduceWhile =
/*#__PURE__*/
_curryN(4, [], function _reduceWhile(pred, fn, a, list) {
  return _reduce(function (acc, x) {
    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
  }, a, list);
});

module.exports = reduceWhile;
},{"./internal/_curryN":"9f7674d3d8adebf072178876ffbaa3eb","./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_reduced":"ed988cfc607b3a852cad5e9b89dace59"}],"3073a3a3a816b2bf881c689036815cb6":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _reduced =
/*#__PURE__*/
require("./internal/_reduced");
/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is only available to the below functions:
 * - [`reduce`](#reduce)
 * - [`reduceWhile`](#reduceWhile)
 * - [`transduce`](#transduce)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.reduceWhile, R.transduce
 * @example
 *
 *     R.reduce(
 *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
 *       [],
 *       [1, 2, 3, 4, 5]) // [1, 2, 3]
 */


var reduced =
/*#__PURE__*/
_curry1(_reduced);

module.exports = reduced;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_reduced":"ed988cfc607b3a852cad5e9b89dace59"}],"36937f9f26f9225be6077061e918990c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var always =
/*#__PURE__*/
require("./always");

var times =
/*#__PURE__*/
require("./times");
/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @see R.times
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      const obj = {};
 *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */


var repeat =
/*#__PURE__*/
_curry2(function repeat(value, n) {
  return times(always(value), n);
});

module.exports = repeat;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./always":"c4c44b815065280ed5ede48eae4ca7ef","./times":"0de9168b20d33e8fe4fbfbdcbda07e39"}],"0de9168b20d33e8fe4fbfbdcbda07e39":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @see R.repeat
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */


var times =
/*#__PURE__*/
_curry2(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }

  list = new Array(len);

  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }

  return list;
});

module.exports = times;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"bf318af1231930996a10a052224efe89":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * The first two parameters correspond to the parameters of the
 * `String.prototype.replace()` function, so the second parameter can also be a
 * function.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */


var replace =
/*#__PURE__*/
_curry3(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});

module.exports = replace;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"016098a048c3c8470cad6394beefd189":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Scan is similar to [`reduce`](#reduce), but returns a list of successively
 * reduced values from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @see R.reduce, R.mapAccum
 * @example
 *
 *      const numbers = [1, 2, 3, 4];
 *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */


var scan =
/*#__PURE__*/
_curry3(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];

  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }

  return result;
});

module.exports = scan;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"4dae92b7573ba7e128accf608cdc912c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var ap =
/*#__PURE__*/
require("./ap");

var map =
/*#__PURE__*/
require("./map");

var prepend =
/*#__PURE__*/
require("./prepend");

var reduceRight =
/*#__PURE__*/
require("./reduceRight");
/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */


var sequence =
/*#__PURE__*/
_curry2(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {
    return ap(map(prepend, x), acc);
  }, of([]), traversable);
});

module.exports = sequence;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./ap":"3be78354abdad9c47ed7e04ec471cd25","./map":"0bc95d5b63ce61f297d323d91db4b198","./prepend":"d9c2a27fd07740d5c987e1aa567f3a99","./reduceRight":"12e05922b3b16f458dd88b45001b0aa2"}],"50be25262e2d25d375d11b7f09a4fae0":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var always =
/*#__PURE__*/
require("./always");

var over =
/*#__PURE__*/
require("./over");
/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      const xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */


var set =
/*#__PURE__*/
_curry3(function set(lens, v, x) {
  return over(lens, always(v), x);
});

module.exports = set;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./always":"c4c44b815065280ed5ede48eae4ca7ef","./over":"29e07e6d2992edd1928b8b8f69f6cd5e"}],"22ae8c677b0d094351f6ba75569d21d5":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, a) -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      const diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */


var sort =
/*#__PURE__*/
_curry2(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});

module.exports = sort;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a5ccf17966468b2eb06ff4c3ae429c39":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      const sortByFirstItem = R.sortBy(R.prop(0));
 *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *
 *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      const alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      const bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      const clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      const people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */


var sortBy =
/*#__PURE__*/
_curry2(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});

module.exports = sortBy;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"b3faa033dbd7b354a01b6f7d25b67555":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [(a, a) -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      const alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      const bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      const clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      const people = [clara, bob, alice];
 *      const ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */


var sortWith =
/*#__PURE__*/
_curry2(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var result = 0;
    var i = 0;

    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }

    return result;
  });
});

module.exports = sortWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"48d73588f7ebeb2f8879a0f07a0dfed7":[function(require,module,exports) {
var invoker =
/*#__PURE__*/
require("./invoker");
/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `sep`.
 * @see R.join
 * @example
 *
 *      const pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */


var split =
/*#__PURE__*/
invoker(1, 'split');
module.exports = split;
},{"./invoker":"288295995043de6d4a441681bd9a27fb"}],"4a9398b012883a98282198523f68ba2b":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var length =
/*#__PURE__*/
require("./length");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */


var splitAt =
/*#__PURE__*/
_curry2(function splitAt(index, array) {
  return [slice(0, index, array), slice(index, length(array), array)];
});

module.exports = splitAt;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./length":"884c6bc9f5a19df1b3052e3d9e9572e5","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"caab27d3a66d0b8c458946c736ee4f78":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */


var splitEvery =
/*#__PURE__*/
_curry2(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }

  var result = [];
  var idx = 0;

  while (idx < list.length) {
    result.push(slice(idx, idx += n, list));
  }

  return result;
});

module.exports = splitEvery;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"794041889783e73ce461dd830889cabf":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */


var splitWhen =
/*#__PURE__*/
_curry2(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});

module.exports = splitWhen;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"c578439d4f51246bdb0758771717f80a":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var equals =
/*#__PURE__*/
require("./equals");

var take =
/*#__PURE__*/
require("./take");
/**
 * Checks if a list starts with the provided sublist.
 *
 * Similarly, checks if a string starts with the provided substring.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> [a] -> Boolean
 * @sig String -> String -> Boolean
 * @param {*} prefix
 * @param {*} list
 * @return {Boolean}
 * @see R.endsWith
 * @example
 *
 *      R.startsWith('a', 'abc')                //=> true
 *      R.startsWith('b', 'abc')                //=> false
 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
 */


var startsWith =
/*#__PURE__*/
_curry2(function (prefix, list) {
  return equals(take(prefix.length, list), prefix);
});

module.exports = startsWith;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./equals":"fa1ab511ff6ab0502346bfabf2941ca6","./take":"1bc8f9f48d1c356c07c048ba115dee87"}],"1c0f4dd3dbe61ebb9bc3b3cbab712840":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      const minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      const complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */


var subtract =
/*#__PURE__*/
_curry2(function subtract(a, b) {
  return Number(a) - Number(b);
});

module.exports = subtract;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"b80e59f3e782f1e4693ab971628bfbb2":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var concat =
/*#__PURE__*/
require("./concat");

var difference =
/*#__PURE__*/
require("./difference");
/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */


var symmetricDifference =
/*#__PURE__*/
_curry2(function symmetricDifference(list1, list2) {
  return concat(difference(list1, list2), difference(list2, list1));
});

module.exports = symmetricDifference;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./concat":"22f14b64aca33ebdeafc850fb29c3b01","./difference":"f754e7875b0371199ee39c9cfddf6f93"}],"96dd07c513b37e5b25b716ab9b8b8523":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var concat =
/*#__PURE__*/
require("./concat");

var differenceWith =
/*#__PURE__*/
require("./differenceWith");
/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      const eqA = R.eqBy(R.prop('a'));
 *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */


var symmetricDifferenceWith =
/*#__PURE__*/
_curry3(function symmetricDifferenceWith(pred, list1, list2) {
  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
});

module.exports = symmetricDifferenceWith;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./concat":"22f14b64aca33ebdeafc850fb29c3b01","./differenceWith":"e3cee16d8750d79e9e29ba9457981d22"}],"8cda8c6b1cd77cbe40430008319bc09c":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      const isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 *
 *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
 */


var takeLastWhile =
/*#__PURE__*/
_curry2(function takeLastWhile(fn, xs) {
  var idx = xs.length - 1;

  while (idx >= 0 && fn(xs[idx])) {
    idx -= 1;
  }

  return slice(idx + 1, Infinity, xs);
});

module.exports = takeLastWhile;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"abd8b2c6a327e0ad8f524de2130297ad":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xtakeWhile =
/*#__PURE__*/
require("./internal/_xtakeWhile");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      const isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 *
 *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
 */


var takeWhile =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {
  var idx = 0;
  var len = xs.length;

  while (idx < len && fn(xs[idx])) {
    idx += 1;
  }

  return slice(0, idx, xs);
}));

module.exports = takeWhile;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xtakeWhile":"e356cdbd5dc211b8f8ab767c355aa48d","./slice":"5ec9dfeb67bcd00dd1695ebc435298fa"}],"e356cdbd5dc211b8f8ab767c355aa48d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XTakeWhile =
/*#__PURE__*/
function () {
  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;

  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
  };

  return XTakeWhile;
}();

var _xtakeWhile =
/*#__PURE__*/
_curry2(function _xtakeWhile(f, xf) {
  return new XTakeWhile(f, xf);
});

module.exports = _xtakeWhile;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_reduced":"ed988cfc607b3a852cad5e9b89dace59","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"c5481c051b9b9ea676bc61a2d737840d":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xtap =
/*#__PURE__*/
require("./internal/_xtap");
/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * Acts as a transducer if a transformer is given as second parameter.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      const sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */


var tap =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable([], _xtap, function tap(fn, x) {
  fn(x);
  return x;
}));

module.exports = tap;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_dispatchable":"bee1559865cd89160564b46319fcf7ed","./internal/_xtap":"7a603fa9b43db016aa2317710ccaf2eb"}],"7a603fa9b43db016aa2317710ccaf2eb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XTap =
/*#__PURE__*/
function () {
  function XTap(f, xf) {
    this.xf = xf;
    this.f = f;
  }

  XTap.prototype['@@transducer/init'] = _xfBase.init;
  XTap.prototype['@@transducer/result'] = _xfBase.result;

  XTap.prototype['@@transducer/step'] = function (result, input) {
    this.f(input);
    return this.xf['@@transducer/step'](result, input);
  };

  return XTap;
}();

var _xtap =
/*#__PURE__*/
_curry2(function _xtap(f, xf) {
  return new XTap(f, xf);
});

module.exports = _xtap;
},{"./_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./_xfBase":"12ce331910d5af763f3a242fca534bdb"}],"2ab0c8e816d62cd061665cd2157d41fc":[function(require,module,exports) {
var _cloneRegExp =
/*#__PURE__*/
require("./internal/_cloneRegExp");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isRegExp =
/*#__PURE__*/
require("./internal/_isRegExp");

var toString =
/*#__PURE__*/
require("./toString");
/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */


var test =
/*#__PURE__*/
_curry2(function test(pattern, str) {
  if (!_isRegExp(pattern)) {
    throw new TypeError('â€˜testâ€™ requires a value of type RegExp as its first argument; received ' + toString(pattern));
  }

  return _cloneRegExp(pattern).test(str);
});

module.exports = test;
},{"./internal/_cloneRegExp":"0cdb1e28dc4a4e270152bee8609edb47","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_isRegExp":"52c72cb7fd0072fa9f56e678d097e6bc","./toString":"a49d50a85f6d5ef46be954a65e0548b1"}],"52c72cb7fd0072fa9f56e678d097e6bc":[function(require,module,exports) {
function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
}

module.exports = _isRegExp;
},{}],"9148de4909d89a4760c095610b55f656":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _assertPromise =
/*#__PURE__*/
require("./internal/_assertPromise");
/**
 * Returns the result of applying the onSuccess function to the value inside
 * a successfully resolved promise. This is useful for working with promises
 * inside function compositions.
 *
 * @func
 * @memberOf R
 * @since v0.27.1
 * @category Function
 * @sig (a -> b) -> (Promise e a) -> (Promise e b)
 * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)
 * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.
 * @param {Promise} p
 * @return {Promise} The result of calling `p.then(onSuccess)`
 * @see R.otherwise
 * @example
 *
 *      var makeQuery = (email) => ({ query: { email }});
 *
 *      //getMemberName :: String -> Promise ({firstName, lastName})
 *      var getMemberName = R.pipe(
 *        makeQuery,
 *        fetchMember,
 *        R.andThen(R.pick(['firstName', 'lastName']))
 *      );
 */


var andThen =
/*#__PURE__*/
_curry2(function andThen(f, p) {
  _assertPromise('andThen', p);

  return p.then(f);
});

module.exports = andThen;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_assertPromise":"2f47311ff2d0cd7687ee018d3eb1b85b"}],"f399a718eb0d75ca0de197b75af2f6df":[function(require,module,exports) {
var invoker =
/*#__PURE__*/
require("./invoker");
/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */


var toLower =
/*#__PURE__*/
invoker(0, 'toLowerCase');
module.exports = toLower;
},{"./invoker":"288295995043de6d4a441681bd9a27fb"}],"eeb84f359498b1f51c8cd1a2b56207e1":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _has =
/*#__PURE__*/
require("./internal/_has");
/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */


var toPairs =
/*#__PURE__*/
_curry1(function toPairs(obj) {
  var pairs = [];

  for (var prop in obj) {
    if (_has(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }

  return pairs;
});

module.exports = toPairs;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./internal/_has":"2b64423201651bda1efe948048e1201b"}],"e8470970812c8d198420b124bdcff1c7":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      const F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      const f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */


var toPairsIn =
/*#__PURE__*/
_curry1(function toPairsIn(obj) {
  var pairs = [];

  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }

  return pairs;
});

module.exports = toPairsIn;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"f2c49dfe1ff7ce8b3c09a1e659356cfa":[function(require,module,exports) {
var invoker =
/*#__PURE__*/
require("./invoker");
/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */


var toUpper =
/*#__PURE__*/
invoker(0, 'toUpperCase');
module.exports = toUpper;
},{"./invoker":"288295995043de6d4a441681bd9a27fb"}],"141c9e8f29478ec6a142477c056ee784":[function(require,module,exports) {
var _reduce =
/*#__PURE__*/
require("./internal/_reduce");

var _xwrap =
/*#__PURE__*/
require("./internal/_xwrap");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the [`R.reduced`](#reduced) function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is
 * [`R.identity`](#identity). The init function can be used to provide an
 * initial accumulator, but is ignored by transduce.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      const numbers = [1, 2, 3, 4];
 *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 *
 *      const isOdd = (x) => x % 2 === 1;
 *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
 *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
 */


var transduce =
/*#__PURE__*/
curryN(4, function transduce(xf, fn, acc, list) {
  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
});
module.exports = transduce;
},{"./internal/_reduce":"8b27f617d657516c735e655b3ac0c38e","./internal/_xwrap":"1f1969be6c26293a821beae90b66eaee","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"618bef98decd1ebb4892586d1fad28e5":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 *      // If some of the rows are shorter than the following rows, their elements are skipped:
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */


var transpose =
/*#__PURE__*/
_curry1(function transpose(outerlist) {
  var i = 0;
  var result = [];

  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;

    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }

      result[j].push(innerlist[j]);
      j += 1;
    }

    i += 1;
  }

  return result;
});

module.exports = transpose;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"8745a9cae82baf54c9d1fe9bd34f6ec1":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var map =
/*#__PURE__*/
require("./map");

var sequence =
/*#__PURE__*/
require("./sequence");
/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `traverse` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Maybe.Nothing` if the given divisor is `0`
 *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing
 */


var traverse =
/*#__PURE__*/
_curry3(function traverse(of, f, traversable) {
  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));
});

module.exports = traverse;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./map":"0bc95d5b63ce61f297d323d91db4b198","./sequence":"4dae92b7573ba7e128accf608cdc912c"}],"4cd489f251b5ac5554fb52c046a00a5b":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
var zeroWidth = '\u200b';
var hasProtoTrim = typeof String.prototype.trim === 'function';
/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */

var trim = !hasProtoTrim ||
/*#__PURE__*/
ws.trim() || !
/*#__PURE__*/
zeroWidth.trim() ?
/*#__PURE__*/
_curry1(function trim(str) {
  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
  return str.replace(beginRx, '').replace(endRx, '');
}) :
/*#__PURE__*/
_curry1(function trim(str) {
  return str.trim();
});
module.exports = trim;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"e19c029e6aa134338174614525047825":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'
 *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []
 *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}
 */


var tryCatch =
/*#__PURE__*/
_curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});

module.exports = tryCatch;
},{"./internal/_arity":"7cf93e43fea3f54b059e8389cc61a81f","./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"70d0460ec62099b5e94d9dd3c1cdcec7":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, `R.unapply` derives a variadic function from a function which
 * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */


var unapply =
/*#__PURE__*/
_curry1(function unapply(fn) {
  return function () {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});

module.exports = unapply;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"fcab1456a90f7cd4ab9a30007b5f2aa3":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var nAry =
/*#__PURE__*/
require("./nAry");
/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @see R.binary, R.nAry
 * @example
 *
 *      const takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      const takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */


var unary =
/*#__PURE__*/
_curry1(function unary(fn) {
  return nAry(1, fn);
});

module.exports = unary;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618","./nAry":"ab818489a9f6254dbcf4113bcf9c3f5b"}],"855fccbebbef5ec7bdc51ac8af978c94":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      const addFour = a => b => c => d => a + b + c + d;
 *
 *      const uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */


var uncurryN =
/*#__PURE__*/
_curry2(function uncurryN(depth, fn) {
  return curryN(depth, function () {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;

    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }

    return value;
  });
});

module.exports = uncurryN;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0"}],"eafc4824457752eeeb6d2c75b1d17ef9":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      const f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */


var unfold =
/*#__PURE__*/
_curry2(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];

  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }

  return result;
});

module.exports = unfold;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"444efc0e5bfdda8b26e6bf0015dbb313":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var compose =
/*#__PURE__*/
require("./compose");

var uniq =
/*#__PURE__*/
require("./uniq");
/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */


var union =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
compose(uniq, _concat));

module.exports = union;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./compose":"49c9bbfd09b8bcd1c24ff1bd3a7d209d","./uniq":"3742e8b86600eac6764776f624ba8d14"}],"f1235c2a5894c88413f9f70a5e27746f":[function(require,module,exports) {
var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var uniqWith =
/*#__PURE__*/
require("./uniqWith");
/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      const l1 = [{a: 1}, {a: 2}];
 *      const l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */


var unionWith =
/*#__PURE__*/
_curry3(function unionWith(pred, list1, list2) {
  return uniqWith(pred, _concat(list1, list2));
});

module.exports = unionWith;
},{"./internal/_concat":"5e911cc387b897c488ca64f885d1b94c","./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929","./uniqWith":"bfa353bce67868788dbf7bda49282678"}],"bfa353bce67868788dbf7bda49282678":[function(require,module,exports) {
var _includesWith =
/*#__PURE__*/
require("./internal/_includesWith");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      const strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */


var uniqWith =
/*#__PURE__*/
_curry2(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;

  while (idx < len) {
    item = list[idx];

    if (!_includesWith(pred, item, result)) {
      result[result.length] = item;
    }

    idx += 1;
  }

  return result;
});

module.exports = uniqWith;
},{"./internal/_includesWith":"da67f3ed3d7b6c9e04209e2753e93d2c","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"2566a9eb253e329e65b14e8df9b903cb":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when, R.cond
 * @example
 *
 *      let safeInc = R.unless(R.isNil, R.inc);
 *      safeInc(null); //=> null
 *      safeInc(1); //=> 2
 */


var unless =
/*#__PURE__*/
_curry3(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});

module.exports = unless;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"d92e5eca62a766faf32afc72173728c9":[function(require,module,exports) {
var _identity =
/*#__PURE__*/
require("./internal/_identity");

var chain =
/*#__PURE__*/
require("./chain");
/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */


var unnest =
/*#__PURE__*/
chain(_identity);
module.exports = unnest;
},{"./internal/_identity":"a640782576e25b277d16fdd9b6f16784","./chain":"50bf0a82c73d05d6b6bb831f8ed66823"}],"1a629d15e6cfd1f47a990fc696e5e07a":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */


var until =
/*#__PURE__*/
_curry3(function until(pred, fn, init) {
  var val = init;

  while (!pred(val)) {
    val = fn(val);
  }

  return val;
});

module.exports = until;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"37d79e00e6f3f3321d2a315cf633f2a7":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @see R.values, R.keysIn
 * @example
 *
 *      const F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      const f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */


var valuesIn =
/*#__PURE__*/
_curry1(function valuesIn(obj) {
  var prop;
  var vs = [];

  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }

  return vs;
});

module.exports = valuesIn;
},{"./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}],"8df733eaad14911faa7640aea9393e4b":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2"); // `Const` is a functor that effectively ignores the function given to `map`.


var Const = function (x) {
  return {
    value: x,
    'fantasy-land/map': function () {
      return this;
    }
  };
};
/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      const xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */


var view =
/*#__PURE__*/
_curry2(function view(lens, x) {
  // Using `Const` effectively ignores the setter function of the `lens`,
  // leaving the value returned by the getter function unmodified.
  return lens(Const)(x).value;
});

module.exports = view;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"697875dd099be2a2e1c5ed8717dec6f3":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless, R.cond
 * @example
 *
 *      // truncate :: String -> String
 *      const truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('â€¦'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789â€¦'
 */


var when =
/*#__PURE__*/
_curry3(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});

module.exports = when;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"cd6d560261fd27e3f65ee7ab39f02635":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _has =
/*#__PURE__*/
require("./internal/_has");
/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as [`filter`](#filter) and [`find`](#find).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propSatisfies, R.whereEq
 * @example
 *
 *      // pred :: Object -> Boolean
 *      const pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(R.__, 10),
 *        y: R.lt(R.__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */


var where =
/*#__PURE__*/
_curry2(function where(spec, testObj) {
  for (var prop in spec) {
    if (_has(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }

  return true;
});

module.exports = where;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./internal/_has":"2b64423201651bda1efe948048e1201b"}],"078857aed347d877d5809051e00c6310":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var equals =
/*#__PURE__*/
require("./equals");

var map =
/*#__PURE__*/
require("./map");

var where =
/*#__PURE__*/
require("./where");
/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in [`R.equals`](#equals) terms) as accessing that property of the
 * spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propEq, R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      const pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */


var whereEq =
/*#__PURE__*/
_curry2(function whereEq(spec, testObj) {
  return where(map(equals, spec), testObj);
});

module.exports = whereEq;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./equals":"fa1ab511ff6ab0502346bfabf2941ca6","./map":"0bc95d5b63ce61f297d323d91db4b198","./where":"cd6d560261fd27e3f65ee7ab39f02635"}],"dbcfd38efefbac1ddc131f21b8d4d4b4":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./internal/_includes");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var flip =
/*#__PURE__*/
require("./flip");

var reject =
/*#__PURE__*/
require("./reject");
/**
 * Returns a new list without values in the first argument.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce, R.difference, R.remove
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */


var without =
/*#__PURE__*/
_curry2(function (xs, list) {
  return reject(flip(_includes)(xs), list);
});

module.exports = without;
},{"./internal/_includes":"37e5ca8d870f0cfc3a8423048f7134ba","./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f","./flip":"34761018273d60835b7f638b36046118","./reject":"4e9354286a472ff5791746f4948c29c3"}],"df3a359a723901dfcea41c5a477919bb":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Exclusive disjunction logical operation.
 * Returns `true` if one of the arguments is truthy and the other is falsy.
 * Otherwise, it returns `false`.
 *
 * @func
 * @memberOf R
 * @since v0.27.1
 * @category Logic
 * @sig a -> b -> Boolean
 * @param {Any} a
 * @param {Any} b
 * @return {Boolean} true if one of the arguments is truthy and the other is falsy
 * @see R.or, R.and
 * @example
 *
 *      R.xor(true, true); //=> false
 *      R.xor(true, false); //=> true
 *      R.xor(false, true); //=> true
 *      R.xor(false, false); //=> false
 */


var xor =
/*#__PURE__*/
_curry2(function xor(a, b) {
  return Boolean(!a ^ !b);
});

module.exports = xor;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"a1c9685d3c5cfecfe57326e691e3acf8":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */


var xprod =
/*#__PURE__*/
_curry2(function xprod(a, b) {
  // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];

  while (idx < ilen) {
    j = 0;

    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }

    idx += 1;
  }

  return result;
});

module.exports = xprod;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"16b2f0af3d2b263fa33c4a9226693722":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */


var zip =
/*#__PURE__*/
_curry2(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);

  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }

  return rv;
});

module.exports = zip;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"15afe174c13246cf7a1e70ced2f4d607":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */


var zipObj =
/*#__PURE__*/
_curry2(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};

  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }

  return out;
});

module.exports = zipObj;
},{"./internal/_curry2":"edc57fa683b62e14afbc26cc9c06ec1f"}],"8b011698a4d518ed098246656481735c":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      const f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */


var zipWith =
/*#__PURE__*/
_curry3(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);

  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }

  return rv;
});

module.exports = zipWith;
},{"./internal/_curry3":"ce5871c5cd8a73d0aa15e6515f516929"}],"102ceb84f8395d1b094ef6d49ee6bce1":[function(require,module,exports) {
var curryN =
/*#__PURE__*/
require("./curryN");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Creates a thunk out of a function. A thunk delays a calculation until
 * its result is needed, providing lazy evaluation of arguments.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category Function
 * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)
 * @param {Function} fn A function to wrap in a thunk
 * @return {Function} Expects arguments for `fn` and returns a new function
 *  that, when called, applies those arguments to `fn`.
 * @see R.partial, R.partialRight
 * @example
 *
 *      R.thunkify(R.identity)(42)(); //=> 42
 *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42
 */


var thunkify =
/*#__PURE__*/
_curry1(function thunkify(fn) {
  return curryN(fn.length, function createThunk() {
    var fnArgs = arguments;
    return function invokeThunk() {
      return fn.apply(this, fnArgs);
    };
  });
});

module.exports = thunkify;
},{"./curryN":"f89f433bc9b54b142bdee97bc2c2ffa0","./internal/_curry1":"150de668e82b83a9b7b506a35fa88618"}]},{},["9294434ffe453eb8366110bc293fe969","2bdaaf333d46f546e6de832b87d4a615","64197246fa69ba2a49eb430657b7e32e"], null)

//# sourceMappingURL=scripts.aa28ae9b.js.map
